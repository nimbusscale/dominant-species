var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Animal.html",[0,0.69,1,1.46]],["body/classes/Animal.html",[0,0.466,1,2.626,2,1.425,3,0.368,4,0.323,5,0.323,6,1.246,7,0.985,8,2.516,9,3.064,10,2.532,11,4.118,12,3.064,13,3.064,14,4.651,15,3.706,16,0.204,17,0.704,18,3.695,19,1.265,20,1.082,21,3.064,22,3.064,23,1.489,24,1.705,25,1.307,26,3.033,27,0.883,28,2.516,29,3.818,30,1.581,31,3.064,32,1.304,33,0.041,34,0.555,35,1.304,36,3.064,37,2.203,38,2.027,39,3.064,40,1.614,41,3.064,42,3.064,43,3.064,44,2.597,45,1.642,46,1.448,47,2.027,48,2.027,49,2.027,50,2.027,51,2.027,52,4.118,53,2.516,54,3.064,55,3.064,56,2.027,57,2.027,58,2.027,59,2.027,60,2.516,61,1.489,62,2.027,63,2.027,64,0.949,65,2.027,66,1.246,67,2.027,68,1.669,69,2.027,70,0.747,71,3.033,72,2.154,73,2.154,74,1.884,75,2.154,76,1.884,77,2.154,78,1.448,79,1.425,80,1.246,81,1.246,82,1.246,83,1.246,84,1.246,85,1.246,86,1.246,87,2.027,88,2.027,89,2.027,90,2.027,91,1.795,92,2.027,93,2.027,94,2.027,95,2.027,96,1.664,97,2.027,98,2.027,99,2.027,100,2.027,101,2.027,102,2.027,103,2.027,104,1.664,105,2.027,106,1.425,107,2.027,108,1.884,109,2.516,110,1.664,111,2.027,112,2.027,113,3.064,114,2.027,115,1.884,116,2.027,117,2.027,118,0.021,119,0.021]],["title/components/AppComponent.html",[120,1.46,121,1.847]],["body/components/AppComponent.html",[0,0.751,3,0.592,4,0.521,5,0.521,16,0.329,17,0.987,25,1.103,30,1.038,33,0.041,34,0.39,37,1.684,61,1.587,64,1.233,70,0.592,118,0.029,119,0.029,120,2.333,121,3.136,122,3.02,123,2.682,124,2.682,125,2.682,126,2.682,127,2.682,128,3.586,129,4.188,130,1.873,131,3.527,132,3.02,133,3.527,134,4.801,135,3.136,136,3.527,137,4.297,138,3.527,139,4.297,140,4.801,141,1.587,142,1.424,143,3.527,144,4.297,145,3.267,146,1.153,147,2.682,148,3.267,149,2.952,150,2.296,151,3.267,152,2.682,153,3.527,154,2.682,155,2.778,156,2.682,157,2.682,158,1.779,159,1.587,160,2.682,161,2.682]],["title/components/DrawPoolGameComponent.html",[120,1.46,135,1.847]],["body/components/DrawPoolGameComponent.html",[0,0.458,3,0.361,4,0.318,5,0.318,16,0.369,17,0.695,20,1.068,25,0.939,27,1.319,30,1.526,32,0.704,33,0.041,34,0.436,35,0.704,37,1.721,45,1.441,46,1.939,61,1.471,64,1.186,70,0.361,78,0.781,118,0.021,119,0.021,120,1.777,121,1.226,122,2.127,123,1.637,124,1.637,125,1.637,127,1.637,128,2.87,129,3.352,131,2.484,132,2.127,133,2.484,135,2.511,136,2.484,138,2.484,141,1.471,142,1.319,146,0.704,149,3.554,150,3.478,152,1.637,153,2.484,154,1.637,155,2.223,156,1.637,157,1.637,158,3.013,159,1.984,160,1.637,161,1.637,162,4.061,163,1.637,164,3.657,165,3.657,166,3.026,167,3.026,168,4.39,169,4.39,170,3.352,171,4.083,172,4.083,173,1.994,174,2.511,175,3.002,176,1.984,177,3.657,178,2.511,179,3.026,180,3.026,181,1.994,182,1.994,183,1.994,184,1.994,185,1.226,186,2.127,187,1.994,188,2.484,189,1.994,190,1.994,191,1.994,192,1.401,193,1.994,194,1.994,195,1.991,196,1.994,197,1.994,198,1.401,199,1.994,200,1.994,201,1.994,202,3.794,203,1.994,204,1.637,205,1.994,206,1.994,207,1.994,208,1.994,209,1.994,210,1.994,211,1.994,212,1.994,213,1.637,214,1.994,215,1.994,216,2.484,217,2.484,218,2.484,219,3.352,220,3.026]],["title/interfaces/Element.html",[37,1.177,221,0.69]],["body/interfaces/Element.html",[3,0.741,4,0.652,5,0.652,16,0.412,17,1.138,24,1.954,33,0.041,34,0.591,37,1.941,66,3.404,70,0.898,81,2.514,82,2.514,83,2.514,84,2.514,85,2.514,86,2.514,118,0.034,119,0.034,221,0.939,222,1.987,223,2.874]],["title/injectables/ElementDrawPoolService.html",[178,1.847,224,0.69]],["body/injectables/ElementDrawPoolService.html",[0,0.462,3,0.365,4,0.32,5,0.32,15,1.413,16,0.203,17,0.7,19,0.871,20,1.075,23,1.48,24,0.709,25,0.944,27,0.876,30,1.672,32,1.297,33,0.042,34,0.526,35,1.297,37,1.888,40,1.817,45,1.447,46,1.727,61,0.977,64,1.19,66,2.521,70,0.365,78,0.788,80,1.236,91,1.787,108,2.26,115,1.872,118,0.021,119,0.021,130,0.876,141,2.141,142,1.92,143,1.65,146,0.709,158,2.904,175,2.5,176,1.993,178,1.872,185,2.26,188,1.65,192,1.413,195,3.017,198,3.259,216,3.366,224,0.7,225,0.876,226,4.378,227,1.65,228,3.676,229,3.676,230,3.018,231,2.5,232,2.5,233,4.101,234,3.676,235,2.01,236,3.045,237,2.01,238,2.5,239,2.01,240,1.65,241,3.045,242,2.01,243,2.01,244,2.01,245,1.555,246,2.883,247,2.002,248,2.5,249,2.01,250,2.5,251,2.01,252,2.01,253,2.01,254,1.65,255,2.01,256,2.01,257,2.01,258,1.65,259,1.65,260,1.413,261,0.977,262,0.977,263,1.65,264,2.01,265,4.101,266,2.01,267,1.65,268,2.01,269,1.65,270,2.01,271,2.01,272,2.01,273,1.65,274,2.01,275,2.01,276,2.01,277,2.01,278,3.045,279,1.65,280,2.01,281,2.01,282,2.01,283,2.01,284,2.01,285,2.01,286,1.413,287,3.045,288,2.5,289,2.01,290,3.045,291,2.01]],["title/injectables/GameManagementService.html",[174,1.847,224,0.69]],["body/injectables/GameManagementService.html",[0,0.74,1,2.318,3,0.584,4,0.514,5,0.514,16,0.325,20,1.503,24,1.503,25,1.225,26,3.496,27,1.404,30,1.354,32,1.137,33,0.042,34,0.384,35,1.137,45,1.137,46,1.669,64,1.392,70,0.584,74,1.982,76,1.982,78,1.263,118,0.029,119,0.029,130,1.404,146,1.137,159,1.566,170,4.165,174,2.619,176,2.634,192,2.266,224,0.978,225,1.404,259,2.646,262,1.566,263,2.646,292,2.318,293,2.646,294,3.223,295,3.223,296,3.223,297,2.646,298,1.755,299,1.755,300,1.755,301,2.266,302,3.223,303,1.869,304,1.755,305,1.755,306,3.223,307,3.223,308,2.646,309,3.496,310,3.223,311,3.223,312,3.223,313,3.223,314,3.223]],["title/interfaces/GameState.html",[221,0.69,303,1.177]],["body/interfaces/GameState.html",[1,1.55,3,0.578,4,0.508,5,0.508,7,1.55,16,0.322,17,0.972,19,1.445,24,1.125,33,0.041,34,0.668,61,1.55,64,1.086,68,2.751,70,0.767,118,0.029,119,0.029,155,1.736,219,2.618,221,1.09,222,1.55,245,1.856,303,1.98,315,1.961,316,2.241,317,3.335,318,3.107,319,4.229,320,2.303,321,2.943,322,2.751,323,3.189,324,3.189,325,2.917,326,3.471,327,2.618,328,3.335,329,2.618,330,2.241,331,2.618,332,2.241,333,2.618,334,1.736,335,2.618,336,2.618,337,1.961,338,2.618,339,2.241,340,2.618,341,2.241,342,2.618,343,3.189,344,3.189,345,3.189,346,3.189,347,3.189,348,3.189]],["title/injectables/GameStateClientService.html",[224,0.69,349,1.847]],["body/injectables/GameStateClientService.html",[0,0.834,3,0.659,4,0.579,5,0.579,16,0.366,19,1.518,20,1.624,23,2.236,25,0.932,30,1.462,32,1.282,33,0.041,34,0.433,35,1.282,45,1.282,46,1.803,64,1.297,70,0.659,91,1.583,118,0.031,119,0.031,130,1.583,146,1.282,224,1.057,225,1.583,247,2.505,261,1.765,262,1.765,292,2.454,304,1.978,349,2.829,350,2.981,351,4.601,352,3.265,353,4.601,354,2.58,355,3.632,356,3.632,357,3.632,358,2.553,359,3.632,360,3.632]],["title/interfaces/GameStatePatch.html",[221,0.69,354,1.46]],["body/interfaces/GameStatePatch.html",[3,0.736,4,0.647,5,0.647,16,0.41,17,1.133,19,1.161,33,0.04,34,0.588,64,1.043,70,0.736,118,0.034,119,0.034,185,3.265,221,0.933,222,1.974,298,2.211,299,2.211,300,3.081,315,2.497,354,2.396,361,3.334,362,4.534,363,5.523]],["title/injectables/GameStatePatchService.html",[224,0.69,364,1.847]],["body/injectables/GameStatePatchService.html",[0,0.723,3,0.571,4,0.502,5,0.502,7,1.529,16,0.317,19,1.437,20,1.479,25,1.076,30,1.332,32,1.479,33,0.041,34,0.5,35,1.479,45,1.479,64,1.29,70,0.571,91,1.827,118,0.029,119,0.029,130,1.371,146,1.111,224,0.963,225,1.371,246,2.212,262,1.529,292,2.291,298,1.714,299,1.714,300,2.283,303,2.285,304,2.283,305,1.714,352,2.898,354,2.616,358,2.212,362,2.583,364,2.577,365,2.583,366,3.441,367,4.192,368,4.192,369,3.441,370,4.192,371,4.192,372,3.147,373,4.192,374,3.091,375,3.147,376,3.147,377,3.147,378,3.147,379,3.147,380,3.147,381,3.147,382,3.147,383,3.147]],["title/injectables/GameStateService.html",[176,1.46,224,0.69]],["body/injectables/GameStateService.html",[0,0.425,3,0.335,4,0.295,5,0.295,7,0.899,16,0.187,19,1.381,20,1.008,23,1.388,25,1.09,27,1.245,30,1.638,32,1.498,33,0.042,34,0.506,35,1.498,40,1.539,45,1.705,46,2.14,64,1.273,68,2.138,70,0.335,78,1.12,91,1.245,108,2.758,109,2.345,118,0.019,119,0.019,130,0.806,146,0.653,159,1.696,176,1.908,195,2.443,221,0.656,224,0.656,225,0.806,245,1.232,247,1.901,261,0.899,262,0.899,292,2.543,303,1.833,304,1.556,305,1.007,320,2.138,321,1.901,322,2.138,330,2.008,332,2.454,341,2.008,349,2.414,352,2.61,354,1.908,358,1.3,364,2.414,369,1.518,374,1.757,384,1.518,385,2.345,386,2.857,387,2.857,388,2.857,389,2.857,390,2.857,391,2.857,392,2.857,393,3.223,394,2.345,395,3.926,396,3.223,397,2.345,398,2.345,399,3.223,400,1.849,401,3.491,402,3.491,403,1.849,404,2.857,405,1.849,406,1.849,407,2.345,408,1.849,409,1.849,410,3.484,411,2.866,412,2.857,413,2.345,414,2.857,415,1.849,416,2.345,417,1.849,418,2.345,419,1.849,420,1.849,421,1.518,422,1.849,423,1.518,424,1.849,425,1.849,426,1.849,427,1.849,428,1.518,429,1.518,430,1.518,431,1.849,432,1.849,433,1.849,434,3.491,435,1.849,436,1.849,437,1.849,438,1.518,439,2.857,440,1.849,441,1.849,442,1.849,443,3.491,444,1.518,445,1.518,446,1.849,447,1.849,448,1.849,449,1.849,450,1.849,451,1.3,452,1.849,453,1.849,454,1.849,455,1.849]],["title/injectables/GameStateStoreService.html",[224,0.69,320,1.636]],["body/injectables/GameStateStoreService.html",[0,0.254,3,0.2,4,0.176,5,0.176,7,0.537,16,0.247,17,0.432,19,1.491,20,1.021,23,0.913,25,0.966,27,1.068,30,1.583,32,1.397,33,0.041,34,0.525,35,1.327,40,1.809,45,1.509,46,1.929,60,1.543,64,0.905,68,1.575,70,0.2,78,0.736,80,0.679,91,1.726,108,2.313,110,0.907,115,1.507,118,0.013,119,0.013,128,0.777,130,0.482,141,0.913,142,1.26,146,0.39,195,2.712,202,1.543,217,1.543,224,0.432,225,0.482,245,0.865,247,2.248,260,1.723,261,0.537,262,0.537,267,1.543,279,2.013,286,3.363,292,2.447,297,0.907,298,0.602,299,0.602,300,0.602,303,2.257,304,0.602,305,0.602,308,0.907,318,2.539,320,2.156,321,2.048,322,1.575,325,1.778,328,1.321,334,1.575,337,1.778,339,1.321,352,1.155,374,2.776,385,1.543,393,2.894,394,2.374,396,2.894,397,2.374,398,1.543,399,2.894,407,1.543,410,3.088,411,2.013,413,1.543,416,1.543,418,1.543,421,0.907,423,0.907,428,0.907,429,0.907,430,0.907,438,0.907,444,1.543,445,0.907,456,0.907,457,1.879,458,1.879,459,1.879,460,1.879,461,1.879,462,1.879,463,3.96,464,2.892,465,1.879,466,1.879,467,1.879,468,1.879,469,1.879,470,2.892,471,3.526,472,1.879,473,1.879,474,1.879,475,2.661,476,1.879,477,1.879,478,1.879,479,4.275,480,1.879,481,1.543,482,2.661,483,1.543,484,1.879,485,3.25,486,2.892,487,1.879,488,1.879,489,1.879,490,1.879,491,2.892,492,2.374,493,2.892,494,1.879,495,1.321,496,1.879,497,1.879,498,1.879,499,2.452,500,2.892,501,2.892,502,1.321,503,2.374,504,1.879,505,1.879,506,1.879,507,2.452,508,2.452,509,2.452,510,1.879,511,1.879,512,1.879,513,2.452,514,1.879,515,1.879,516,1.105,517,1.105,518,1.879,519,1.105,520,1.879,521,0.777,522,1.105,523,1.105,524,1.105,525,1.879,526,1.105,527,1.105,528,1.879,529,1.105,530,1.105,531,1.105,532,1.105,533,1.105,534,1.105,535,1.105,536,1.105,537,1.105,538,1.105,539,1.105,540,1.105,541,1.105,542,1.105,543,1.105,544,1.105,545,1.105,546,4.129,547,1.105,548,1.105,549,1.105,550,1.105,551,1.105,552,1.105,553,1.105,554,1.105,555,1.105,556,1.105,557,2.892,558,1.879,559,1.105,560,1.105,561,1.105,562,1.105,563,1.105,564,1.105,565,1.105,566,1.105,567,1.105,568,1.105,569,1.105,570,1.105,571,1.879,572,1.105,573,1.105,574,1.105]],["title/interfaces/Piece.html",[221,0.69,575,1.847]],["body/interfaces/Piece.html",[3,0.784,4,0.689,5,0.689,16,0.436,17,1.176,24,1.99,33,0.039,34,0.516,70,0.784,118,0.035,119,0.035,221,0.993,222,2.101,575,3.148,576,3.55,577,3.835]],["title/classes/Pile.html",[0,0.69,245,1.06]],["body/classes/Pile.html",[0,0.325,2,0.993,3,0.256,4,0.225,5,0.225,7,1.639,8,2.769,16,0.142,17,0.53,19,1.14,20,0.814,23,1.121,24,1.549,25,0.866,27,0.616,28,1.893,30,1.577,32,1.19,33,0.042,34,0.623,35,1.19,40,0.904,45,1.549,46,1.322,64,0.75,70,0.418,78,1.563,91,1.62,104,2.769,106,1.621,115,2.285,118,0.016,119,0.016,141,1.42,142,1.47,149,2.074,155,1.837,158,1.837,159,0.686,185,2.791,186,2.803,195,2.656,198,2.803,204,2.769,213,2.399,230,2.399,231,1.893,232,1.893,238,1.893,240,3.051,245,1.956,246,0.993,247,1.591,248,1.893,250,1.893,254,1.16,260,0.993,261,0.686,269,1.893,286,2.371,288,4.135,305,0.769,318,1.418,322,2.603,325,1.418,334,2.024,337,2.452,366,1.893,374,1.418,475,2.769,482,1.893,483,1.893,492,2.399,502,1.621,503,3.274,521,1.621,575,2.871,577,0.993,578,0.993,579,3.373,580,3.727,581,2.306,582,2.306,583,2.306,584,2.306,585,4.669,586,2.399,587,2.306,588,2.922,589,3.988,590,4.135,591,3.373,592,2.306,593,2.306,594,2.399,595,2.306,596,2.306,597,2.306,598,1.621,599,1.893,600,2.306,601,1.413,602,1.413,603,1.413,604,1.413,605,1.413,606,2.922,607,3.717,608,3.373,609,2.306,610,2.306,611,1.413,612,2.306,613,1.413,614,1.413,615,2.306,616,1.413,617,1.413,618,1.413,619,2.306,620,3.717,621,1.16,622,1.16,623,1.16,624,1.16,625,1.16,626,1.16,627,2.922,628,1.413,629,3.373,630,1.413,631,2.306,632,2.306,633,1.413,634,1.413,635,1.413,636,1.413,637,1.413,638,1.413,639,2.306,640,2.306,641,1.413,642,2.306,643,2.306,644,1.413,645,1.413,646,2.922,647,2.922]],["title/interfaces/Player.html",[10,1.847,221,0.69]],["body/interfaces/Player.html",[3,0.759,4,0.668,5,0.668,10,3.089,16,0.422,17,1.154,25,1.433,33,0.039,34,0.599,61,2.816,70,0.759,118,0.034,119,0.034,221,0.962,222,2.035,309,4.581,648,3.438]],["title/coverage.html",[649,3.335]],["body/coverage.html",[0,0.95,1,1.498,5,0.491,6,2.542,10,1.895,19,1.425,33,0.041,34,0.368,37,1.208,40,1.208,44,2.167,79,2.167,118,0.028,119,0.028,120,2.009,121,1.895,126,2.53,135,1.895,149,2.542,150,2.167,158,1.678,162,2.53,163,2.53,174,1.895,176,1.498,178,1.895,186,4.032,221,1.194,223,2.167,224,1.23,226,2.53,227,2.53,245,1.088,292,2.526,293,2.53,301,2.167,303,1.208,315,2.542,316,2.167,320,1.678,349,1.895,350,2.53,354,1.498,361,2.53,364,1.895,365,2.53,384,2.53,456,2.53,575,1.895,576,2.53,578,2.167,648,2.53,649,2.53,650,2.53,651,3.082,652,3.082,653,4.985,654,2.53,655,4.665,656,2.53,657,4.134,658,4.665,659,4.134,660,4.134,661,3.082,662,3.082,663,3.082,664,2.53,665,3.082,666,3.082,667,2.167,668,2.167,669,3.082,670,3.082,671,3.082,672,3.082,673,3.082,674,3.082,675,3.082]],["title/dependencies.html",[676,1.776,677,2.957]],["body/dependencies.html",[33,0.041,118,0.033,119,0.033,146,1.386,147,3.225,261,1.909,298,2.139,299,2.139,300,2.139,677,3.225,678,3.928,679,5.84,680,3.928,681,4.832,682,3.928,683,3.928,684,3.928,685,3.928,686,4.832,687,4.832,688,3.928,689,3.928,690,3.928,691,3.928,692,3.928,693,3.928,694,3.928,695,3.928,696,3.928]],["title/miscellaneous/enumerations.html",[697,1.228,698,2.957]],["body/miscellaneous/enumerations.html",[16,0.452,33,0.038,37,2.05,118,0.036,119,0.036,142,1.955,258,4.295,667,3.153,668,3.678,697,2.18,698,3.682,699,3.682]],["title/index.html",[16,0.255,451,1.776,700,2.074]],["body/index.html",[4,0.537,25,0.864,33,0.03,40,1.32,106,2.367,118,0.03,119,0.03,120,2.368,218,4.504,485,3.598,502,2.367,598,3.425,599,4.237,676,2.367,701,3.367,702,4.383,703,3.367,704,4.873,705,4.873,706,2.764,707,3.367,708,3.367,709,4.383,710,5.351,711,5.586,712,3.367,713,3.367,714,3.367,715,3.367,716,3.367,717,3.367,718,3.367,719,3.367,720,2.764,721,3.367,722,3.367,723,4.873,724,3.367,725,3.367,726,3.367,727,3.367,728,3.367,729,4.383,730,4.383,731,5.161,732,3.367,733,4.383,734,3.367,735,3.367,736,3.367,737,3.367,738,4.383,739,3.367,740,3.367,741,3.367,742,3.367,743,3.367,744,3.367,745,4.873,746,3.367,747,3.367,748,2.764,749,2.367,750,3.367,751,3.367]],["title/license.html",[451,1.776,700,2.074,752,2.074]],["body/license.html",[24,1.219,33,0.03,53,3.658,96,4.049,118,0.03,119,0.03,481,2.836,577,2.428,594,2.836,598,3.132,650,2.836,720,2.836,748,2.836,752,2.836,753,3.454,754,4.933,755,3.454,756,3.454,757,3.454,758,4.456,759,3.454,760,3.454,761,3.454,762,3.454,763,3.454,764,3.454,765,4.456,766,5.754,767,3.454,768,3.454,769,3.454,770,3.454,771,3.454,772,3.454,773,3.454,774,3.454,775,3.454,776,3.454,777,3.454,778,3.454,779,4.456,780,3.454,781,3.454,782,3.454,783,3.454,784,3.454,785,3.454,786,3.454,787,4.456,788,4.456,789,3.454,790,3.454,791,3.454,792,3.454,793,3.454,794,3.454,795,3.454,796,3.454,797,3.454,798,3.454,799,3.454,800,3.454,801,3.454,802,3.454,803,3.454,804,3.454,805,3.454,806,3.454,807,3.454,808,3.454,809,3.454,810,3.454,811,3.454,812,3.454,813,3.454,814,3.454,815,3.454]],["title/modules.html",[816,3.335]],["body/modules.html",[33,0.037,118,0.037,119,0.037,816,3.855]],["title/overview.html",[749,2.856]],["body/overview.html",[2,3.201,33,0.036,44,3.201,118,0.036,119,0.036,122,3.201,222,2.213,225,1.984,495,3.71,749,3.201,817,4.553]],["title/properties.html",[17,0.828,676,1.776]],["body/properties.html",[17,1.066,33,0.038,118,0.036,119,0.036,706,3.81,818,4.641]],["title/miscellaneous/typealiases.html",[697,1.228,819,3.602]],["body/miscellaneous/typealiases.html",[1,1.618,6,2.047,16,0.336,19,1.47,29,3.572,33,0.04,34,0.653,66,2.675,68,2.369,71,3.572,72,2.341,73,2.341,74,2.047,75,2.341,76,2.047,77,2.341,81,2.047,82,2.047,83,2.047,84,2.047,85,2.047,86,2.047,118,0.03,119,0.03,155,1.813,221,1,223,2.341,245,1.536,315,2.047,316,3.059,317,2.341,318,2.675,321,2.369,322,2.639,325,3.16,326,3.572,327,2.734,328,3.407,329,2.734,330,2.341,331,2.734,332,2.341,333,2.734,334,1.813,335,2.734,336,2.734,337,2.047,338,2.734,339,2.341,340,2.734,341,2.341,342,2.734,521,2.341,578,2.341,580,2.734,586,2.734,590,3.572,621,2.734,622,2.734,623,2.734,624,2.734,625,2.734,697,1.618,820,3.33,821,3.572,822,3.33,823,3.33,824,3.33,825,4.351,826,3.33,827,3.33]],["title/miscellaneous/variables.html",[697,1.228,828,2.957]],["body/miscellaneous/variables.html",[6,2.07,15,3.081,16,0.34,24,1.188,33,0.041,34,0.523,40,1.32,72,2.367,73,2.367,74,2.07,75,2.367,76,2.07,77,2.367,78,1.32,79,3.081,80,2.07,81,2.695,82,2.695,83,2.695,84,2.695,85,2.695,86,2.695,118,0.03,119,0.03,132,2.367,141,2.368,142,2.124,159,1.636,245,1.188,273,2.764,301,3.081,303,1.718,317,2.367,321,1.834,334,1.834,495,2.367,626,2.764,654,2.764,656,3.598,664,2.764,667,2.367,668,3.081,697,1.636,699,2.764,821,2.764,828,2.764,829,3.367,830,3.367,831,3.367,832,3.367,833,3.367,834,3.367,835,3.367,836,3.367,837,3.367,838,3.367,839,3.367,840,5.586,841,3.367,842,3.367,843,3.367]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":186,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"coverage.html":{}}}],["0.0.0",{"_index":818,"title":{},"body":{"properties.html":{}}}],["0.14.10",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":115,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["1/1",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["1/15",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["18.2.0",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["18.2.5",{"_index":707,"title":{},"body":{"index.html":{}}}],["18.2.7",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":495,"title":{},"body":{"injectables/GameStateStoreService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.3.0",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["2/10",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":664,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["2024",{"_index":756,"title":{},"body":{"license.html":{}}}],["3.1.1",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["4.17.21",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":817,"title":{},"body":{"overview.html":{}}}],["6",{"_index":44,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"overview.html":{}}}],["60",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["_gamestate",{"_index":507,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_setgamestate",{"_index":510,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_setgamestate(newstate",{"_index":515,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_state",{"_index":588,"title":{},"body":{"classes/Pile.html":{}}}],["_transactionstate",{"_index":508,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["above",{"_index":786,"title":{},"body":{"license.html":{}}}],["accessible",{"_index":460,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["accessors",{"_index":23,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["action",{"_index":809,"title":{},"body":{"license.html":{}}}],["actions",{"_index":497,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["acts",{"_index":595,"title":{},"body":{"classes/Pile.html":{}}}],["actual_component",{"_index":161,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["add",{"_index":106,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"index.html":{}}}],["added",{"_index":14,"title":{},"body":{"classes/Animal.html":{}}}],["addedelement.kind",{"_index":112,"title":{},"body":{"classes/Animal.html":{}}}],["addedelements",{"_index":88,"title":{},"body":{"classes/Animal.html":{}}}],["addelement",{"_index":21,"title":{},"body":{"classes/Animal.html":{}}}],["addelement(element",{"_index":36,"title":{},"body":{"classes/Animal.html":{}}}],["adds",{"_index":39,"title":{},"body":{"classes/Animal.html":{}}}],["aliases",{"_index":820,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":110,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{}}}],["always",{"_index":635,"title":{},"body":{"classes/Pile.html":{}}}],["amphibiananimal",{"_index":72,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":777,"title":{},"body":{"license.html":{}}}],["angular",{"_index":704,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":146,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":190,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["angular/material/tooltip",{"_index":191,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["angular/platform",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":147,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["animal",{"_index":1,"title":{"classes/Animal.html":{}},"body":{"classes/Animal.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["animalkind",{"_index":71,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{}}}],["animalmodel",{"_index":97,"title":{},"body":{"classes/Animal.html":{}}}],["animalname",{"_index":99,"title":{},"body":{"classes/Animal.html":{}}}],["animalname.charat(0).touppercase",{"_index":101,"title":{},"body":{"classes/Animal.html":{}}}],["animalname.slice(1",{"_index":102,"title":{},"body":{"classes/Animal.html":{}}}],["animalstate",{"_index":29,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{}}}],["app",{"_index":129,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["app.component.html",{"_index":137,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":139,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":121,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":656,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":716,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applies",{"_index":367,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["apply",{"_index":369,"title":{},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{}}}],["apply(gamestate",{"_index":371,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["applygsp",{"_index":392,"title":{},"body":{"injectables/GameStateService.html":{}}}],["applygsp(gsp",{"_index":404,"title":{},"body":{"injectables/GameStateService.html":{}}}],["applypatch",{"_index":377,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["applypatch(gamestate",{"_index":381,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["arachnidanimal",{"_index":73,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["arising",{"_index":813,"title":{},"body":{"license.html":{}}}],["array",{"_index":608,"title":{},"body":{"classes/Pile.html":{}}}],["artifacts",{"_index":725,"title":{},"body":{"index.html":{}}}],["associated",{"_index":767,"title":{},"body":{"license.html":{}}}],["authors",{"_index":802,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":717,"title":{},"body":{"index.html":{}}}],["bag",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":327,"title":{},"body":{"interfaces/GameState.html":{},"miscellaneous/typealiases.html":{}}}],["based",{"_index":60,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{}}}],["basegamestate",{"_index":301,"title":{},"body":{"injectables/GameManagementService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":413,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["behaviorsubject",{"_index":260,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["behaviorsubject(0",{"_index":250,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["behaviorsubject(this._gamestate",{"_index":540,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["being",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["birdanimal",{"_index":74,"title":{},"body":{"classes/Animal.html":{},"injectables/GameManagementService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["both",{"_index":54,"title":{},"body":{"classes/Animal.html":{}}}],["browser",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":599,"title":{},"body":{"classes/Pile.html":{},"index.html":{}}}],["c",{"_index":755,"title":{},"body":{"license.html":{}}}],["call",{"_index":412,"title":{},"body":{"injectables/GameStateService.html":{}}}],["called",{"_index":464,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["calling",{"_index":501,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["capabilities",{"_index":743,"title":{},"body":{"index.html":{}}}],["capitalized",{"_index":95,"title":{},"body":{"classes/Animal.html":{}}}],["card",{"_index":13,"title":{},"body":{"classes/Animal.html":{}}}],["case",{"_index":500,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["change",{"_index":719,"title":{},"body":{"index.html":{}}}],["charge",{"_index":762,"title":{},"body":{"license.html":{}}}],["check",{"_index":747,"title":{},"body":{"index.html":{}}}],["choice",{"_index":737,"title":{},"body":{"index.html":{}}}],["claim",{"_index":805,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Animal.html":{},"classes/Pile.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"overview.html":{}}}],["cli",{"_index":705,"title":{},"body":{"index.html":{}}}],["client.service",{"_index":427,"title":{},"body":{"injectables/GameStateService.html":{}}}],["client.service.ts",{"_index":350,"title":{},"body":{"injectables/GameStateClientService.html":{},"coverage.html":{}}}],["client.service.ts:13",{"_index":357,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["client.service.ts:9",{"_index":355,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["code",{"_index":721,"title":{},"body":{"index.html":{}}}],["command",{"_index":738,"title":{},"body":{"index.html":{}}}],["commit",{"_index":445,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["committransaction",{"_index":393,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["compare",{"_index":378,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["compare(oldstate",{"_index":380,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["complains",{"_index":637,"title":{},"body":{"classes/Pile.html":{}}}],["component",{"_index":120,"title":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":156,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["components",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"overview.html":{}}}],["conditions",{"_index":785,"title":{},"body":{"license.html":{}}}],["connection",{"_index":814,"title":{},"body":{"license.html":{}}}],["console.log('create",{"_index":199,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log('end",{"_index":214,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log('start",{"_index":201,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log(json.stringify(gsp",{"_index":359,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["const",{"_index":78,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":27,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["constructor(gamemanagementsvc",{"_index":173,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["constructor(gamestateservice",{"_index":294,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["constructor(gamestatestore",{"_index":400,"title":{},"body":{"injectables/GameStateService.html":{}}}],["constructor(gamestatesvc",{"_index":235,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["constructor(private",{"_index":263,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{}}}],["constructor(state",{"_index":28,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{}}}],["contain",{"_index":587,"title":{},"body":{"classes/Pile.html":{}}}],["contract",{"_index":810,"title":{},"body":{"license.html":{}}}],["copies",{"_index":779,"title":{},"body":{"license.html":{}}}],["copy",{"_index":765,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":754,"title":{},"body":{"license.html":{}}}],["count",{"_index":240,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["coverage",{"_index":649,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":370,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["create(oldstate",{"_index":373,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["creategame",{"_index":170,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{}}}],["creates",{"_index":366,"title":{},"body":{"injectables/GameStatePatchService.html":{},"classes/Pile.html":{}}}],["current",{"_index":506,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["currentcount",{"_index":642,"title":{},"body":{"classes/Pile.html":{}}}],["currentitemcount",{"_index":646,"title":{},"body":{"classes/Pile.html":{}}}],["damages",{"_index":806,"title":{},"body":{"license.html":{}}}],["date.now",{"_index":379,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["deal",{"_index":768,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":815,"title":{},"body":{"license.html":{}}}],["deepclone",{"_index":297,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateStoreService.html":{}}}],["deepclone(basegamestate",{"_index":307,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["deepclone(this._gamestate",{"_index":558,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["deepclone(this._transactionstate",{"_index":559,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["default",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":30,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["defines",{"_index":326,"title":{},"body":{"interfaces/GameState.html":{},"miscellaneous/typealiases.html":{}}}],["defining",{"_index":317,"title":{},"body":{"interfaces/GameState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["definition",{"_index":596,"title":{},"body":{"classes/Pile.html":{}}}],["definitions",{"_index":348,"title":{},"body":{"interfaces/GameState.html":{}}}],["dependencies",{"_index":677,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Animal.html":{},"interfaces/GameState.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["detect",{"_index":567,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["dev",{"_index":713,"title":{},"body":{"index.html":{}}}],["development",{"_index":708,"title":{},"body":{"index.html":{}}}],["directive",{"_index":154,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["directives",{"_index":160,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":724,"title":{},"body":{"index.html":{}}}],["directory",{"_index":728,"title":{},"body":{"index.html":{}}}],["disable",{"_index":344,"title":{},"body":{"interfaces/GameState.html":{}}}],["dist",{"_index":727,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":775,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":329,"title":{},"body":{"interfaces/GameState.html":{},"miscellaneous/typealiases.html":{}}}],["documentation",{"_index":650,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["doesn't",{"_index":285,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["dom",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["dominant",{"_index":143,"title":{},"body":{"components/AppComponent.html":{},"injectables/ElementDrawPoolService.html":{}}}],["dominantspecies",{"_index":701,"title":{},"body":{"index.html":{}}}],["done",{"_index":496,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["draw",{"_index":158,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{},"coverage.html":{}}}],["drawn",{"_index":607,"title":{},"body":{"classes/Pile.html":{}}}],["drawpilekind",{"_index":258,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"miscellaneous/enumerations.html":{}}}],["drawpilekind.element",{"_index":273,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"miscellaneous/variables.html":{}}}],["drawpilestate",{"_index":275,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["drawpool",{"_index":234,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["drawpoolgamecomponent",{"_index":135,"title":{"components/DrawPoolGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["drawpoollength",{"_index":168,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["drawpoolsvc",{"_index":177,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["drew",{"_index":211,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["ds",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["during",{"_index":499,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["dynamic",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":336,"title":{},"body":{"interfaces/GameState.html":{},"miscellaneous/typealiases.html":{}}}],["e2e",{"_index":735,"title":{},"body":{"index.html":{}}}],["each",{"_index":334,"title":{},"body":{"interfaces/GameState.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["earth",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":37,"title":{"interfaces/Element.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["element.charat(0).touppercase",{"_index":208,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["element.kind",{"_index":113,"title":{},"body":{"classes/Animal.html":{}}}],["element.model",{"_index":67,"title":{},"body":{"classes/Animal.html":{}}}],["element.slice(1",{"_index":209,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elementdrawpool",{"_index":281,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["elementdrawpoolservice",{"_index":178,"title":{"injectables/ElementDrawPoolService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"coverage.html":{}}}],["elementfactory",{"_index":228,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["elementindex",{"_index":114,"title":{},"body":{"classes/Animal.html":{}}}],["elementkind",{"_index":66,"title":{},"body":{"classes/Animal.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"miscellaneous/typealiases.html":{}}}],["elementpile",{"_index":229,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["elements",{"_index":15,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"miscellaneous/variables.html":{}}}],["elementthe",{"_index":105,"title":{},"body":{"classes/Animal.html":{}}}],["emit",{"_index":491,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["emitlength",{"_index":591,"title":{},"body":{"classes/Pile.html":{}}}],["emitted",{"_index":477,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["empty",{"_index":213,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{}}}],["end",{"_index":218,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"index.html":{}}}],["endturn",{"_index":171,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["engine/model/faction.model",{"_index":69,"title":{},"body":{"classes/Animal.html":{}}}],["engine/model/pile.model",{"_index":256,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["engine/model/player.model",{"_index":65,"title":{},"body":{"classes/Animal.html":{}}}],["engine/service/game",{"_index":188,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{}}}],["ensure",{"_index":504,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ensures",{"_index":565,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ensuring",{"_index":41,"title":{},"body":{"classes/Animal.html":{}}}],["entire",{"_index":488,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["enumerations",{"_index":698,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":109,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateService.html":{}}}],["error(\"can't",{"_index":438,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["error(\"elementpile",{"_index":284,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["error('element",{"_index":266,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["error('gamestate",{"_index":279,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{}}}],["error('gamestatestore",{"_index":442,"title":{},"body":{"injectables/GameStateService.html":{}}}],["error('must",{"_index":547,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('no",{"_index":444,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["error('transaction",{"_index":450,"title":{},"body":{"injectables/GameStateService.html":{}}}],["eslint",{"_index":343,"title":{},"body":{"interfaces/GameState.html":{}}}],["eslint/consistent",{"_index":347,"title":{},"body":{"interfaces/GameState.html":{}}}],["event",{"_index":801,"title":{},"body":{"license.html":{}}}],["eventcoalescing",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":333,"title":{},"body":{"interfaces/GameState.html":{},"miscellaneous/typealiases.html":{}}}],["exceed",{"_index":42,"title":{},"body":{"classes/Animal.html":{}}}],["execute",{"_index":733,"title":{},"body":{"index.html":{}}}],["export",{"_index":70,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/Player.html":{}}}],["express",{"_index":793,"title":{},"body":{"license.html":{}}}],["faction",{"_index":321,"title":{},"body":{"interfaces/GameState.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["faction.model",{"_index":323,"title":{},"body":{"interfaces/GameState.html":{}}}],["factionstate",{"_index":68,"title":{},"body":{"classes/Animal.html":{},"interfaces/GameState.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/typealiases.html":{}}}],["factory",{"_index":597,"title":{},"body":{"classes/Pile.html":{}}}],["false).newdocument",{"_index":383,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["fast",{"_index":298,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["files",{"_index":720,"title":{},"body":{"index.html":{},"license.html":{}}}],["filter",{"_index":428,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["filter((gamestate",{"_index":542,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["first",{"_index":740,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":798,"title":{},"body":{"license.html":{}}}],["following",{"_index":784,"title":{},"body":{"license.html":{}}}],["free",{"_index":761,"title":{},"body":{"license.html":{}}}],["function",{"_index":521,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["furnished",{"_index":782,"title":{},"body":{"license.html":{}}}],["further",{"_index":744,"title":{},"body":{"index.html":{}}}],["game",{"_index":159,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"classes/Pile.html":{},"miscellaneous/variables.html":{}}}],["game.component",{"_index":151,"title":{},"body":{"components/AppComponent.html":{}}}],["game.component.html",{"_index":166,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.scss",{"_index":167,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts",{"_index":163,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["game.component.ts:16",{"_index":187,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:17",{"_index":179,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:28",{"_index":181,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:33",{"_index":184,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:38",{"_index":182,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:49",{"_index":183,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game/component/draw",{"_index":148,"title":{},"body":{"components/AppComponent.html":{}}}],["game/dominant",{"_index":302,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["game/draw",{"_index":150,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["game/model/animal.model",{"_index":306,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["gamemanagementservice",{"_index":174,"title":{"injectables/GameManagementService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"coverage.html":{}}}],["gamemanagementsvc",{"_index":180,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["gamestate",{"_index":303,"title":{"interfaces/GameState.html":{}},"body":{"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gamestate.faction",{"_index":308,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateStoreService.html":{}}}],["gamestate.pile",{"_index":573,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestateclient",{"_index":402,"title":{},"body":{"injectables/GameStateService.html":{}}}],["gamestateclientservice",{"_index":349,"title":{"injectables/GameStateClientService.html":{}},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestateelement",{"_index":325,"title":{},"body":{"interfaces/GameState.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["gamestatepatch",{"_index":354,"title":{"interfaces/GameStatePatch.html":{}},"body":{"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestatepatches",{"_index":368,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["gamestatepatchservice",{"_index":364,"title":{"injectables/GameStatePatchService.html":{}},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestateservice",{"_index":176,"title":{"injectables/GameStateService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestatestore",{"_index":332,"title":{},"body":{"interfaces/GameState.html":{},"injectables/GameStateService.html":{},"miscellaneous/typealiases.html":{}}}],["gamestatestoreservice",{"_index":320,"title":{"injectables/GameStateStoreService.html":{}},"body":{"interfaces/GameState.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["gamestatesubject",{"_index":509,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestatesvc",{"_index":175,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{}}}],["generate",{"_index":723,"title":{},"body":{"index.html":{}}}],["generated",{"_index":703,"title":{},"body":{"index.html":{}}}],["generic",{"_index":340,"title":{},"body":{"interfaces/GameState.html":{},"miscellaneous/typealiases.html":{}}}],["getdrawpool",{"_index":252,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["getelements",{"_index":50,"title":{},"body":{"classes/Animal.html":{}}}],["getfaction",{"_index":421,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["getgamestate",{"_index":533,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getgsp",{"_index":356,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["getkind",{"_index":56,"title":{},"body":{"classes/Animal.html":{}}}],["getlength",{"_index":254,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["getname",{"_index":58,"title":{},"body":{"classes/Animal.html":{}}}],["getobservableforkey",{"_index":511,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getobservableforkey(selector",{"_index":518,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getowner",{"_index":62,"title":{},"body":{"classes/Animal.html":{}}}],["getpile",{"_index":423,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["gets",{"_index":52,"title":{},"body":{"classes/Animal.html":{}}}],["getstate",{"_index":616,"title":{},"body":{"classes/Pile.html":{}}}],["getting",{"_index":700,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettransactionstate",{"_index":535,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["go",{"_index":746,"title":{},"body":{"index.html":{}}}],["granted",{"_index":760,"title":{},"body":{"license.html":{}}}],["grasselement",{"_index":84,"title":{},"body":{"classes/Animal.html":{},"interfaces/Element.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["grubelement",{"_index":82,"title":{},"body":{"classes/Animal.html":{},"interfaces/Element.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gsp",{"_index":352,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["gsp.patch",{"_index":382,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["gspservice",{"_index":401,"title":{},"body":{"injectables/GameStateService.html":{}}}],["help",{"_index":745,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":759,"title":{},"body":{"license.html":{}}}],["holders",{"_index":803,"title":{},"body":{"license.html":{}}}],["html",{"_index":153,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["http://localhost:4200",{"_index":715,"title":{},"body":{"index.html":{}}}],["id",{"_index":309,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/Player.html":{}}}],["identifier",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":741,"title":{},"body":{"index.html":{}}}],["implied",{"_index":794,"title":{},"body":{"license.html":{}}}],["import",{"_index":64,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["imports",{"_index":133,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["include",{"_index":280,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["included",{"_index":594,"title":{},"body":{"classes/Pile.html":{},"license.html":{}}}],["including",{"_index":53,"title":{},"body":{"classes/Animal.html":{},"license.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/Player.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/Player.html":{}}}],["inherent",{"_index":11,"title":{},"body":{"classes/Animal.html":{}}}],["inherentelementkindbyanimalkind",{"_index":79,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inherentelements",{"_index":87,"title":{},"body":{"classes/Animal.html":{}}}],["initial",{"_index":465,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["initialize",{"_index":216,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{}}}],["initialized",{"_index":267,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{}}}],["initializegamestate",{"_index":394,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["initializegamestate(gamestate",{"_index":407,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["injectable",{"_index":224,"title":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["injectables",{"_index":225,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"overview.html":{}}}],["insectanimal",{"_index":75,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["instantiated",{"_index":584,"title":{},"body":{"classes/Pile.html":{}}}],["instead",{"_index":338,"title":{},"body":{"interfaces/GameState.html":{},"miscellaneous/typealiases.html":{}}}],["interact",{"_index":388,"title":{},"body":{"injectables/GameStateService.html":{}}}],["interested",{"_index":474,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["interface",{"_index":221,"title":{"interfaces/Element.html":{},"interfaces/GameState.html":{},"interfaces/GameStatePatch.html":{},"interfaces/Piece.html":{},"interfaces/Player.html":{}},"body":{"interfaces/Element.html":{},"interfaces/GameState.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStateService.html":{},"interfaces/Piece.html":{},"interfaces/Player.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["interfaces",{"_index":222,"title":{},"body":{"interfaces/Element.html":{},"interfaces/GameState.html":{},"interfaces/GameStatePatch.html":{},"interfaces/Piece.html":{},"interfaces/Player.html":{},"overview.html":{}}}],["inventory",{"_index":626,"title":{},"body":{"classes/Pile.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":583,"title":{},"body":{"classes/Pile.html":{}}}],["item",{"_index":204,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{}}}],["item.kind",{"_index":553,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["item[0",{"_index":206,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["item[0].kind.replace('element",{"_index":207,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["itemcount",{"_index":639,"title":{},"body":{"classes/Pile.html":{}}}],["itemfactory",{"_index":590,"title":{},"body":{"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["itemkind",{"_index":619,"title":{},"body":{"classes/Pile.html":{}}}],["items",{"_index":288,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["items.push(null",{"_index":645,"title":{},"body":{"classes/Pile.html":{}}}],["items.push(this.itemfactory(itemkind",{"_index":644,"title":{},"body":{"classes/Pile.html":{}}}],["itemswithcount.length",{"_index":640,"title":{},"body":{"classes/Pile.html":{}}}],["itemswithcount[math.floor(math.random",{"_index":641,"title":{},"body":{"classes/Pile.html":{}}}],["joe",{"_index":757,"title":{},"body":{"license.html":{}}}],["json",{"_index":299,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"dependencies.html":{}}}],["k",{"_index":577,"title":{},"body":{"interfaces/Piece.html":{},"classes/Pile.html":{},"license.html":{}}}],["karma",{"_index":734,"title":{},"body":{"index.html":{}}}],["keeps",{"_index":623,"title":{},"body":{"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["key",{"_index":475,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["keyof",{"_index":545,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["keys",{"_index":470,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["kind",{"_index":24,"title":{},"body":{"classes/Animal.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["kinds",{"_index":586,"title":{},"body":{"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["leaving",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":152,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["length",{"_index":198,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["lengthsubject",{"_index":230,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["level",{"_index":469,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["liability",{"_index":807,"title":{},"body":{"license.html":{}}}],["liable",{"_index":804,"title":{},"body":{"license.html":{}}}],["license",{"_index":752,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":43,"title":{},"body":{"classes/Animal.html":{}}}],["limitation",{"_index":770,"title":{},"body":{"license.html":{}}}],["limited",{"_index":795,"title":{},"body":{"license.html":{}}}],["line",{"_index":219,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"interfaces/GameState.html":{}}}],["list",{"_index":90,"title":{},"body":{"classes/Animal.html":{}}}],["literal",{"_index":827,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["local",{"_index":505,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["lodash",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":169,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["maintain",{"_index":458,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["making",{"_index":459,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["mammalanimal",{"_index":76,"title":{},"body":{"classes/Animal.html":{},"injectables/GameManagementService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":319,"title":{},"body":{"interfaces/GameState.html":{}}}],["management.service",{"_index":189,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["management.service.ts",{"_index":293,"title":{},"body":{"injectables/GameManagementService.html":{},"coverage.html":{}}}],["management.service.ts:11",{"_index":295,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["management.service.ts:14",{"_index":296,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["many",{"_index":625,"title":{},"body":{"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["map",{"_index":80,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/variables.html":{}}}],["map((gamestate",{"_index":543,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["map((pilestates",{"_index":270,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["matbutton",{"_index":164,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["matching",{"_index":119,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mattooltip",{"_index":165,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["meatelement",{"_index":85,"title":{},"body":{"classes/Animal.html":{},"interfaces/Element.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["member",{"_index":609,"title":{},"body":{"classes/Pile.html":{}}}],["merchantability",{"_index":797,"title":{},"body":{"license.html":{}}}],["merge",{"_index":773,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["method",{"_index":463,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["miscellaneous",{"_index":697,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":753,"title":{},"body":{"license.html":{}}}],["model/element.model",{"_index":257,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["model/faction.model",{"_index":429,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["model/game",{"_index":304,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["model/pile.model",{"_index":430,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["modify",{"_index":772,"title":{},"body":{"license.html":{}}}],["modules",{"_index":816,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":502,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"index.html":{}}}],["name",{"_index":25,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/Player.html":{},"index.html":{}}}],["navigate",{"_index":714,"title":{},"body":{"index.html":{}}}],["need",{"_index":739,"title":{},"body":{"index.html":{}}}],["needed",{"_index":582,"title":{},"body":{"classes/Pile.html":{}}}],["new",{"_index":40,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newstate",{"_index":374,"title":{},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["newstate.kind",{"_index":554,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["next",{"_index":345,"title":{},"body":{"interfaces/GameState.html":{}}}],["ng",{"_index":711,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":800,"title":{},"body":{"license.html":{}}}],["notice",{"_index":787,"title":{},"body":{"license.html":{}}}],["null",{"_index":286,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["number",{"_index":185,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/GameStatePatch.html":{},"classes/Pile.html":{}}}],["object",{"_index":318,"title":{},"body":{"interfaces/GameState.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["object.keys(this._state.inventory).reduce",{"_index":630,"title":{},"body":{"classes/Pile.html":{}}}],["objects",{"_index":328,"title":{},"body":{"interfaces/GameState.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/typealiases.html":{}}}],["observable",{"_index":247,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["observables",{"_index":471,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["obtaining",{"_index":764,"title":{},"body":{"license.html":{}}}],["of(undefined",{"_index":360,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["oldstate",{"_index":376,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["one",{"_index":482,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["ones",{"_index":55,"title":{},"body":{"classes/Animal.html":{}}}],["operation",{"_index":363,"title":{},"body":{"interfaces/GameStatePatch.html":{}}}],["optional",{"_index":35,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["orchestrating",{"_index":389,"title":{},"body":{"injectables/GameStateService.html":{}}}],["others",{"_index":461,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["otherwise",{"_index":812,"title":{},"body":{"license.html":{}}}],["out",{"_index":748,"title":{},"body":{"index.html":{},"license.html":{}}}],["outside",{"_index":331,"title":{},"body":{"interfaces/GameState.html":{},"miscellaneous/typealiases.html":{}}}],["overview",{"_index":749,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrites",{"_index":489,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["owned",{"_index":9,"title":{},"body":{"classes/Animal.html":{}}}],["owner",{"_index":26,"title":{},"body":{"classes/Animal.html":{},"injectables/GameManagementService.html":{}}}],["package",{"_index":676,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":751,"title":{},"body":{"index.html":{}}}],["param",{"_index":104,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["particular",{"_index":481,"title":{},"body":{"injectables/GameStateStoreService.html":{},"license.html":{}}}],["passed",{"_index":466,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["patch",{"_index":300,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"dependencies.html":{}}}],["patch.model",{"_index":358,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{}}}],["patch.model.ts",{"_index":361,"title":{},"body":{"interfaces/GameStatePatch.html":{},"coverage.html":{}}}],["patch.service",{"_index":426,"title":{},"body":{"injectables/GameStateService.html":{}}}],["patch.service.ts",{"_index":365,"title":{},"body":{"injectables/GameStatePatchService.html":{},"coverage.html":{}}}],["patch.service.ts:13",{"_index":375,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["patch.service.ts:20",{"_index":372,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["permission",{"_index":758,"title":{},"body":{"license.html":{}}}],["permit",{"_index":780,"title":{},"body":{"license.html":{}}}],["person",{"_index":763,"title":{},"body":{"license.html":{}}}],["persons",{"_index":781,"title":{},"body":{"license.html":{}}}],["piece",{"_index":575,"title":{"interfaces/Piece.html":{}},"body":{"interfaces/Piece.html":{},"classes/Pile.html":{},"coverage.html":{}}}],["piece.model",{"_index":618,"title":{},"body":{"classes/Pile.html":{}}}],["pieces",{"_index":580,"title":{},"body":{"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["pile",{"_index":245,"title":{"classes/Pile.html":{}},"body":{"injectables/ElementDrawPoolService.html":{},"interfaces/GameState.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["pile(drawpilestate",{"_index":276,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pile.model",{"_index":324,"title":{},"body":{"interfaces/GameState.html":{}}}],["pilestate",{"_index":322,"title":{},"body":{"interfaces/GameState.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["pilestate.kind",{"_index":272,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pilestates.find((pilestate",{"_index":271,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pipe",{"_index":269,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["places",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platform",{"_index":736,"title":{},"body":{"index.html":{}}}],["player",{"_index":10,"title":{"interfaces/Player.html":{}},"body":{"classes/Animal.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["pool",{"_index":149,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"coverage.html":{}}}],["pool.service",{"_index":194,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["pool.service.ts",{"_index":227,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"coverage.html":{}}}],["pool.service.ts:12",{"_index":251,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:13",{"_index":249,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:14",{"_index":236,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:19",{"_index":244,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:23",{"_index":253,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:30",{"_index":237,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:47",{"_index":255,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:51",{"_index":243,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:60",{"_index":239,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:67",{"_index":242,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["portions",{"_index":790,"title":{},"body":{"license.html":{}}}],["pretty",{"_index":621,"title":{},"body":{"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["previous",{"_index":490,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["printed",{"_index":12,"title":{},"body":{"classes/Animal.html":{}}}],["private",{"_index":195,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["progress",{"_index":411,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["project",{"_index":702,"title":{},"body":{"index.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/GameState.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/Player.html":{},"properties.html":{}}}],["provideanimationsasync('noop",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":791,"title":{},"body":{"license.html":{}}}],["providedin",{"_index":262,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["providerouter(routes",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provides",{"_index":385,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["providezonechangedetection",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":18,"title":{},"body":{"classes/Animal.html":{}}}],["publish",{"_index":774,"title":{},"body":{"license.html":{}}}],["pull",{"_index":231,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["pull(count",{"_index":238,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["purpose",{"_index":799,"title":{},"body":{"license.html":{}}}],["put",{"_index":232,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["put(elements",{"_index":241,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["put(items",{"_index":610,"title":{},"body":{"classes/Pile.html":{}}}],["random",{"_index":579,"title":{},"body":{"classes/Pile.html":{}}}],["readonly",{"_index":589,"title":{},"body":{"classes/Pile.html":{}}}],["ready",{"_index":562,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["received",{"_index":494,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["reference",{"_index":750,"title":{},"body":{"index.html":{}}}],["regardless",{"_index":480,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["related",{"_index":390,"title":{},"body":{"injectables/GameStateService.html":{}}}],["reload",{"_index":718,"title":{},"body":{"index.html":{}}}],["removeelement",{"_index":22,"title":{},"body":{"classes/Animal.html":{}}}],["removeelement(element",{"_index":47,"title":{},"body":{"classes/Animal.html":{}}}],["removes",{"_index":49,"title":{},"body":{"classes/Animal.html":{}}}],["representing",{"_index":335,"title":{},"body":{"interfaces/GameState.html":{},"miscellaneous/typealiases.html":{}}}],["represents",{"_index":8,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{}}}],["reptileanimal",{"_index":77,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":341,"title":{},"body":{"interfaces/GameState.html":{},"injectables/GameStateService.html":{},"miscellaneous/typealiases.html":{}}}],["requiretransaction",{"_index":395,"title":{},"body":{"injectables/GameStateService.html":{}}}],["responsible",{"_index":457,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["rest",{"_index":386,"title":{},"body":{"injectables/GameStateService.html":{}}}],["restriction",{"_index":769,"title":{},"body":{"license.html":{}}}],["results",{"_index":118,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":91,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["returned",{"_index":606,"title":{},"body":{"classes/Pile.html":{}}}],["returns",{"_index":45,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["rights",{"_index":771,"title":{},"body":{"license.html":{}}}],["rollback",{"_index":570,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["rollbacktransaction",{"_index":396,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["root",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["root'},{'name",{"_index":157,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["routeroutlet",{"_index":134,"title":{},"body":{"components/AppComponent.html":{}}}],["run",{"_index":710,"title":{},"body":{"index.html":{}}}],["running",{"_index":729,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":261,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"dependencies.html":{}}}],["scaffolding",{"_index":722,"title":{},"body":{"index.html":{}}}],["seedelement",{"_index":83,"title":{},"body":{"classes/Animal.html":{},"interfaces/Element.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["selected",{"_index":600,"title":{},"body":{"classes/Pile.html":{}}}],["selector",{"_index":128,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["selector(gamestate",{"_index":544,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["sell",{"_index":778,"title":{},"body":{"license.html":{}}}],["sendgsptobackend",{"_index":351,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["sendgsptobackend(gsp",{"_index":353,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["serve",{"_index":712,"title":{},"body":{"index.html":{}}}],["server",{"_index":709,"title":{},"body":{"index.html":{}}}],["service/element",{"_index":193,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["services",{"_index":391,"title":{},"body":{"injectables/GameStateService.html":{}}}],["set",{"_index":503,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["setfaction",{"_index":397,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setfaction(newstate",{"_index":416,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setgamestate",{"_index":486,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["setgamestate(newstate",{"_index":525,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["setpile",{"_index":398,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setpile(newstate",{"_index":418,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setstate",{"_index":592,"title":{},"body":{"classes/Pile.html":{}}}],["setstate(newstate",{"_index":612,"title":{},"body":{"classes/Pile.html":{}}}],["settransactionstateelement",{"_index":512,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["settransactionstateelement(key",{"_index":528,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["several",{"_index":467,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["shall",{"_index":788,"title":{},"body":{"license.html":{}}}],["simple",{"_index":622,"title":{},"body":{"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["software",{"_index":766,"title":{},"body":{"license.html":{}}}],["someone",{"_index":473,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/Player.html":{},"index.html":{}}}],["species",{"_index":144,"title":{},"body":{"components/AppComponent.html":{}}}],["species.constants",{"_index":259,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{}}}],["species.constants.ts",{"_index":668,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../animal.model.ts",{"_index":821,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dominant",{"_index":699,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../element.model.ts",{"_index":822,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../faction.model.ts",{"_index":823,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../game",{"_index":824,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../pile.model.ts",{"_index":825,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/app.component.ts",{"_index":126,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:13",{"_index":145,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":654,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/engine/model/faction.model.ts",{"_index":826,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/engine/model/game",{"_index":315,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStatePatch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/engine/model/piece.model.ts",{"_index":576,"title":{},"body":{"interfaces/Piece.html":{},"coverage.html":{}}}],["src/app/engine/model/pile.model.ts",{"_index":578,"title":{},"body":{"classes/Pile.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/engine/model/pile.model.ts:28",{"_index":602,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:29",{"_index":603,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:30",{"_index":601,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:31",{"_index":593,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:48",{"_index":614,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:55",{"_index":604,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:59",{"_index":617,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:63",{"_index":613,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:73",{"_index":605,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:98",{"_index":611,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/player.model.ts",{"_index":648,"title":{},"body":{"interfaces/Player.html":{},"coverage.html":{}}}],["src/app/engine/service/game",{"_index":292,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["src/app/game/component/draw",{"_index":162,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["src/app/game/dominant",{"_index":667,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app/game/model/animal.model.ts",{"_index":6,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/game/model/animal.model.ts:32",{"_index":31,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:42",{"_index":51,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:46",{"_index":57,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:54",{"_index":59,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:59",{"_index":63,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:68",{"_index":38,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:81",{"_index":48,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/element.model.ts",{"_index":223,"title":{},"body":{"interfaces/Element.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/game/service/element",{"_index":226,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"coverage.html":{}}}],["standalone",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["start",{"_index":217,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["started",{"_index":451,"title":{"index.html":{},"license.html":{}},"body":{"injectables/GameStateService.html":{}}}],["starttransaction",{"_index":399,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["startturn",{"_index":172,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["state",{"_index":19,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["state.model",{"_index":305,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["state.model.ts",{"_index":316,"title":{},"body":{"interfaces/GameState.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["state.service",{"_index":192,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{}}}],["state.service.ts",{"_index":384,"title":{},"body":{"injectables/GameStateService.html":{},"coverage.html":{}}}],["state.service.ts:18",{"_index":403,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:29",{"_index":405,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:38",{"_index":408,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:42",{"_index":420,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:46",{"_index":406,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:61",{"_index":415,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:68",{"_index":409,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:74",{"_index":422,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:78",{"_index":417,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:82",{"_index":424,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:86",{"_index":419,"title":{},"body":{"injectables/GameStateService.html":{}}}],["statements",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store.service",{"_index":425,"title":{},"body":{"injectables/GameStateService.html":{}}}],["store.service.ts",{"_index":456,"title":{},"body":{"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["store.service.ts:101",{"_index":530,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:109",{"_index":517,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:118",{"_index":523,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:128",{"_index":537,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:132",{"_index":524,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:136",{"_index":538,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:140",{"_index":527,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:31",{"_index":531,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:32",{"_index":532,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:33",{"_index":514,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:39",{"_index":519,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:48",{"_index":529,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:62",{"_index":534,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:70",{"_index":536,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:78",{"_index":516,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:83",{"_index":522,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:91",{"_index":526,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["stored",{"_index":726,"title":{},"body":{"index.html":{}}}],["string",{"_index":61,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/GameState.html":{},"interfaces/Player.html":{}}}],["styleurl",{"_index":138,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["subject",{"_index":783,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":776,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":476,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["subscribe((drawpilestate",{"_index":274,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["subscribers",{"_index":566,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substantial",{"_index":789,"title":{},"body":{"license.html":{}}}],["substatearray",{"_index":549,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray.findindex((item",{"_index":552,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray.push(newstate",{"_index":556,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray[index",{"_index":555,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["such",{"_index":339,"title":{},"body":{"interfaces/GameState.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/typealiases.html":{}}}],["suffix",{"_index":98,"title":{},"body":{"classes/Animal.html":{}}}],["sum",{"_index":631,"title":{},"body":{"classes/Pile.html":{}}}],["sunelement",{"_index":86,"title":{},"body":{"classes/Animal.html":{},"interfaces/Element.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["supported",{"_index":342,"title":{},"body":{"interfaces/GameState.html":{},"miscellaneous/typealiases.html":{}}}],["system",{"_index":387,"title":{},"body":{"injectables/GameStateService.html":{}}}],["t",{"_index":520,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["table",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":498,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["takes",{"_index":487,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["template",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["templateurl",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["test",{"_index":732,"title":{},"body":{"index.html":{}}}],["test1",{"_index":310,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["test2",{"_index":312,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["tester1",{"_index":311,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["tester2",{"_index":313,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["testing",{"_index":742,"title":{},"body":{"index.html":{}}}],["tests",{"_index":731,"title":{},"body":{"index.html":{}}}],["this._gamestate",{"_index":557,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(deepclone(this._gamestate",{"_index":569,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(gamestate",{"_index":561,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(newstate",{"_index":563,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(this._transactionstate",{"_index":564,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._state",{"_index":627,"title":{},"body":{"classes/Pile.html":{}}}],["this._state.inventory[item.kind",{"_index":647,"title":{},"body":{"classes/Pile.html":{}}}],["this._state.inventory[itemkind",{"_index":643,"title":{},"body":{"classes/Pile.html":{}}}],["this._state.inventory[key",{"_index":632,"title":{},"body":{"classes/Pile.html":{}}}],["this._transactionstate",{"_index":546,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._transactionstate[key",{"_index":550,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.applygsp(gsp",{"_index":433,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.drawpool.length",{"_index":282,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.drawpool.pull(count",{"_index":289,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.drawpool.put(elements",{"_index":291,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.drawpoollength",{"_index":197,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.drawpoolsvc.length$.subscribe((length",{"_index":196,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.drawpoolsvc.pull",{"_index":205,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.elementfactory",{"_index":277,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.elementpile",{"_index":265,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.elements.length",{"_index":111,"title":{},"body":{"classes/Animal.html":{}}}],["this.emitlength",{"_index":629,"title":{},"body":{"classes/Pile.html":{}}}],["this.gamemanagementsvc.creategame",{"_index":200,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamestateclient.gsp$.pipe(filter((gsp",{"_index":431,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestateclient.sendgsptobackend(gsp",{"_index":448,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestateservice.initializegamestate(gamestate",{"_index":314,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["this.gamestatestore.committransaction",{"_index":447,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.faction",{"_index":452,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.gamestate",{"_index":434,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.initializegamestate(gamestate",{"_index":440,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.pile",{"_index":454,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.rollbacktransaction",{"_index":449,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setfaction(newstate",{"_index":453,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setgamestate(updatedstate",{"_index":437,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setpile(newstate",{"_index":455,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.starttransaction",{"_index":441,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.transactionstate",{"_index":443,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatesubject",{"_index":539,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesubject.asobservable().pipe",{"_index":541,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesubject.next(this.gamestate",{"_index":560,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesvc.committransaction",{"_index":215,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamestatesvc.pile",{"_index":268,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.gamestatesvc.requiretransaction",{"_index":287,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.gamestatesvc.setpile(this.elementpile.state",{"_index":283,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.gamestatesvc.starttransaction",{"_index":203,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.getobservableforkey((gamestate",{"_index":571,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gspservice.apply(this.gamestatestore.gamestate",{"_index":436,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gspservice.create",{"_index":446,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.initialize",{"_index":264,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.itemcounts.get(key",{"_index":634,"title":{},"body":{"classes/Pile.html":{}}}],["this.itemfactory",{"_index":628,"title":{},"body":{"classes/Pile.html":{}}}],["this.kind.replace('animal",{"_index":100,"title":{},"body":{"classes/Animal.html":{}}}],["this.lengthsubject.asobservable",{"_index":248,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["this.lengthsubject.next(this.elementpile.length",{"_index":278,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.lengthsubject.next(this.length",{"_index":633,"title":{},"body":{"classes/Pile.html":{}}}],["this.log.push('pile",{"_index":212,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.log.push(`you",{"_index":210,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.name",{"_index":117,"title":{},"body":{"classes/Animal.html":{}}}],["this.settransactionstateelement('faction",{"_index":572,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.settransactionstateelement('pile",{"_index":574,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.state",{"_index":89,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.addedelements",{"_index":93,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.addedelements.splice(elementindex",{"_index":116,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.inherentelements",{"_index":92,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.kind",{"_index":94,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.owner",{"_index":103,"title":{},"body":{"classes/Animal.html":{}}}],["this.updategamestate",{"_index":290,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["those",{"_index":472,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["throw",{"_index":108,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["throws",{"_index":107,"title":{},"body":{"classes/Animal.html":{}}}],["timestamp",{"_index":362,"title":{},"body":{"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{}}}],["title",{"_index":140,"title":{},"body":{"components/AppComponent.html":{}}}],["top",{"_index":468,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["tort",{"_index":811,"title":{},"body":{"license.html":{}}}],["total",{"_index":615,"title":{},"body":{"classes/Pile.html":{}}}],["tpiece",{"_index":585,"title":{},"body":{"classes/Pile.html":{}}}],["tpiecekind",{"_index":620,"title":{},"body":{"classes/Pile.html":{}}}],["track",{"_index":220,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["tracks",{"_index":624,"title":{},"body":{"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["transaction",{"_index":410,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["transactionstate",{"_index":513,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["tree",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["true",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"miscellaneous/variables.html":{}}}],["tsc",{"_index":636,"title":{},"body":{"classes/Pile.html":{}}}],["tslib",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":202,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["two",{"_index":483,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["type",{"_index":34,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/Element.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/Player.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":819,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":551,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["typescript",{"_index":346,"title":{},"body":{"interfaces/GameState.html":{}}}],["typically",{"_index":493,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["undefined",{"_index":246,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStatePatchService.html":{},"classes/Pile.html":{}}}],["undefined)).subscribe((gsp",{"_index":432,"title":{},"body":{"injectables/GameStateService.html":{}}}],["uninitialized",{"_index":439,"title":{},"body":{"injectables/GameStateService.html":{}}}],["unit",{"_index":730,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":638,"title":{},"body":{"classes/Pile.html":{}}}],["until",{"_index":462,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["update",{"_index":568,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["updated",{"_index":479,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["updatedstate",{"_index":435,"title":{},"body":{"injectables/GameStateService.html":{}}}],["updategamestate",{"_index":233,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["updates",{"_index":414,"title":{},"body":{"injectables/GameStateService.html":{}}}],["updating",{"_index":548,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["use",{"_index":598,"title":{},"body":{"classes/Pile.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":337,"title":{},"body":{"interfaces/GameState.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["value",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":492,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["var",{"_index":155,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/GameState.html":{},"classes/Pile.html":{},"miscellaneous/typealiases.html":{}}}],["variable",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":828,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":330,"title":{},"body":{"interfaces/GameState.html":{},"injectables/GameStateService.html":{},"miscellaneous/typealiases.html":{}}}],["vars",{"_index":581,"title":{},"body":{"classes/Pile.html":{}}}],["version",{"_index":706,"title":{},"body":{"index.html":{},"properties.html":{}}}],["via",{"_index":485,"title":{},"body":{"injectables/GameStateStoreService.html":{},"index.html":{}}}],["void",{"_index":46,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["warranties",{"_index":796,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":792,"title":{},"body":{"license.html":{}}}],["waterelement",{"_index":81,"title":{},"body":{"classes/Animal.html":{},"interfaces/Element.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ways",{"_index":484,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["whenever",{"_index":478,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["whether",{"_index":808,"title":{},"body":{"license.html":{}}}],["without",{"_index":96,"title":{},"body":{"classes/Animal.html":{},"license.html":{}}}],["zone.js",{"_index":695,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Animal.html":{"url":"classes/Animal.html","title":"class - Animal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Animal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/game/model/animal.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an animal owned by a player with inherent (printed on the card) and added elements.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addElement\n                            \n                            \n                                removeElement\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elements\n                                \n                                \n                                    kind\n                                \n                                \n                                    name\n                                \n                                \n                                    owner\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: AnimalState)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/model/animal.model.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        AnimalState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnimalState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/game/model/animal.model.ts:32\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addElement\n                        \n                    \n                \n            \n            \n                \naddElement(element: Element)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/model/animal.model.ts:68\n                        \n                    \n\n\n            \n                \n                        Adds a new element to the animal, ensuring it does not exceed the limit of 6 elements.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            Element\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeElement\n                        \n                    \n                \n            \n            \n                \nremoveElement(element: Element)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/model/animal.model.ts:81\n                        \n                    \n\n\n            \n                \n                        Removes an added element from the animal.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            Element\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elements\n                    \n                \n\n                \n                    \n                        getelements()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:42\n                                \n                            \n                    \n                        \n                                Gets all elements of the animal, including both inherent and added ones.\n\n\n                                \n                                \n                                \n                                    Returns :         Element[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        kind\n                    \n                \n\n                \n                    \n                        getkind()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:46\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:54\n                                \n                            \n                    \n                        \n                                Gets the name of the animal, based on its kind.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        owner\n                    \n                \n\n                \n                    \n                        getowner()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Player } from '../../engine/model/player.model';\nimport { Element, ElementKind } from './element.model';\nimport { FactionState } from '../../engine/model/faction.model';\n\nexport type AnimalKind =\n  | 'amphibianAnimal'\n  | 'arachnidAnimal'\n  | 'birdAnimal'\n  | 'insectAnimal'\n  | 'mammalAnimal'\n  | 'reptileAnimal';\n\nexport const inherentElementKindByAnimalKind = new Map([\n  ['amphibianAnimal', 'waterElement'],\n  ['arachnidAnimal', 'grubElement'],\n  ['birdAnimal', 'seedElement'],\n  ['insectAnimal', 'grassElement'],\n  ['mammalAnimal', 'meatElement'],\n  ['reptileAnimal', 'sunElement'],\n] as const);\n\nexport type AnimalState = FactionState & {\n  kind: AnimalKind;\n  inherentElements: Element[];\n  addedElements: Element[];\n};\n\n/**\n * Represents an animal owned by a player with inherent (printed on the card) and added elements.\n */\nexport class Animal {\n  public state: AnimalState;\n\n  constructor(state: AnimalState) {\n    this.state = state;\n  }\n\n  /**\n   * Gets all elements of the animal, including both inherent and added ones.\n   * @returns A list of all elements.\n   */\n  get elements(): Element[] {\n    return [...this.state.inherentElements, ...this.state.addedElements];\n  }\n\n  get kind(): AnimalKind {\n    return this.state.kind;\n  }\n\n  /**\n   * Gets the name of the animal, based on its kind.\n   * @returns The capitalized name of the animal without the \"AnimalModel\" suffix.\n   */\n  get name(): string {\n    const animalName = this.kind.replace('Animal', '');\n    return animalName.charAt(0).toUpperCase() + animalName.slice(1);\n  }\n\n  get owner(): Player {\n    return this.state.owner;\n  }\n\n  /**\n   * Adds a new element to the animal, ensuring it does not exceed the limit of 6 elements.\n   * @param elementThe element to add.\n   * @throws Will throw an error if the animal already has 6 elements.\n   */\n  addElement(element: Element): void {\n    if (this.elements.length  addedElement.kind === element.kind,\n    );\n    if (elementIndex !== -1) {\n      this.state.addedElements.splice(elementIndex, 1);\n    } else {\n      throw new Error(\n        `${this.name} does not have element kind ${element.kind} as an added element.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                DrawPoolGameComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'dominant-species'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { DrawPoolGameComponent } from './game/component/draw-pool-game/draw-pool-game.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, DrawPoolGameComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'dominant-species';\n}\n\n    \n\n    \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DrawPoolGameComponent', 'selector': 'app-draw-pool-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DrawPoolGameComponent.html":{"url":"components/DrawPoolGameComponent.html","title":"component - DrawPoolGameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DrawPoolGameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/component/draw-pool-game/draw-pool-game.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-draw-pool-game\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatButton\n                            MatTooltip\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./draw-pool-game.component.html\n            \n\n\n\n            \n                styleUrl\n                ./draw-pool-game.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                drawPoolLength\n                            \n                            \n                                log\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createGame\n                            \n                            \n                                draw\n                            \n                            \n                                endTurn\n                            \n                            \n                                startTurn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gameManagementSvc: GameManagementService, gameStateSvc: GameStateService, drawPoolSvc: ElementDrawPoolService)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameManagementSvc\n                                                  \n                                                        \n                                                                        GameManagementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gameStateSvc\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        drawPoolSvc\n                                                  \n                                                        \n                                                                        ElementDrawPoolService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createGame\n                        \n                    \n                \n            \n            \n                \ncreateGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draw\n                        \n                    \n                \n            \n            \n                \ndraw()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endTurn\n                        \n                    \n                \n            \n            \n                \nendTurn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTurn\n                        \n                    \n                \n            \n            \n                \nstartTurn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        drawPoolLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { GameManagementService } from '../../../engine/service/game-management.service';\nimport { MatButton } from '@angular/material/button';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { GameStateService } from '../../../engine/service/game-state.service';\nimport { ElementDrawPoolService } from '../../service/element-draw-pool.service';\n\n@Component({\n  selector: 'app-draw-pool-game',\n  standalone: true,\n  imports: [MatButton, MatTooltip],\n  templateUrl: './draw-pool-game.component.html',\n  styleUrl: './draw-pool-game.component.scss',\n})\nexport class DrawPoolGameComponent {\n  drawPoolLength = 0;\n  log: string[] = [];\n  constructor(\n    private gameManagementSvc: GameManagementService,\n    private gameStateSvc: GameStateService,\n    private drawPoolSvc: ElementDrawPoolService,\n  ) {\n    this.drawPoolSvc.length$.subscribe((length) => {\n      this.drawPoolLength = length;\n    });\n  }\n\n  createGame(): void {\n    console.log('Create Game');\n    this.gameManagementSvc.createGame();\n  }\n\n  startTurn(): void {\n    console.log('Start Turn');\n    this.gameStateSvc.startTransaction();\n  }\n\n  draw(): void {\n    const item = this.drawPoolSvc.pull();\n    if (item[0]) {\n      let element = item[0].kind.replace('Element', '');\n      element = element.charAt(0).toUpperCase() + element.slice(1);\n      this.log.push(`You drew a ${element}`);\n    } else {\n      this.log.push('Pile is empty!');\n    }\n  }\n\n  endTurn(): void {\n    console.log('End Turn');\n    this.gameStateSvc.commitTransaction();\n  }\n}\n\n    \n\n    \n        \n  \n    Initialize\n    Start Turn\n    Draw!\n    End Turn\n  \n  \n    Draw Pool: {{ drawPoolLength }}\n    \n      \n        @for (line of log; track $index) {\n          {{ line }}\n        }\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Initialize    Start Turn    Draw!    End Turn        Draw Pool: {{ drawPoolLength }}                  @for (line of log; track $index) {          {{ line }}        }            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DrawPoolGameComponent', 'selector': 'app-draw-pool-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DrawPoolGameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Element.html":{"url":"interfaces/Element.html","title":"interface - Element","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Element\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/game/model/element.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            kind\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        kind\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        kind:         ElementKind\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ElementKind\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ElementKind =\n  | 'grassElement'\n  | 'grubElement'\n  | 'meatElement'\n  | 'seedElement'\n  | 'sunElement'\n  | 'waterElement';\n\nexport interface Element {\n  kind: ElementKind;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ElementDrawPoolService.html":{"url":"injectables/ElementDrawPoolService.html","title":"injectable - ElementDrawPoolService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ElementDrawPoolService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/game/service/element-draw-pool.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                elementFactory\n                            \n                            \n                                    Private\n                                elementPile\n                            \n                            \n                                length$\n                            \n                            \n                                    Private\n                                lengthSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                initialize\n                            \n                            \n                                pull\n                            \n                            \n                                put\n                            \n                            \n                                    Private\n                                updateGameState\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    drawPool\n                                \n                                \n                                    length\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateSvc: GameStateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/service/element-draw-pool.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateSvc\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/service/element-draw-pool.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pull\n                        \n                    \n                \n            \n            \n                \npull(count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/service/element-draw-pool.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     []\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(elements: Element[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/service/element-draw-pool.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                elements\n                                            \n                                                            Element[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateGameState\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateGameState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/service/element-draw-pool.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elementFactory\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/game/service/element-draw-pool.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elementPile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Pile | undefined\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in src/app/game/service/element-draw-pool.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.lengthSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/game/service/element-draw-pool.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        lengthSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(0)\n                    \n                \n                    \n                        \n                                Defined in src/app/game/service/element-draw-pool.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        drawPool\n                    \n                \n\n                \n                    \n                        getdrawPool()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/service/element-draw-pool.service.ts:23\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/service/element-draw-pool.service.ts:47\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Pile } from '../../engine/model/pile.model';\nimport { Element, ElementKind } from '../model/element.model';\nimport { DrawPileKind } from '../dominant-species.constants';\nimport { GameStateService } from '../../engine/service/game-state.service';\nimport { BehaviorSubject, map, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ElementDrawPoolService {\n  private lengthSubject = new BehaviorSubject(0);\n  length$: Observable = this.lengthSubject.asObservable();\n  private elementPile: Pile | undefined = undefined;\n  constructor(private gameStateSvc: GameStateService) {\n    this.initialize();\n  }\n\n  private elementFactory = (elementKind: ElementKind): Element => {\n    return { kind: elementKind };\n  };\n\n  private get drawPool(): Pile {\n    if (!this.elementPile) {\n      throw new Error('Element pile has not been initialized.');\n    }\n    return this.elementPile;\n  }\n\n  private initialize() {\n    this.gameStateSvc.pile$\n      .pipe(\n        map((pileStates) =>\n          pileStates.find((pileState) => pileState.kind === (DrawPileKind.ELEMENT as string)),\n        ),\n      )\n      .subscribe((drawPileState) => {\n        if (drawPileState) {\n          this.elementPile = new Pile(drawPileState, this.elementFactory);\n          this.lengthSubject.next(this.elementPile.length);\n        } else {\n          throw new Error('GameState does not include a state element for the ElementDrawPool');\n        }\n      });\n  }\n\n  get length(): number {\n    return this.drawPool.length;\n  }\n\n  private updateGameState(): void {\n    if (this.elementPile) {\n      this.lengthSubject.next(this.elementPile.length);\n      this.gameStateSvc.setPile(this.elementPile.state);\n    } else {\n      throw new Error(\"elementPile doesn't have state!\");\n    }\n  }\n\n  pull(count = 1): (Element | null)[] {\n    this.gameStateSvc.requireTransaction();\n    const items = this.drawPool.pull(count);\n    this.updateGameState();\n    return items;\n  }\n\n  put(elements: Element[]): void {\n    this.gameStateSvc.requireTransaction();\n    this.drawPool.put(elements);\n    this.updateGameState();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameManagementService.html":{"url":"injectables/GameManagementService.html","title":"injectable - GameManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-management.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateService: GameStateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-management.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateService\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createGame\n                        \n                    \n                \n            \n            \n                \ncreateGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-management.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateService } from './game-state.service';\nimport { deepClone } from 'fast-json-patch';\nimport { baseGameState } from '../../game/dominant-species.constants';\nimport { GameState } from '../model/game-state.model';\nimport { Animal } from '../../game/model/animal.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameManagementService {\n  constructor(private gameStateService: GameStateService) {}\n\n  createGame(): void {\n    const gameState = deepClone(baseGameState) as GameState;\n    gameState.faction = [\n      {\n        owner: {\n          id: 'test1',\n          name: 'Tester1',\n        },\n        kind: 'birdAnimal',\n      } as Animal,\n      {\n        owner: {\n          id: 'test2',\n          name: 'Tester2',\n        },\n        kind: 'mammalAnimal',\n      } as Animal,\n    ];\n    this.gameStateService.initializeGameState(gameState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameState.html":{"url":"interfaces/GameState.html","title":"interface - GameState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining the GameState object managed by GameStateStoreService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            faction\n                                        \n                                \n                                \n                                        \n                                            pile\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        faction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        faction:         FactionState[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FactionState[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pile:         PileState[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PileState[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FactionState } from './faction.model';\nimport { PileState } from './pile.model';\n\n/**\n * Defining the GameState object managed by GameStateStoreService\n */\nexport interface GameState {\n  faction: FactionState[];\n  pile: PileState[];\n}\n\n/**\n * GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\n * An example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\n * This object defining the state would be of type GameStateElement.\n *\n * A type is used instead of an interface, and some of the state objects, such as pile, are a generic and require a\n * type var which is not supported by interface.\n */\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type GameStateElement = {\n  kind: string;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateClientService.html":{"url":"injectables/GameStateClientService.html","title":"injectable - GameStateClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendGspToBackend\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gsp$\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendGspToBackend\n                        \n                    \n                \n            \n            \n                \nsendGspToBackend(gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-client.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gsp$\n                    \n                \n\n                \n                    \n                        getgsp$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-client.service.ts:13\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { of, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateClientService {\n  sendGspToBackend(gsp: GameStatePatch): void {\n    console.log(JSON.stringify(gsp));\n  }\n\n  get gsp$(): Observable {\n    return of(undefined);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameStatePatch.html":{"url":"interfaces/GameStatePatch.html","title":"interface - GameStatePatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameStatePatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state-patch.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            patch\n                                        \n                                \n                                \n                                        \n                                            timeStamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        patch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        patch:     Operation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Operation[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeStamp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Operation } from 'fast-json-patch';\n\nexport interface GameStatePatch {\n  timeStamp: number;\n  patch: Operation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStatePatchService.html":{"url":"injectables/GameStatePatchService.html","title":"injectable - GameStatePatchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStatePatchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-patch.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Creates and applies GameStatePatches\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                apply\n                            \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        apply\n                        \n                    \n                \n            \n            \n                \napply(gameState: GameState, gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-patch.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gameState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GameState\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(oldState: GameState, newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-patch.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GameStatePatch\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameState } from '../model/game-state.model';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { applyPatch, compare } from 'fast-json-patch';\n\n/**\n * Creates and applies GameStatePatches\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStatePatchService {\n  create(oldState: GameState, newState: GameState): GameStatePatch {\n    return {\n      timeStamp: Date.now(),\n      patch: compare(oldState, newState),\n    };\n  }\n\n  apply(gameState: GameState, gsp: GameStatePatch): GameState {\n    return applyPatch(gameState, gsp.patch, undefined, false).newDocument;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateService.html":{"url":"injectables/GameStateService.html","title":"injectable - GameStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The GameStateService provides an interface for the rest of the system to interact with state.\nIt does this by orchestrating the various other GameState related services.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyGsp\n                            \n                            \n                                commitTransaction\n                            \n                            \n                                initializeGameState\n                            \n                            \n                                requireTransaction\n                            \n                            \n                                rollbackTransaction\n                            \n                            \n                                setFaction\n                            \n                            \n                                setPile\n                            \n                            \n                                startTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    faction$\n                                \n                                \n                                    pile$\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateStore: GameStateStoreService, gspService: GameStatePatchService, gameStateClient: GameStateClientService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-state.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateStore\n                                                  \n                                                        \n                                                                        GameStateStoreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gspService\n                                                  \n                                                        \n                                                                        GameStatePatchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gameStateClient\n                                                  \n                                                        \n                                                                        GameStateClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyGsp\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyGsp(gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \ncommitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializeGameState\n                        \n                    \n                \n            \n            \n                \ninitializeGameState(gameState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gameState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requireTransaction\n                        \n                    \n                \n            \n            \n                \nrequireTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Will throw error if there is not a transaction in progress. Call before state updates that require a transaction.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \nrollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFaction\n                        \n                    \n                \n            \n            \n                \nsetFaction(newState: FactionState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            FactionState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPile\n                        \n                    \n                \n            \n            \n                \nsetPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTransaction\n                        \n                    \n                \n            \n            \n                \nstartTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        faction$\n                    \n                \n\n                \n                    \n                        getfaction$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state.service.ts:74\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pile$\n                    \n                \n\n                \n                    \n                        getpile$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state.service.ts:82\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateStoreService } from './game-state-store.service';\nimport { GameStatePatchService } from './game-state-patch.service';\nimport { GameStateClientService } from './game-state-client.service';\nimport { filter, Observable } from 'rxjs';\nimport { FactionState } from '../model/faction.model';\nimport { PileState } from '../model/pile.model';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { GameState } from '../model/game-state.model';\n\n/**\n * The GameStateService provides an interface for the rest of the system to interact with state.\n * It does this by orchestrating the various other GameState related services.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateService {\n  constructor(\n    private gameStateStore: GameStateStoreService,\n    private gspService: GameStatePatchService,\n    private gameStateClient: GameStateClientService,\n  ) {\n    this.gameStateClient.gsp$.pipe(filter((gsp) => gsp != undefined)).subscribe((gsp) => {\n      this.applyGsp(gsp);\n    });\n  }\n\n  private applyGsp(gsp: GameStatePatch): void {\n    if (this.gameStateStore.gameState) {\n      const updatedState = this.gspService.apply(this.gameStateStore.gameState, gsp);\n      this.gameStateStore.setGameState(updatedState);\n    } else {\n      throw new Error(\"Can't apply a GSP to an uninitialized GameStateStore.\");\n    }\n  }\n\n  initializeGameState(gameState: GameState): void {\n    this.gameStateStore.initializeGameState(gameState);\n  }\n\n  startTransaction(): void {\n    this.gameStateStore.startTransaction();\n  }\n\n  commitTransaction(): void {\n    if (!this.gameStateStore.gameState) {\n      throw new Error('GameStateStore uninitialized');\n    } else if (!this.gameStateStore.transactionState) {\n      throw new Error('No transaction in progress to commit');\n    } else {\n      const gsp = this.gspService.create(\n        this.gameStateStore.gameState,\n        this.gameStateStore.transactionState,\n      );\n      this.gameStateStore.commitTransaction();\n      this.gameStateClient.sendGspToBackend(gsp);\n    }\n  }\n\n  rollbackTransaction(): void {\n    this.gameStateStore.rollbackTransaction();\n  }\n\n  /**\n   * Will throw error if there is not a transaction in progress. Call before state updates that require a transaction.\n   */\n  requireTransaction(): void {\n    if (!this.gameStateStore.transactionState) {\n      throw new Error('Transaction has not been started.');\n    }\n  }\n\n  get faction$(): Observable {\n    return this.gameStateStore.faction$;\n  }\n\n  setFaction(newState: FactionState): void {\n    this.gameStateStore.setFaction(newState);\n  }\n\n  get pile$(): Observable[]> {\n    return this.gameStateStore.pile$;\n  }\n\n  setPile(newState: PileState): void {\n    this.gameStateStore.setPile(newState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateStoreService.html":{"url":"injectables/GameStateStoreService.html","title":"injectable - GameStateStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-store.service.ts\n        \n\n\n            \n                Description\n            \n            \n                GameStateStoreService is responsible for maintain the GameState and making it accessible to others.\nA GameStateStoreService cannot be used until the initializeGameState method is called an initial GameState is passed in.\nThe GameState has several top level keys, and GameStateStoreService provides observables for each of those keys.\nSo if someone was interested in the faction key, then they could subscribe to the faction$ observable.\nA value will be emitted on each observable whenever the GameState is updated, regardless of if the particular key has been updated.\nThe GameState can be updated in one of two ways:\n1.) Via the setGameState method which will takes an entire GameState object and overwrites the previous GameState object. All observables\nwill then emit the values from the new GameState object. This method is typically used when the GameState is updated based on a received GSP.\n2.) Via a transaction, which is typically done via actions taken during a turn. In this case, the startTransaction method is called and\nthe state is updated via calling one or more set methods (such as setFaction) and then calling commitTransaction or rollbackTransaction.\nIn Either case, all observables will then emit the values from the new GameState object. This is to ensure that all local objects have the\ncurrent GameState.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _gameState\n                            \n                            \n                                    Private\n                                _transactionState\n                            \n                            \n                                    Private\n                                gameStateSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _setGameState\n                            \n                            \n                                commitTransaction\n                            \n                            \n                                    Private\n                                getObservableForKey\n                            \n                            \n                                initializeGameState\n                            \n                            \n                                rollbackTransaction\n                            \n                            \n                                setFaction\n                            \n                            \n                                setGameState\n                            \n                            \n                                setPile\n                            \n                            \n                                    Private\n                                setTransactionStateElement\n                            \n                            \n                                startTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gameState\n                                \n                                \n                                    transactionState\n                                \n                                \n                                    faction$\n                                \n                                \n                                    pile$\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-state-store.service.ts:33\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _setGameState\n                        \n                    \n                \n            \n            \n                \n                        \n                    _setGameState(newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \ncommitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getObservableForKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getObservableForKey(selector: (state: GameState) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:39\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializeGameState\n                        \n                    \n                \n            \n            \n                \ninitializeGameState(gameState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gameState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \nrollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFaction\n                        \n                    \n                \n            \n            \n                \nsetFaction(newState: FactionState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            FactionState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGameState\n                        \n                    \n                \n            \n            \n                \nsetGameState(newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPile\n                        \n                    \n                \n            \n            \n                \nsetPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setTransactionStateElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    setTransactionStateElement(key, newState: GameStateElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newState\n                                            \n                                                            GameStateElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTransaction\n                        \n                    \n                \n            \n            \n                \nstartTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _gameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _transactionState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        gameStateSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:33\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gameState\n                    \n                \n\n                \n                    \n                        getgameState()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:62\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        transactionState\n                    \n                \n\n                \n                    \n                        gettransactionState()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:70\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        faction$\n                    \n                \n\n                \n                    \n                        getfaction$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:128\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pile$\n                    \n                \n\n                \n                    \n                        getpile$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:136\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PileState } from '../model/pile.model';\nimport { BehaviorSubject, filter, map, Observable } from 'rxjs';\nimport { FactionState } from '../model/faction.model';\nimport { GameState, GameStateElement } from '../model/game-state.model';\nimport { Injectable } from '@angular/core';\nimport { deepClone } from 'fast-json-patch';\n\n/**\n * GameStateStoreService is responsible for maintain the GameState and making it accessible to others.\n *\n * A GameStateStoreService cannot be used until the initializeGameState method is called an initial GameState is passed in.\n *\n * The GameState has several top level keys, and GameStateStoreService provides observables for each of those keys.\n * So if someone was interested in the faction key, then they could subscribe to the faction$ observable.\n * A value will be emitted on each observable whenever the GameState is updated, regardless of if the particular key has been updated.\n *\n * The GameState can be updated in one of two ways:\n *\n * 1.) Via the setGameState method which will takes an entire GameState object and overwrites the previous GameState object. All observables\n * will then emit the values from the new GameState object. This method is typically used when the GameState is updated based on a received GSP.\n *\n * 2.) Via a transaction, which is typically done via actions taken during a turn. In this case, the startTransaction method is called and\n * the state is updated via calling one or more set methods (such as setFaction) and then calling commitTransaction or rollbackTransaction.\n * In Either case, all observables will then emit the values from the new GameState object. This is to ensure that all local objects have the\n * current GameState.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateStoreService {\n  private _gameState: GameState | null = null;\n  private _transactionState: GameState | null = null;\n  private gameStateSubject: BehaviorSubject;\n\n  constructor() {\n    this.gameStateSubject = new BehaviorSubject(this._gameState);\n  }\n\n  private getObservableForKey(selector: (state: GameState) => T): Observable {\n    return this.gameStateSubject.asObservable().pipe(\n      filter((gameState) => gameState != null),\n      map((gameState) => {\n        return selector(gameState);\n      }),\n    );\n  }\n\n  private setTransactionStateElement(key: keyof GameState, newState: GameStateElement): void {\n    if (!this._transactionState) {\n      throw new Error('Must start transaction before updating GameState.');\n    }\n    const subStateArray = this._transactionState[key] as (typeof newState)[];\n    const index = subStateArray.findIndex((item) => item.kind === newState.kind);\n\n    if (index > -1) {\n      subStateArray[index] = newState;\n    } else {\n      subStateArray.push(newState);\n    }\n  }\n\n  get gameState(): GameState | null {\n    if (this._gameState) {\n      return deepClone(this._gameState) as GameState;\n    } else {\n      return null;\n    }\n  }\n\n  get transactionState(): GameState | null {\n    if (this._transactionState) {\n      return deepClone(this._transactionState) as GameState;\n    } else {\n      return null;\n    }\n  }\n\n  private _setGameState(newState: GameState) {\n    this._gameState = newState;\n    this.gameStateSubject.next(this.gameState);\n  }\n\n  initializeGameState(gameState: GameState): void {\n    if (!this._gameState) {\n      this._setGameState(gameState);\n    } else {\n      throw new Error('GameState all ready initialized.');\n    }\n  }\n\n  setGameState(newState: GameState) {\n    if (!this._gameState) {\n      throw new Error('GameState must be initialized before it can be set.');\n    } else if (this._transactionState) {\n      throw new Error('GameState can not be set during a transaction.');\n    } else {\n      this._setGameState(newState);\n    }\n  }\n\n  startTransaction(): void {\n    if (!this._transactionState) {\n      this._transactionState = deepClone(this._gameState) as GameState;\n    } else {\n      throw new Error(\"Can't start transaction as one already in progress.\");\n    }\n  }\n\n  commitTransaction(): void {\n    if (this._transactionState) {\n      this._setGameState(this._transactionState);\n      this._transactionState = null;\n    } else {\n      throw new Error('No transaction in progress to commit');\n    }\n  }\n\n  rollbackTransaction(): void {\n    if (this._transactionState) {\n      this._transactionState = null;\n      // Ensures gameState is a new object so that subscribers can detect the update\n      this._setGameState(deepClone(this._gameState) as GameState);\n    } else {\n      throw new Error('No transaction in progress to rollback');\n    }\n  }\n\n  get faction$(): Observable {\n    return this.getObservableForKey((gameState) => gameState.faction);\n  }\n\n  setFaction(newState: FactionState): void {\n    this.setTransactionStateElement('faction', newState);\n  }\n\n  get pile$(): Observable[]> {\n    return this.getObservableForKey((gameState) => gameState.pile);\n  }\n\n  setPile(newState: PileState): void {\n    this.setTransactionStateElement('pile', newState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Piece.html":{"url":"interfaces/Piece.html","title":"interface - Piece","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Piece\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/piece.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            kind\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        kind\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        kind:     K\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     K\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Piece {\n  kind: K;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Pile.html":{"url":"classes/Pile.html","title":"class - Pile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Pile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/pile.model.ts\n        \n\n\n            \n                Description\n            \n            \n                A Pile is used to draw one or more random pieces for a defined pool of pieces.\nA Pile has two Type Vars needed to be set when it's instantiated:\nTpiece Kind A type var used to set the kinds of Pieces the Pipe can contain and\nTpiece A type var used to set the type of Piece the Pile creates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _state\n                            \n                            \n                                    Private\n                                    Readonly\n                                itemFactory\n                            \n                            \n                                    Readonly\n                                length$\n                            \n                            \n                                    Private\n                                lengthSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitLength\n                            \n                            \n                                pull\n                            \n                            \n                                put\n                            \n                            \n                                setState\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: PileState, itemFactory: ItemFactory)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/model/pile.model.ts:31\n                            \n                        \n\n                \n                    \n                            Each key is the kind of items included in the Pile, and the values are the count of that kind of item in\nthe pile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        PileState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An object that acts as the definition for the pool of pieces the Pile represents.\nEach key is the kind of items included in the Pile, and the values are the count of that kind of item in\nthe pile.\n\n                                                        \n                                                \n                                                \n                                                        itemFactory\n                                                  \n                                                        \n                                                                        ItemFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A factory function use to build the random selected piece.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PileState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        itemFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ItemFactory\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        length$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.lengthSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        lengthSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(0)\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:29\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emitLength\n                        \n                    \n                \n            \n            \n                \n                        \n                    emitLength()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pull\n                        \n                    \n                \n            \n            \n                \npull(count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:73\n                        \n                    \n\n\n            \n                \n                        will be returned for any piece drawn while the pile is empty.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                            \n                                                    The number of items to draw from the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     []\n\n                        \n                            \n                                An array where each member represents the piece that was drawn. A null\nwill be returned for any piece drawn while the pile is empty.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(items: Tpiece[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                        Tpiece[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An array of items to add to the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setState\n                        \n                    \n                \n            \n            \n                \nsetState(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:48\n                                \n                            \n                    \n                        \n                                Returns the total number of items in the pile.\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Piece } from './piece.model';\nimport { GameStateElement } from './game-state.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\ntype ItemFactory> = (\n  itemKind: TpieceKind,\n) => Tpiece;\n\n/**\n * PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n */\nexport type PileState = GameStateElement & {\n  inventory: {\n    [K in TpieceKind]?: number;\n  };\n};\n\n/**\n * A Pile is used to draw one or more random pieces for a defined pool of pieces.\n * A Pile has two Type Vars needed to be set when it's instantiated:\n *\n * **Tpiece** Kind A type var used to set the kinds of Pieces the Pipe can contain and\n *\n * **Tpiece** A type var used to set the type of Piece the Pile creates\n *\n */\nexport class Pile> {\n  private readonly itemFactory: ItemFactory;\n  private lengthSubject = new BehaviorSubject(0);\n  private _state: PileState;\n  readonly length$: Observable = this.lengthSubject.asObservable();\n\n  /**\n   * @param state An object that acts as the definition for the pool of pieces the Pile represents.\n   * Each key is the kind of items included in the Pile, and the values are the count of that kind of item in\n   * the pile.\n   * @param itemFactory A factory function use to build the random selected piece.\n   */\n  constructor(state: PileState, itemFactory: ItemFactory) {\n    this._state = state;\n    this.itemFactory = itemFactory;\n    this.emitLength();\n  }\n\n  /**\n   * Returns the total number of items in the pile.\n   */\n  get length(): number {\n    return Object.keys(this._state.inventory).reduce(\n      (sum, key) => sum + (this._state.inventory[key as TpieceKind] ?? 0),\n      0,\n    );\n  }\n\n  private emitLength() {\n    this.lengthSubject.next(this.length);\n  }\n\n  get state(): PileState {\n    return this._state;\n  }\n\n  setState(newState: PileState) {\n    this._state = newState;\n    this.emitLength();\n  }\n\n  /**\n   * @param count The number of items to draw from the pile.\n   * @returns An array where each member represents the piece that was drawn. A `null`\n   * will be returned for any piece drawn while the pile is empty.\n   */\n  pull(count = 1): (Tpiece | null)[] {\n    const items: (Tpiece | null)[] = [];\n    for (let i = 0; i  {\n        /** this.itemCounts.get(key) will always return a value, but TSC complains it could be unknown. */\n        const itemCount = this._state.inventory[key as TpieceKind] ?? 0;\n        return itemCount > 0;\n      }) as TpieceKind[];\n\n      if (itemsWithCount.length) {\n        const itemKind = itemsWithCount[Math.floor(Math.random() * itemsWithCount.length)];\n        const currentCount = this._state.inventory[itemKind] ?? 0;\n        items.push(this.itemFactory(itemKind));\n        this._state.inventory[itemKind] = currentCount - 1;\n      } else {\n        items.push(null);\n      }\n    }\n    this.emitLength();\n    return items;\n  }\n\n  /**\n   * @param items An array of items to add to the pile.\n   */\n  put(items: Tpiece[]): void {\n    for (const item of items) {\n      const currentItemCount = this._state.inventory[item.kind];\n      if (currentItemCount !== undefined) {\n        this._state.inventory[item.kind] = currentItemCount + 1;\n      } else {\n        this._state.inventory[item.kind] = 1;\n      }\n    }\n    this.emitLength();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Player.html":{"url":"interfaces/Player.html","title":"interface - Player","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Player\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/player.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Player {\n  id: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state-patch.model.ts\n            \n            interface\n            GameStatePatch\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state.model.ts\n            \n            interface\n            GameState\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/engine/model/piece.model.ts\n            \n            interface\n            Piece\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/pile.model.ts\n            \n            class\n            Pile\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/app/engine/model/player.model.ts\n            \n            interface\n            Player\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-management.service.ts\n            \n            injectable\n            GameManagementService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-client.service.ts\n            \n            injectable\n            GameStateClientService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-patch.service.ts\n            \n            injectable\n            GameStatePatchService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-store.service.ts\n            \n            injectable\n            GameStateStoreService\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state.service.ts\n            \n            injectable\n            GameStateService\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                src/app/game/component/draw-pool-game/draw-pool-game.component.ts\n            \n            component\n            DrawPoolGameComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/game/dominant-species.constants.ts\n            \n            variable\n            baseGameState\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/game/model/animal.model.ts\n            \n            class\n            Animal\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/app/game/model/animal.model.ts\n            \n            variable\n            inherentElementKindByAnimalKind\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/game/model/element.model.ts\n            \n            interface\n            Element\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/game/service/element-draw-pool.service.ts\n            \n            injectable\n            ElementDrawPoolService\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.2.0\n        \n            @angular/cdk : ^18.2.7\n        \n            @angular/common : ^18.2.0\n        \n            @angular/compiler : ^18.2.0\n        \n            @angular/core : ^18.2.0\n        \n            @angular/forms : ^18.2.0\n        \n            @angular/material : ^18.2.7\n        \n            @angular/platform-browser : ^18.2.0\n        \n            @angular/platform-browser-dynamic : ^18.2.0\n        \n            @angular/router : ^18.2.0\n        \n            fast-json-patch : ^3.1.1\n        \n            lodash : ^4.17.21\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.10\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DrawPileKind   (src/.../dominant-species.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/game/dominant-species.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        DrawPileKind\n                    \n                \n                        \n                            \n                                 ELEMENT\n                            \n                        \n                        \n                            \n                                Value : element\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDominantSpecies\nThis project was generated with Angular CLI version 18.2.5.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 Joe K.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnimalKind   (src/.../animal.model.ts)\n                        \n                        \n                            AnimalState   (src/.../animal.model.ts)\n                        \n                        \n                            ElementKind   (src/.../element.model.ts)\n                        \n                        \n                            FactionState   (src/.../faction.model.ts)\n                        \n                        \n                            GameStateElement   (src/.../game-state.model.ts)\n                        \n                        \n                            ItemFactory   (src/.../pile.model.ts)\n                        \n                        \n                            PileState   (src/.../pile.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/game/model/animal.model.ts\n    \n    \n        \n            \n                \n                    \n                    AnimalKind\n                \n            \n            \n                \n                            \"amphibianAnimal\" | \"arachnidAnimal\" | \"birdAnimal\" | \"insectAnimal\" | \"mammalAnimal\" | \"reptileAnimal\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AnimalState\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/game/model/element.model.ts\n    \n    \n        \n            \n                \n                    \n                    ElementKind\n                \n            \n            \n                \n                            \"grassElement\" | \"grubElement\" | \"meatElement\" | \"seedElement\" | \"sunElement\" | \"waterElement\"\n\n                \n            \n        \n    \n    src/app/engine/model/faction.model.ts\n    \n    \n        \n            \n                \n                    \n                    FactionState\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/engine/model/game-state.model.ts\n    \n    \n        \n            \n                \n                    \n                    GameStateElement\n                \n            \n            \n                \n                    GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\nAn example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\nThis object defining the state would be of type GameStateElement.\nA type is used instead of an interface, and some of the state objects, such as pile, are a generic and require a\ntype var which is not supported by interface.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/engine/model/pile.model.ts\n    \n    \n        \n            \n                \n                    \n                    ItemFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PileState\n                \n            \n            \n                \n                    PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            baseGameState   (src/.../dominant-species.constants.ts)\n                        \n                        \n                            inherentElementKindByAnimalKind   (src/.../animal.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideAnimationsAsync('noop'),\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/app/game/dominant-species.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        baseGameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState\n\n                    \n                \n                \n                    \n                        Default value : {\n  faction: [],\n  pile: [\n    {\n      kind: DrawPileKind.ELEMENT,\n      inventory: {\n        // 20 Elements each, with 2 being places on Earth, leaving 18 in the bag\n        grassElement: 18,\n        grubElement: 18,\n        meatElement: 18,\n        seedElement: 18,\n        sunElement: 18,\n        waterElement: 18,\n      },\n    },\n  ],\n}\n                    \n                \n\n            \n                \n                    GameState defining the static elements of the DS game\n\n                \n            \n\n        \n    \n\n    src/app/game/model/animal.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        inherentElementKindByAnimalKind\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map([\n  ['amphibianAnimal', 'waterElement'],\n  ['arachnidAnimal', 'grubElement'],\n  ['birdAnimal', 'seedElement'],\n  ['insectAnimal', 'grassElement'],\n  ['mammalAnimal', 'meatElement'],\n  ['reptileAnimal', 'sunElement'],\n] as const)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
