var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Animal.html",[0,0.695,1,1.609]],["body/classes/Animal.html",[0,0.494,1,2.927,2,1.606,3,0.361,4,0.322,5,0.322,6,1.418,7,1.535,8,2.397,9,3.343,10,2.512,11,4.436,12,3.343,13,3.343,14,4.978,15,4.017,16,0.183,17,0.667,18,4,19,1.265,20,1.171,21,3.343,22,3.343,23,1.707,24,1.651,25,1.315,26,2.869,27,0.943,28,2.397,29,4.129,30,1.55,31,3.343,32,1.28,33,0.036,34,0.478,35,1.28,36,3.343,37,2.118,38,2.239,39,3.343,40,1.867,41,3.172,42,3.343,43,3.343,44,3.343,45,3.318,46,2.117,47,1.455,48,1.402,49,2.239,50,2.239,51,2.239,52,2.239,53,2.239,54,2.239,55,4.436,56,2.773,57,3.343,58,3.343,59,1.858,60,2.239,61,2.239,62,2.239,63,2.773,64,0.891,65,2.239,66,2.239,67,0.798,68,2.239,69,1.407,70,2.239,71,1.858,72,0.716,73,3.318,74,2.397,75,2.397,76,2.117,77,2.397,78,2.117,79,2.397,80,1.402,81,1.606,82,1.268,83,1.858,84,1.858,85,1.858,86,1.858,87,1.858,88,1.858,89,2.239,90,2.239,91,2.239,92,2.239,93,1.554,94,2.239,95,2.239,96,2.239,97,2.239,98,1.858,99,2.239,100,2.239,101,2.239,102,2.239,103,2.239,104,2.239,105,2.239,106,1.418,107,1.858,108,1.893,109,2.397,110,1.606,111,2.239,112,2.239,113,3.343,114,2.239,115,1.707,116,2.239,117,2.239,118,0.019,119,0.019]],["title/components/AppComponent.html",[120,1.609,121,1.996]],["body/components/AppComponent.html",[0,0.78,3,0.571,4,0.509,5,0.509,16,0.288,17,0.919,25,1.117,30,1.034,33,0.035,34,0.34,41,2.607,64,0.943,67,1.021,72,0.571,118,0.026,119,0.026,120,2.613,121,3.433,122,3.301,123,2.934,124,2.934,125,2.934,126,2.934,127,2.934,128,3.887,129,4.496,130,1.938,131,3.818,132,3.301,133,3.818,134,5.118,135,3.433,136,3.818,137,4.603,138,3.818,139,4.603,140,5.118,141,1.637,142,1.358,143,3.818,144,4.603,145,3.537,146,1.239,147,2.934,148,3.537,149,2.898,150,2.536,151,3.537,152,2.934,153,3.818,154,2.934,155,3.433,156,2.934,157,2.934,158,1.806,159,1.358,160,2.934,161,2.934]],["title/components/DrawPoolGameComponent.html",[120,1.609,135,1.996]],["body/components/DrawPoolGameComponent.html",[0,0.488,3,0.357,4,0.318,5,0.318,16,0.324,17,0.662,20,1.162,25,0.964,27,1.396,30,1.502,32,0.709,33,0.036,34,0.382,35,0.709,41,2.675,47,1.289,48,1.852,64,0.884,67,0.989,72,0.357,80,0.776,118,0.019,119,0.019,120,2.028,121,1.402,122,2.377,123,1.837,124,1.837,125,1.837,127,1.837,128,3.164,129,3.659,131,2.75,132,2.377,133,2.75,135,2.794,136,2.75,138,2.75,141,1.534,142,1.272,146,0.776,149,3.459,150,3.79,152,1.837,153,2.75,154,1.837,155,2.794,156,1.837,157,1.837,158,2.995,159,1.693,160,1.837,161,1.837,162,4.384,163,1.837,164,3.973,165,3.973,166,3.315,167,3.315,168,4.724,169,4.724,170,3.659,171,4.411,172,4.411,173,2.214,174,2.794,175,2.849,176,2.041,177,3.973,178,2.794,179,3.315,180,3.315,181,2.214,182,2.214,183,2.214,184,2.214,185,1.131,186,2.099,187,2.214,188,2.75,189,2.214,190,2.214,191,2.214,192,1.402,193,2.214,194,2.214,195,1.839,196,2.214,197,2.214,198,1.254,199,2.214,200,2.214,201,2.214,202,4.112,203,2.214,204,2.214,205,2.214,206,2.214,207,2.214,208,2.214,209,2.214,210,2.214,211,2.214,212,2.214,213,1.402,214,2.214,215,2.214,216,2.377,217,2.75,218,2.75,219,4.411,220,3.315]],["title/injectables/ElementDrawPoolService.html",[178,1.996,221,0.695]],["body/injectables/ElementDrawPoolService.html",[0,0.518,3,0.379,4,0.338,5,0.338,15,1.685,16,0.191,17,0.691,19,0.923,20,1.214,23,1.768,25,0.998,27,0.989,30,1.631,32,1.317,33,0.036,34,0.465,35,1.317,37,1.859,40,2.133,41,1.33,47,1.327,48,1.697,64,0.626,67,1.011,71,1.948,72,0.379,80,0.823,82,1.33,93,1.442,108,2.33,115,1.768,118,0.019,119,0.019,130,0.989,141,2.101,142,1.743,143,1.948,146,0.823,158,2.89,175,2.484,176,2.101,178,2.193,185,2.1,188,1.948,192,1.488,195,2.678,198,2.869,216,3.256,221,0.763,222,0.989,223,4.696,224,1.948,225,4.114,226,3.413,227,2.484,228,2.484,229,3.766,230,4.114,231,1.948,232,3.463,233,2.349,234,2.484,235,2.349,236,1.488,237,3.463,238,2.349,239,2.349,240,1.55,241,3.766,242,2.33,243,3.463,244,2.349,245,3.463,246,2.349,247,2.349,248,2.349,249,1.948,250,2.349,251,2.349,252,1.948,253,1.948,254,1.685,255,1.199,256,1.961,257,1.087,258,1.685,259,1.948,260,4.541,261,2.349,262,1.948,263,2.349,264,1.685,265,2.349,266,2.349,267,2.349,268,1.948,269,2.349,270,2.349,271,2.349,272,3.463,273,1.948,274,2.349,275,2.349,276,2.349,277,2.349,278,2.349,279,2.349,280,1.33,281,2.873,282,3.463,283,2.349,284,2.873,285,2.349]],["title/interfaces/FactionState.html",[69,1.327,286,0.567]],["body/interfaces/FactionState.html",[3,0.705,4,0.628,5,0.628,10,3.311,16,0.356,17,1.049,26,4.194,33,0.035,34,0.42,67,1.049,69,2.212,72,0.705,118,0.029,119,0.029,159,1.677,286,0.786,287,1.839,288,3.624,289,3.769,290,2.372,291,4.369,292,2.022]],["title/injectables/GameManagementService.html",[174,1.996,221,0.695]],["body/injectables/GameManagementService.html",[0,0.77,1,2.597,3,0.564,4,0.502,5,0.502,16,0.285,20,1.6,24,1.461,25,1.234,26,3.274,27,1.47,30,1.334,32,1.118,33,0.036,34,0.335,35,1.118,47,1.021,48,1.6,67,1.146,72,0.564,76,2.212,78,2.212,80,1.224,118,0.026,119,0.026,130,1.47,146,1.224,159,1.341,170,4.474,174,2.891,176,2.657,192,2.212,221,1.006,222,1.47,253,2.897,257,1.616,258,2.505,292,1.616,293,2.597,294,2.897,295,3.492,296,3.492,297,3.492,298,2.212,299,1.616,300,1.616,301,1.616,302,2.505,303,3.492,304,1.952,305,1.978,306,3.492,307,3.492,308,2.897,309,3.787,310,3.492,311,3.492,312,3.492,313,3.492,314,3.492]],["title/interfaces/GameState.html",[286,0.567,304,1.21]],["body/interfaces/GameState.html",[1,1.892,3,0.598,4,0.533,5,0.533,7,1.423,16,0.302,17,0.947,19,1.395,24,1.186,33,0.036,34,0.53,64,0.988,67,0.947,69,2.323,72,0.766,118,0.027,119,0.027,240,1.766,286,0.854,287,1.56,290,2.203,304,2.118,315,2.347,316,2.658,317,3.753,318,3.124,319,3.935,320,2.422,321,3.304,322,2.323,323,3.074,324,3.074,325,3.935,326,3.074,327,3.005,328,3.074,329,2.658,330,3.074,331,2.658,332,3.074,333,1.715,334,3.074,335,3.074]],["title/injectables/GameStateClientService.html",[221,0.695,336,1.996]],["body/injectables/GameStateClientService.html",[0,0.861,3,0.63,4,0.561,5,0.561,16,0.318,19,1.499,20,1.718,23,2.503,25,0.947,30,1.433,32,1.249,33,0.036,34,0.375,35,1.249,47,1.141,48,1.718,67,1.07,72,0.63,93,1.368,118,0.028,119,0.028,130,1.643,146,1.368,221,1.081,222,1.643,242,2.777,255,1.993,257,1.806,293,2.737,305,2.211,336,3.105,337,3.238,338,4.903,339,3.561,340,4.903,341,2.871,342,3.904,343,3.904,344,3.904,345,2.8,346,3.904,347,3.904]],["title/interfaces/GameStateElement.html",[286,0.567,290,1.327]],["body/interfaces/GameStateElement.html",[1,2.366,3,0.577,4,0.514,5,0.514,7,1.372,16,0.291,17,0.925,19,1.54,24,1.742,33,0.035,34,0.541,64,1.371,67,0.925,69,1.951,72,0.748,118,0.026,119,0.026,240,1.144,286,0.834,287,1.504,290,2.432,304,1.779,315,2.263,316,2.562,317,3.688,318,3.193,319,2.964,320,1.824,321,3.193,322,1.951,323,2.964,324,2.964,325,4.514,326,3.844,327,3.446,328,3.844,329,3.323,330,3.844,331,3.323,332,3.844,333,2.144,334,3.844,335,3.844]],["title/interfaces/GameStatePatch.html",[286,0.567,341,1.609]],["body/interfaces/GameStatePatch.html",[3,0.699,4,0.622,5,0.622,16,0.353,17,1.043,19,1.154,33,0.035,34,0.502,67,0.864,72,0.699,118,0.029,119,0.029,185,2.866,286,0.779,287,1.822,299,2.003,300,2.003,301,2.761,315,2.741,341,2.668,348,3.591,349,4.835,350,5.829]],["title/injectables/GameStatePatchService.html",[221,0.695,351,1.996]],["body/injectables/GameStatePatchService.html",[0,0.753,3,0.551,4,0.491,5,0.491,7,1.311,16,0.278,19,1.425,20,1.577,25,1.092,30,1.315,32,1.44,33,0.036,34,0.432,35,1.44,47,1.315,67,1.067,72,0.551,93,1.577,118,0.025,119,0.025,130,1.438,146,1.197,221,0.992,222,1.438,241,2.833,257,1.58,292,1.58,293,2.569,299,1.58,300,1.58,301,2.082,304,2.361,305,2.548,339,3.186,341,2.913,345,2.449,349,2.833,351,2.849,352,2.833,353,3.227,354,4.499,355,4.499,356,3.732,357,4.499,358,4.499,359,3.415,360,4.499,361,3.028,362,3.415,363,3.415,364,3.415,365,3.415,366,3.415,367,3.415,368,3.415,369,3.415,370,3.415]],["title/injectables/GameStateService.html",[176,1.459,221,0.695]],["body/injectables/GameStateService.html",[0,0.454,3,0.332,4,0.296,5,0.296,7,0.791,16,0.168,19,1.378,20,1.1,23,1.603,25,1.111,27,1.322,30,1.605,32,1.465,33,0.036,34,0.44,35,1.465,40,1.79,47,1.511,48,2.031,67,1.057,69,1.79,72,0.332,80,1.1,93,1.1,108,2.731,109,2.251,118,0.018,119,0.018,130,0.867,146,0.722,159,1.46,176,1.968,195,2.232,221,0.692,222,0.867,240,1.217,242,2.154,255,1.052,257,0.953,286,0.565,292,0.953,293,2.844,304,1.925,305,1.778,320,2.171,321,2.154,322,1.79,329,2.251,331,2.727,336,2.693,339,2.899,341,2.171,345,1.478,351,2.693,356,1.709,361,1.778,371,1.709,372,2.251,373,3.139,374,3.139,375,3.139,376,3.139,377,3.139,378,3.139,379,3.139,380,3.528,381,2.604,382,4.253,383,3.528,384,2.604,385,2.604,386,3.528,387,2.06,388,3.803,389,3.803,390,2.06,391,3.139,392,2.06,393,2.06,394,2.604,395,2.06,396,2.06,397,3.797,398,3.155,399,3.139,400,2.604,401,2.604,402,3.139,403,2.06,404,2.604,405,2.06,406,2.604,407,2.06,408,2.06,409,1.709,410,2.06,411,1.478,412,2.06,413,2.06,414,2.06,415,2.06,416,1.709,417,1.709,418,1.478,419,2.06,420,2.06,421,2.06,422,3.803,423,2.06,424,2.06,425,2.06,426,1.709,427,3.139,428,2.06,429,2.06,430,2.06,431,3.803,432,1.709,433,1.709,434,2.06,435,2.06,436,2.06,437,2.06,438,2.06,439,1.478,440,2.06,441,2.06,442,2.06,443,2.06]],["title/injectables/GameStateStoreService.html",[221,0.695,320,1.609]],["body/injectables/GameStateStoreService.html",[0,0.276,3,0.202,4,0.18,5,0.18,7,0.48,16,0.222,17,0.419,19,1.481,20,1.117,23,1.073,25,0.993,27,1.144,30,1.557,32,1.375,33,0.036,34,0.456,35,1.31,40,2.088,47,1.349,48,1.846,63,1.743,67,0.768,69,1.342,72,0.202,80,0.736,82,0.708,93,1.506,108,2.318,110,0.896,115,1.388,118,0.012,119,0.012,128,0.896,130,0.526,141,0.972,142,1.223,146,0.438,195,2.465,202,1.743,217,1.743,221,0.463,222,0.526,240,0.87,242,2.531,254,1.95,255,0.638,257,0.578,262,1.743,273,2.255,280,2.905,290,1.342,292,0.578,293,2.747,298,0.792,299,0.578,300,0.578,301,0.578,304,2.338,305,0.708,308,1.037,318,2.531,320,2.193,321,2.318,322,1.342,327,1.331,333,1.475,339,1.331,361,2.752,372,1.507,380,3.193,381,2.643,383,3.193,384,2.643,385,1.743,386,3.193,394,1.743,397,3.395,398,2.255,400,1.743,404,1.743,406,1.743,409,1.037,411,0.896,416,1.037,417,1.037,418,0.896,426,1.037,432,1.743,433,1.037,444,1.037,445,2.101,446,2.101,447,2.101,448,2.101,449,2.101,450,2.018,451,2.101,452,4.296,453,3.187,454,2.101,455,2.101,456,2.101,457,2.101,458,2.101,459,3.187,460,3.193,461,1.743,462,2.101,463,1.743,464,2.25,465,1.743,466,2.101,467,2.101,468,4.618,469,2.101,470,1.743,471,2.549,472,1.331,473,2.101,474,3.564,475,3.187,476,2.101,477,2.101,478,2.101,479,2.101,480,2.643,481,2.018,482,3.187,483,2.101,484,1.507,485,2.101,486,2.101,487,2.101,488,2.719,489,3.187,490,3.187,491,1.331,492,2.018,493,1.743,494,2.101,495,2.101,496,1.331,497,2.719,498,2.719,499,2.719,500,2.101,501,2.101,502,2.101,503,2.719,504,2.101,505,2.101,506,1.25,507,1.25,508,2.101,509,1.25,510,2.101,511,0.638,512,1.25,513,1.25,514,1.25,515,2.101,516,1.25,517,1.25,518,2.101,519,1.25,520,1.25,521,1.25,522,1.25,523,1.25,524,1.25,525,1.25,526,1.25,527,1.25,528,1.25,529,1.25,530,1.25,531,1.25,532,1.25,533,1.25,534,1.25,535,1.25,536,4.469,537,1.25,538,1.25,539,1.25,540,1.25,541,1.25,542,1.25,543,1.25,544,1.25,545,1.25,546,1.25,547,3.187,548,2.101,549,1.25,550,1.25,551,1.25,552,1.25,553,1.25,554,1.25,555,1.25,556,1.037,557,1.25,558,1.25,559,1.25,560,1.25,561,2.101,562,1.25,563,1.25,564,1.25]],["title/interfaces/Piece.html",[37,1.21,286,0.567]],["body/interfaces/Piece.html",[3,0.694,4,0.619,5,0.619,16,0.351,17,1.039,24,1.96,33,0.035,34,0.5,37,2.233,64,1.588,72,0.903,93,1.508,118,0.029,119,0.029,286,0.774,287,1.811,511,2.196,565,2.724,566,2.724,567,3.568]],["title/classes/Pile.html",[0,0.695,240,1.009]],["body/classes/Pile.html",[0,0.376,2,1.222,3,0.275,4,0.245,5,0.245,7,1.474,8,2.753,16,0.139,17,0.541,19,1.189,20,0.949,23,1.383,24,1.703,25,0.932,27,0.718,28,1.943,30,1.528,32,1.229,33,0.036,34,0.525,35,1.229,37,2.213,46,1.715,47,1.366,48,1.181,59,1.414,64,0.454,67,0.673,72,0.437,80,1.563,93,1.563,106,2.431,115,1.96,118,0.015,119,0.015,141,0.789,142,1.04,149,2.174,155,2.431,158,1.96,159,0.654,185,2.477,186,3.073,195,2.064,198,1.909,213,2.134,227,1.943,228,1.943,234,1.943,236,2.824,240,1.9,249,1.414,256,1.534,264,1.943,280,2.174,286,0.307,289,1.222,290,1.14,292,0.789,298,1.079,299,0.789,300,0.789,301,0.789,318,1.534,322,2.24,333,1.939,353,1.943,361,1.534,450,2.824,464,2.431,471,1.943,472,1.715,481,2.134,491,1.715,492,2.824,496,1.079,511,1.383,566,3.464,568,1.222,569,3.185,570,4.203,571,2.247,572,2.247,573,2.247,574,2.247,575,3.185,576,2.796,577,2.247,578,2.796,579,2.796,580,2.709,581,2.709,582,2.417,583,2.247,584,2.247,585,2.247,586,1.534,587,1.943,588,2.247,589,1.705,590,1.705,591,2.796,592,3.475,593,2.753,594,2.247,595,2.247,596,1.705,597,2.247,598,1.705,599,1.705,600,2.247,601,1.705,602,1.705,603,1.705,604,1.414,605,1.414,606,1.414,607,1.414,608,1.414,609,1.414,610,1.943,611,1.414,612,2.247,613,1.414,614,1.414,615,2.247,616,2.247,617,1.414,618,1.414,619,1.414,620,1.414,621,1.414,622,1.414,623,1.414,624,2.247,625,2.247,626,1.414,627,2.247,628,2.247,629,1.414,630,1.414,631,1.414,632,2.247,633,2.247]],["title/injectables/PileService.html",[221,0.695,634,2.261]],["body/injectables/PileService.html",[0,0.288,3,0.211,4,0.188,5,0.188,7,1.512,16,0.107,17,0.435,19,1.363,20,0.765,24,1.826,25,0.956,27,0.55,30,1.495,32,1.261,33,0.036,34,0.463,35,1.261,37,1.399,40,2.215,47,1.409,48,1.645,64,1.212,67,0.727,72,0.211,80,1.535,82,2.896,93,0.765,106,2.773,107,2.329,108,2.23,109,2.014,110,1.565,115,1.674,118,0.012,119,0.012,130,0.55,141,1.934,142,1.746,146,0.458,159,1.604,175,2.014,176,1.517,185,2.011,192,0.828,195,2.665,198,2.366,213,1.382,216,2.351,221,0.481,222,0.55,226,3.023,227,2.824,228,2.824,229,2.72,231,1.085,236,2.076,240,1.989,242,2.366,254,0.938,255,0.667,257,0.605,258,0.938,259,1.085,280,1.59,281,1.81,284,2.329,333,1.517,372,1.565,401,1.81,411,1.565,418,0.938,460,1.81,461,1.81,463,1.81,464,1.382,465,1.81,480,1.81,481,1.382,492,2.494,493,1.81,496,2.076,556,1.81,570,3.932,586,1.236,593,1.565,634,2.351,635,1.085,636,3.645,637,2.808,638,2.808,639,2.808,640,2.808,641,2.808,642,2.182,643,3.279,644,2.182,645,2.182,646,3.279,647,3.279,648,3.938,649,2.182,650,1.307,651,2.182,652,3.938,653,2.182,654,1.307,655,2.182,656,4.548,657,2.182,658,2.182,659,1.307,660,2.182,661,3.279,662,2.182,663,1.307,664,2.182,665,2.182,666,2.182,667,2.182,668,1.307,669,2.182,670,2.182,671,1.307,672,2.182,673,1.307,674,4.93,675,2.182,676,3.279,677,2.182,678,1.81,679,2.182,680,1.307,681,1.307,682,1.307,683,2.182,684,1.307,685,1.81,686,2.182,687,2.182,688,2.182,689,2.182,690,2.182,691,1.307,692,1.307,693,1.085,694,1.307,695,1.307,696,1.307,697,1.307,698,2.182,699,1.085,700,1.307,701,1.307,702,1.307,703,1.307,704,1.307,705,2.182,706,1.307,707,1.307,708,1.307,709,2.182,710,1.307,711,1.307,712,1.307,713,1.307,714,1.307,715,1.307,716,1.307,717,2.182,718,1.307,719,1.307]],["title/interfaces/PileState.html",[286,0.567,322,1.327]],["body/interfaces/PileState.html",[0,0.495,3,0.363,4,0.323,5,0.323,7,0.862,8,2.403,16,0.183,17,0.669,19,1.068,24,1.521,28,1.611,30,0.657,33,0.036,34,0.456,37,2.152,46,1.423,47,0.979,48,0.787,64,0.599,67,0.8,72,0.541,80,1.747,93,1.747,106,2.814,115,2.046,118,0.019,119,0.019,142,0.862,149,1.898,155,2.122,158,1.711,159,0.862,185,2.046,186,3.361,195,1.551,198,1.272,213,1.423,234,1.611,236,2.538,240,1.836,256,1.898,264,1.611,280,2.269,286,0.404,287,0.946,289,2.403,290,1.687,292,1.04,298,1.423,299,1.04,300,1.04,301,1.04,318,1.272,322,2.284,333,1.551,353,1.611,361,1.272,450,2.538,464,2.122,471,1.611,472,1.423,481,1.423,491,1.423,492,2.538,496,1.423,511,1.147,566,3.27,568,1.611,569,2.78,570,4.153,571,1.863,572,1.863,573,1.863,574,1.863,575,2.78,576,3.324,577,1.863,578,1.863,579,1.863,582,1.611,583,1.863,584,1.863,585,1.863,586,1.272,587,1.611,588,1.863,591,1.863,592,2.78,593,2.403,594,1.863,595,1.863,597,1.863,600,1.863,604,1.863,605,2.78,606,2.78,607,2.78,608,2.78,609,2.78,610,3.408,611,3.324,612,2.78,613,1.863,614,1.863,615,2.78,616,2.78,617,1.863,618,1.863,619,1.863,620,1.863,621,1.863,622,1.863,623,1.863,624,2.78,625,2.78,626,1.863,627,2.78,628,2.78,629,1.863,630,1.863,631,1.863,632,2.78,633,2.78]],["title/interfaces/Player.html",[10,1.785,286,0.567]],["body/interfaces/Player.html",[3,0.719,4,0.64,5,0.64,10,3.01,16,0.363,17,1.061,25,1.428,33,0.034,34,0.51,64,1.627,72,0.719,118,0.03,119,0.03,286,0.801,287,1.875,309,4.881,720,3.694]],["title/coverage.html",[721,3.537]],["body/coverage.html",[0,0.933,1,1.591,5,0.448,6,2.68,10,1.765,19,1.374,33,0.035,34,0.299,37,1.196,40,1.312,45,2.585,69,1.312,81,2.235,118,0.024,119,0.024,120,2.161,121,1.974,126,2.585,135,1.974,149,2.397,150,2.235,158,1.591,162,2.585,163,2.585,174,1.974,176,1.442,178,1.974,186,3.819,221,1.253,223,2.585,224,2.585,240,0.998,256,1.765,286,1.023,288,2.585,290,1.312,293,2.751,294,2.585,302,2.235,304,1.196,315,3.043,316,3.035,320,1.591,322,1.312,336,1.974,337,2.585,341,1.591,348,2.585,351,1.974,352,2.585,371,2.585,444,2.585,511,2.161,565,2.68,568,3.035,634,2.235,635,2.585,720,2.585,721,2.585,722,2.585,723,3.117,724,3.117,725,5.155,726,2.585,727,4.805,728,2.585,729,4.805,730,4.805,731,4.232,732,4.232,733,4.232,734,4.232,735,3.117,736,3.117,737,3.117,738,2.585,739,3.117,740,3.117,741,3.117,742,2.585,743,2.585,744,4.232,745,4.232,746,3.117,747,2.235,748,2.235,749,3.117,750,3.117,751,3.117,752,3.117,753,3.117]],["title/dependencies.html",[754,1.901,755,3.136]],["body/dependencies.html",[33,0.036,118,0.029,119,0.029,146,1.471,147,3.482,255,2.143,299,1.943,300,1.943,301,1.943,755,3.482,756,4.198,757,6.152,758,4.198,759,5.129,760,4.198,761,4.198,762,4.198,763,4.198,764,5.129,765,5.129,766,4.198,767,4.198,768,4.198,769,4.198,770,4.198,771,4.198,772,4.198,773,4.198,774,4.198]],["title/miscellaneous/enumerations.html",[775,1.116,776,3.136]],["body/miscellaneous/enumerations.html",[16,0.332,33,0.036,41,2.852,118,0.028,119,0.028,142,2.415,252,4.178,747,2.923,748,3.612,775,1.716,776,3.38,777,3.38,778,4.075,779,4.075,780,4.075,781,4.075,782,4.075,783,4.075,784,4.075,785,4.075,786,4.075,787,4.075,788,4.075,789,4.075,790,4.075,791,4.075,792,4.075,793,4.075,794,4.075,795,4.075,796,4.075,797,4.075,798,4.075,799,4.075,800,4.075,801,4.075]],["title/miscellaneous/functions.html",[775,1.116,802,3.136]],["body/miscellaneous/functions.html",[16,0.353,24,1.385,25,1.268,32,1.672,33,0.034,34,0.416,35,1.672,37,1.662,47,1.527,64,1.393,118,0.029,119,0.029,256,2.959,327,2.741,450,3.309,472,2.741,565,2.741,567,3.591,685,3.591,693,3.591,742,3.591,743,4.334,775,1.822,802,3.591,803,4.329,804,3.591,805,4.329,806,5.225,807,4.329,808,4.329,809,4.329]],["title/index.html",[16,0.216,439,1.901,810,2.199]],["body/index.html",[4,0.523,25,0.883,33,0.026,40,1.532,46,2.304,118,0.026,119,0.026,120,2.648,218,4.816,474,3.889,491,2.304,586,2.938,587,3.929,754,2.609,811,3.638,812,4.689,813,3.638,814,5.188,815,5.188,816,3.018,817,3.638,818,3.638,819,4.689,820,5.67,821,5.906,822,3.638,823,3.638,824,3.638,825,3.638,826,3.638,827,3.638,828,3.638,829,3.638,830,3.018,831,3.638,832,3.638,833,5.188,834,3.638,835,3.638,836,3.638,837,3.638,838,3.638,839,4.689,840,4.689,841,5.479,842,3.638,843,4.689,844,3.638,845,3.638,846,3.638,847,3.638,848,4.689,849,3.638,850,3.638,851,3.638,852,3.638,853,3.638,854,3.638,855,5.188,856,3.638,857,3.638,858,3.018,859,2.609,860,3.638,861,3.638]],["title/license.html",[439,1.901,810,2.199,862,2.199]],["body/license.html",[24,1.193,33,0.027,56,3.949,98,4.352,118,0.027,119,0.027,470,3.091,582,2.672,586,2.696,699,3.091,722,3.091,830,3.091,858,3.091,862,3.091,863,3.726,864,5.246,865,3.726,866,3.726,867,3.726,868,3.726,869,4.761,870,3.726,871,3.726,872,3.726,873,3.726,874,3.726,875,3.726,876,4.761,877,6.072,878,3.726,879,3.726,880,3.726,881,3.726,882,3.726,883,3.726,884,3.726,885,3.726,886,3.726,887,3.726,888,3.726,889,3.726,890,4.761,891,3.726,892,3.726,893,3.726,894,3.726,895,3.726,896,3.726,897,4.761,898,4.761,899,3.726,900,3.726,901,3.726,902,3.726,903,3.726,904,3.726,905,3.726,906,3.726,907,3.726,908,3.726,909,3.726,910,3.726,911,3.726,912,3.726,913,3.726,914,3.726,915,3.726,916,3.726,917,3.726,918,3.726,919,3.726,920,3.726,921,3.726,922,3.726,923,3.726,924,3.726,925,3.726]],["title/modules.html",[926,3.537]],["body/modules.html",[33,0.032,118,0.032,119,0.032,926,4.101]],["title/overview.html",[859,3.058]],["body/overview.html",[2,3.447,33,0.031,118,0.031,119,0.031,122,3.447,222,2.024,287,2.024,484,3.987,859,3.447,927,5.559]],["title/properties.html",[17,0.755,754,1.901]],["body/properties.html",[17,0.976,33,0.033,118,0.032,119,0.032,816,4.057,928,4.892]],["title/miscellaneous/typealiases.html",[775,1.116,929,3.781]],["body/miscellaneous/typealiases.html",[6,2.866,16,0.369,29,4.451,33,0.035,34,0.435,73,4.451,74,3.246,75,3.246,76,2.866,77,3.246,78,2.866,79,3.246,118,0.03,119,0.03,511,2.31,565,2.866,566,3.398,775,1.905,804,3.754,930,4.526,931,4.451]],["title/miscellaneous/variables.html",[775,1.116,932,3.136]],["body/miscellaneous/variables.html",[6,2.298,15,3.357,16,0.296,24,1.162,33,0.036,34,0.449,40,1.528,64,0.967,74,2.603,75,2.603,76,2.298,77,2.603,78,2.298,79,2.603,80,1.272,81,3.357,82,2.055,83,3.882,84,3.882,85,3.882,86,3.882,87,3.882,88,3.882,118,0.026,119,0.026,132,2.603,141,2.398,142,1.989,159,1.393,240,1.162,268,3.01,302,3.357,304,1.797,317,2.603,321,2.055,333,1.679,484,2.603,610,2.603,678,3.01,726,3.01,728,3.882,738,3.01,747,2.603,748,3.357,775,1.528,777,3.01,931,3.01,932,3.01,933,3.629,934,3.629,935,3.629,936,3.629,937,3.629,938,3.629,939,3.629,940,3.629,941,3.629,942,3.629,943,5.902,944,3.629,945,3.629,946,3.629]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":186,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["0.0.0",{"_index":928,"title":{},"body":{"properties.html":{}}}],["0.14.10",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":751,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":115,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["1/1",{"_index":745,"title":{},"body":{"coverage.html":{}}}],["1/15",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["10/15",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["18.2.0",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["18.2.5",{"_index":817,"title":{},"body":{"index.html":{}}}],["18.2.7",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":484,"title":{},"body":{"injectables/GameStateStoreService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.3.0",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["2/10",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":738,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["2024",{"_index":866,"title":{},"body":{"license.html":{}}}],["3.1.1",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["4.17.21",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["42",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":45,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{}}}],["60",{"_index":749,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":927,"title":{},"body":{"overview.html":{}}}],["7.8.0",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["_gamestate",{"_index":497,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_setgamestate",{"_index":500,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_setgamestate(newstate",{"_index":505,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_state",{"_index":578,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["_transactionstate",{"_index":498,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["above",{"_index":896,"title":{},"body":{"license.html":{}}}],["accessible",{"_index":448,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["accessors",{"_index":23,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["action",{"_index":919,"title":{},"body":{"license.html":{}}}],["action_pawn_amphibian",{"_index":778,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_arachnid",{"_index":780,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_bird",{"_index":782,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_insect",{"_index":784,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_mammal",{"_index":786,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_reptile",{"_index":788,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnamphibian",{"_index":779,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnarachnid",{"_index":781,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnbird",{"_index":783,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawninsect",{"_index":785,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnmammal",{"_index":787,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnreptile",{"_index":789,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actions",{"_index":486,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["acts",{"_index":583,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["actual_component",{"_index":161,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["add",{"_index":46,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"index.html":{}}}],["added",{"_index":14,"title":{},"body":{"classes/Animal.html":{}}}],["addedelement.kind",{"_index":112,"title":{},"body":{"classes/Animal.html":{}}}],["addedelements",{"_index":90,"title":{},"body":{"classes/Animal.html":{}}}],["addelement",{"_index":21,"title":{},"body":{"classes/Animal.html":{}}}],["addelement(element",{"_index":36,"title":{},"body":{"classes/Animal.html":{}}}],["adds",{"_index":39,"title":{},"body":{"classes/Animal.html":{}}}],["aliases",{"_index":930,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":110,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["always",{"_index":620,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["amphibiananimal",{"_index":74,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":888,"title":{},"body":{"license.html":{}}}],["angular",{"_index":814,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":146,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":190,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["angular/material/tooltip",{"_index":191,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["angular/platform",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":147,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["animal",{"_index":1,"title":{"classes/Animal.html":{}},"body":{"classes/Animal.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"coverage.html":{}}}],["animalkind",{"_index":73,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{}}}],["animalmodel",{"_index":99,"title":{},"body":{"classes/Animal.html":{}}}],["animalname",{"_index":101,"title":{},"body":{"classes/Animal.html":{}}}],["animalname.charat(0).touppercase",{"_index":103,"title":{},"body":{"classes/Animal.html":{}}}],["animalname.slice(1",{"_index":104,"title":{},"body":{"classes/Animal.html":{}}}],["animalstate",{"_index":29,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{}}}],["app",{"_index":129,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["app.component.html",{"_index":137,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":139,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":121,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":728,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":826,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applies",{"_index":354,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["apply",{"_index":356,"title":{},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{}}}],["apply(gamestate",{"_index":358,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["applygsp",{"_index":379,"title":{},"body":{"injectables/GameStateService.html":{}}}],["applygsp(gsp",{"_index":391,"title":{},"body":{"injectables/GameStateService.html":{}}}],["applypatch",{"_index":364,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["applypatch(gamestate",{"_index":368,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["arachnidanimal",{"_index":75,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["arising",{"_index":923,"title":{},"body":{"license.html":{}}}],["array",{"_index":593,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["artifacts",{"_index":835,"title":{},"body":{"index.html":{}}}],["associated",{"_index":878,"title":{},"body":{"license.html":{}}}],["assume",{"_index":631,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["authors",{"_index":912,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":827,"title":{},"body":{"index.html":{}}}],["available",{"_index":689,"title":{},"body":{"injectables/PileService.html":{}}}],["bag",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":326,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["based",{"_index":63,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{}}}],["basegamestate",{"_index":302,"title":{},"body":{"injectables/GameManagementService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":400,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["behaviorsubject",{"_index":254,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["behaviorsubject(0",{"_index":245,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["behaviorsubject(pile.length",{"_index":713,"title":{},"body":{"injectables/PileService.html":{}}}],["behaviorsubject(this._gamestate",{"_index":530,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["behaviorsubject>(new",{"_index":690,"title":{},"body":{"injectables/PileService.html":{}}}],["being",{"_index":678,"title":{},"body":{"injectables/PileService.html":{},"miscellaneous/variables.html":{}}}],["birdanimal",{"_index":76,"title":{},"body":{"classes/Animal.html":{},"injectables/GameManagementService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":809,"title":{},"body":{"miscellaneous/functions.html":{}}}],["both",{"_index":57,"title":{},"body":{"classes/Animal.html":{}}}],["browser",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":587,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"index.html":{}}}],["c",{"_index":865,"title":{},"body":{"license.html":{}}}],["call",{"_index":399,"title":{},"body":{"injectables/GameStateService.html":{}}}],["called",{"_index":453,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["calling",{"_index":490,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["capabilities",{"_index":853,"title":{},"body":{"index.html":{}}}],["capitalized",{"_index":97,"title":{},"body":{"classes/Animal.html":{}}}],["card",{"_index":13,"title":{},"body":{"classes/Animal.html":{}}}],["case",{"_index":489,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["change",{"_index":829,"title":{},"body":{"index.html":{}}}],["changes",{"_index":660,"title":{},"body":{"injectables/PileService.html":{}}}],["charge",{"_index":873,"title":{},"body":{"license.html":{}}}],["check",{"_index":857,"title":{},"body":{"index.html":{}}}],["choice",{"_index":847,"title":{},"body":{"index.html":{}}}],["claim",{"_index":915,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Animal.html":{},"classes/Pile.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"overview.html":{}}}],["cli",{"_index":815,"title":{},"body":{"index.html":{}}}],["client.service",{"_index":415,"title":{},"body":{"injectables/GameStateService.html":{}}}],["client.service.ts",{"_index":337,"title":{},"body":{"injectables/GameStateClientService.html":{},"coverage.html":{}}}],["client.service.ts:13",{"_index":344,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["client.service.ts:9",{"_index":342,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["code",{"_index":831,"title":{},"body":{"index.html":{}}}],["command",{"_index":848,"title":{},"body":{"index.html":{}}}],["commit",{"_index":433,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["committransaction",{"_index":380,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["compare",{"_index":365,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["compare(oldstate",{"_index":367,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["complains",{"_index":622,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["component",{"_index":120,"title":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":156,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["components",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"overview.html":{}}}],["conditions",{"_index":895,"title":{},"body":{"license.html":{}}}],["connection",{"_index":924,"title":{},"body":{"license.html":{}}}],["console.log('create",{"_index":199,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log('end",{"_index":214,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log('start",{"_index":201,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log(json.stringify(gsp",{"_index":346,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["const",{"_index":80,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":27,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{}}}],["constructor(gamemanagementsvc",{"_index":173,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["constructor(gamestateservice",{"_index":295,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["constructor(gamestatestore",{"_index":387,"title":{},"body":{"injectables/GameStateService.html":{}}}],["constructor(gamestatesvc",{"_index":231,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/PileService.html":{}}}],["constructor(private",{"_index":258,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/PileService.html":{}}}],["constructor(state",{"_index":28,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["constructs",{"_index":645,"title":{},"body":{"injectables/PileService.html":{}}}],["contain",{"_index":577,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["contract",{"_index":920,"title":{},"body":{"license.html":{}}}],["copies",{"_index":890,"title":{},"body":{"license.html":{}}}],["copy",{"_index":876,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":864,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":658,"title":{},"body":{"injectables/PileService.html":{}}}],["count",{"_index":236,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["coverage",{"_index":721,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":357,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["create(oldstate",{"_index":360,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["creategame",{"_index":170,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{}}}],["creates",{"_index":353,"title":{},"body":{"injectables/GameStatePatchService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["current",{"_index":496,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["currentcount",{"_index":627,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["currentitemcount",{"_index":632,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["damages",{"_index":916,"title":{},"body":{"license.html":{}}}],["date.now",{"_index":366,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["deal",{"_index":879,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":925,"title":{},"body":{"license.html":{}}}],["deepclone",{"_index":298,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["deepclone(basegamestate",{"_index":307,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["deepclone(this._gamestate",{"_index":548,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["deepclone(this._state",{"_index":617,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["deepclone(this._transactionstate",{"_index":549,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["deepcompare",{"_index":743,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deepcompare(object1",{"_index":805,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"miscellaneous/variables.html":{}}}],["defaultpiecefactory",{"_index":256,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["defaultpiecefactory(kind",{"_index":567,"title":{},"body":{"interfaces/Piece.html":{},"miscellaneous/functions.html":{}}}],["defaults",{"_index":665,"title":{},"body":{"injectables/PileService.html":{}}}],["defined",{"_index":30,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["defines",{"_index":325,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["defining",{"_index":317,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"miscellaneous/variables.html":{}}}],["definition",{"_index":584,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["dependencies",{"_index":755,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Animal.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["detect",{"_index":557,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["determine",{"_index":685,"title":{},"body":{"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["dev",{"_index":823,"title":{},"body":{"index.html":{}}}],["development",{"_index":818,"title":{},"body":{"index.html":{}}}],["directive",{"_index":154,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["directives",{"_index":160,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":834,"title":{},"body":{"index.html":{}}}],["directory",{"_index":838,"title":{},"body":{"index.html":{}}}],["dist",{"_index":837,"title":{},"body":{"index.html":{}}}],["distinctuntilchanged",{"_index":693,"title":{},"body":{"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["distribute",{"_index":886,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":328,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["documentation",{"_index":722,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["doesn't",{"_index":279,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["dom",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["dominant",{"_index":143,"title":{},"body":{"components/AppComponent.html":{},"injectables/ElementDrawPoolService.html":{}}}],["dominantspecies",{"_index":811,"title":{},"body":{"index.html":{}}}],["done",{"_index":485,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["draw",{"_index":158,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["drawn",{"_index":592,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["drawpilestate",{"_index":270,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["drawpool",{"_index":230,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["drawpoolgamecomponent",{"_index":135,"title":{"components/DrawPoolGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["drawpoollength",{"_index":168,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["drawpoolsvc",{"_index":177,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["drew",{"_index":211,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["ds",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dspiecekind",{"_index":252,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"miscellaneous/enumerations.html":{}}}],["dspiecekind.element",{"_index":268,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":488,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["dynamic",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":335,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["e2e",{"_index":845,"title":{},"body":{"index.html":{}}}],["each",{"_index":333,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["earth",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":41,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"miscellaneous/enumerations.html":{}}}],["element.charat(0).touppercase",{"_index":208,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["element.kind",{"_index":113,"title":{},"body":{"classes/Animal.html":{}}}],["element.slice(1",{"_index":209,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elementdrawpool",{"_index":275,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["elementdrawpoolservice",{"_index":178,"title":{"injectables/ElementDrawPoolService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"coverage.html":{}}}],["elementindex",{"_index":114,"title":{},"body":{"classes/Animal.html":{}}}],["elementpile",{"_index":225,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["elements",{"_index":15,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"miscellaneous/variables.html":{}}}],["emit",{"_index":480,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["emitlength",{"_index":642,"title":{},"body":{"injectables/PileService.html":{}}}],["emitlength(pile",{"_index":649,"title":{},"body":{"injectables/PileService.html":{}}}],["emits",{"_index":651,"title":{},"body":{"injectables/PileService.html":{}}}],["emitted",{"_index":466,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["emitting",{"_index":676,"title":{},"body":{"injectables/PileService.html":{}}}],["empty",{"_index":213,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["end",{"_index":218,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"index.html":{}}}],["endturn",{"_index":171,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["engine/model/faction.model",{"_index":70,"title":{},"body":{"classes/Animal.html":{}}}],["engine/model/piece.model",{"_index":71,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{}}}],["engine/model/pile.model",{"_index":251,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["engine/model/player.model",{"_index":68,"title":{},"body":{"classes/Animal.html":{}}}],["engine/service/game",{"_index":188,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{}}}],["ensure",{"_index":494,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ensures",{"_index":555,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ensuring",{"_index":42,"title":{},"body":{"classes/Animal.html":{}}}],["entire",{"_index":477,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["enumerations",{"_index":776,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":807,"title":{},"body":{"miscellaneous/functions.html":{}}}],["error",{"_index":109,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateService.html":{},"injectables/PileService.html":{}}}],["error(\"can't",{"_index":426,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["error(\"elementpile",{"_index":278,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["error('element",{"_index":261,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["error('gamestate",{"_index":273,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{}}}],["error('gamestatestore",{"_index":430,"title":{},"body":{"injectables/GameStateService.html":{}}}],["error('must",{"_index":537,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('no",{"_index":432,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["error('transaction",{"_index":438,"title":{},"body":{"injectables/GameStateService.html":{}}}],["error(`pile",{"_index":709,"title":{},"body":{"injectables/PileService.html":{}}}],["error(`unable",{"_index":703,"title":{},"body":{"injectables/PileService.html":{}}}],["event",{"_index":911,"title":{},"body":{"license.html":{}}}],["eventcoalescing",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":332,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["exceed",{"_index":43,"title":{},"body":{"classes/Animal.html":{}}}],["execute",{"_index":843,"title":{},"body":{"index.html":{}}}],["export",{"_index":72,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{}}}],["express",{"_index":903,"title":{},"body":{"license.html":{}}}],["extends",{"_index":289,"title":{},"body":{"interfaces/FactionState.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["faction",{"_index":321,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/variables.html":{}}}],["faction.model",{"_index":323,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["factionstate",{"_index":69,"title":{"interfaces/FactionState.html":{}},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["factory",{"_index":585,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["false).newdocument",{"_index":370,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["fast",{"_index":299,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["files",{"_index":830,"title":{},"body":{"index.html":{},"license.html":{}}}],["filter",{"_index":416,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["filter((gamestate",{"_index":532,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["find",{"_index":704,"title":{},"body":{"injectables/PileService.html":{}}}],["first",{"_index":850,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":908,"title":{},"body":{"license.html":{}}}],["following",{"_index":894,"title":{},"body":{"license.html":{}}}],["found",{"_index":700,"title":{},"body":{"injectables/PileService.html":{}}}],["free",{"_index":872,"title":{},"body":{"license.html":{}}}],["function",{"_index":511,"title":{},"body":{"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":802,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":893,"title":{},"body":{"license.html":{}}}],["further",{"_index":854,"title":{},"body":{"index.html":{}}}],["game",{"_index":159,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["game.component",{"_index":151,"title":{},"body":{"components/AppComponent.html":{}}}],["game.component.html",{"_index":166,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.scss",{"_index":167,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts",{"_index":163,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["game.component.ts:16",{"_index":187,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:17",{"_index":179,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:28",{"_index":181,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:33",{"_index":184,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:38",{"_index":182,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:49",{"_index":183,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game/component/draw",{"_index":148,"title":{},"body":{"components/AppComponent.html":{}}}],["game/dominant",{"_index":303,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["game/draw",{"_index":150,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["game/model/animal.model",{"_index":306,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["gamemanagementservice",{"_index":174,"title":{"injectables/GameManagementService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"coverage.html":{}}}],["gamemanagementsvc",{"_index":180,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["gamestate",{"_index":304,"title":{"interfaces/GameState.html":{}},"body":{"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gamestate.faction",{"_index":308,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateStoreService.html":{}}}],["gamestate.pile",{"_index":563,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestateclient",{"_index":389,"title":{},"body":{"injectables/GameStateService.html":{}}}],["gamestateclientservice",{"_index":336,"title":{"injectables/GameStateClientService.html":{}},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestateelement",{"_index":290,"title":{"interfaces/GameStateElement.html":{}},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["gamestatepatch",{"_index":341,"title":{"interfaces/GameStatePatch.html":{}},"body":{"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestatepatches",{"_index":355,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["gamestatepatchservice",{"_index":351,"title":{"injectables/GameStatePatchService.html":{}},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestateservice",{"_index":176,"title":{"injectables/GameStateService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/PileService.html":{},"coverage.html":{}}}],["gamestatestore",{"_index":331,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{}}}],["gamestatestoreservice",{"_index":320,"title":{"injectables/GameStateStoreService.html":{}},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["gamestatesubject",{"_index":499,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestatesvc",{"_index":175,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/PileService.html":{}}}],["generate",{"_index":833,"title":{},"body":{"index.html":{}}}],["generated",{"_index":813,"title":{},"body":{"index.html":{}}}],["getdrawpool",{"_index":247,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["getelements",{"_index":53,"title":{},"body":{"classes/Animal.html":{}}}],["getfaction",{"_index":409,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["getgamestate",{"_index":523,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getgsp",{"_index":343,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["getkind",{"_index":59,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{}}}],["getlength",{"_index":249,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{}}}],["getname",{"_index":61,"title":{},"body":{"classes/Animal.html":{}}}],["getobservableforkey",{"_index":501,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getobservableforkey(selector",{"_index":508,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getowner",{"_index":65,"title":{},"body":{"classes/Animal.html":{}}}],["getpile",{"_index":411,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["getpile(kind",{"_index":653,"title":{},"body":{"injectables/PileService.html":{}}}],["gets",{"_index":55,"title":{},"body":{"classes/Animal.html":{}}}],["getstate",{"_index":601,"title":{},"body":{"classes/Pile.html":{}}}],["getting",{"_index":810,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettransactionstate",{"_index":525,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["given",{"_index":656,"title":{},"body":{"injectables/PileService.html":{}}}],["go",{"_index":856,"title":{},"body":{"index.html":{}}}],["granted",{"_index":871,"title":{},"body":{"license.html":{}}}],["grasselement",{"_index":86,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["grubelement",{"_index":84,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["gsp",{"_index":339,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["gsp.patch",{"_index":369,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["gspservice",{"_index":388,"title":{},"body":{"injectables/GameStateService.html":{}}}],["help",{"_index":855,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":870,"title":{},"body":{"license.html":{}}}],["holders",{"_index":913,"title":{},"body":{"license.html":{}}}],["html",{"_index":153,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["http://localhost:4200",{"_index":825,"title":{},"body":{"index.html":{}}}],["id",{"_index":309,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/Player.html":{}}}],["identifier",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":851,"title":{},"body":{"index.html":{}}}],["implied",{"_index":904,"title":{},"body":{"license.html":{}}}],["import",{"_index":67,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["imports",{"_index":133,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["include",{"_index":274,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["included",{"_index":582,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"license.html":{}}}],["including",{"_index":56,"title":{},"body":{"classes/Animal.html":{},"license.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{}}}],["inherent",{"_index":11,"title":{},"body":{"classes/Animal.html":{}}}],["inherentelementkindbyanimalkind",{"_index":81,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inherentelements",{"_index":89,"title":{},"body":{"classes/Animal.html":{}}}],["initial",{"_index":454,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["initialize",{"_index":216,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/PileService.html":{}}}],["initialized",{"_index":262,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{}}}],["initializegamestate",{"_index":381,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["initializegamestate(gamestate",{"_index":394,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["initializes",{"_index":646,"title":{},"body":{"injectables/PileService.html":{}}}],["injectable",{"_index":221,"title":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"coverage.html":{}}}],["injectables",{"_index":222,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"overview.html":{}}}],["insectanimal",{"_index":77,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["instantiated",{"_index":574,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["interact",{"_index":375,"title":{},"body":{"injectables/GameStateService.html":{}}}],["interested",{"_index":463,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["interface",{"_index":286,"title":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"interfaces/Piece.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{}},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStateService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["interfaces",{"_index":287,"title":{},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"interfaces/Piece.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"overview.html":{}}}],["inventory",{"_index":610,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":573,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["item",{"_index":204,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["item.kind",{"_index":543,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["item[0",{"_index":206,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["item[0].kind.replace('element",{"_index":207,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["items",{"_index":282,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["joe",{"_index":867,"title":{},"body":{"license.html":{}}}],["json",{"_index":300,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["k",{"_index":868,"title":{},"body":{"license.html":{}}}],["karma",{"_index":844,"title":{},"body":{"index.html":{}}}],["keeps",{"_index":607,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["key",{"_index":464,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["keyof",{"_index":535,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["keys",{"_index":459,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["kind",{"_index":24,"title":{},"body":{"classes/Animal.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["kinds",{"_index":576,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["kindtolengthobservables",{"_index":636,"title":{},"body":{"injectables/PileService.html":{}}}],["kindtolengthsubjects",{"_index":637,"title":{},"body":{"injectables/PileService.html":{}}}],["kindtopile",{"_index":638,"title":{},"body":{"injectables/PileService.html":{}}}],["leaving",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":152,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["length",{"_index":198,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["lengths",{"_index":677,"title":{},"body":{"injectables/PileService.html":{}}}],["lengthsubject",{"_index":226,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/PileService.html":{}}}],["lengthsubject.asobservable().pipe(distinctuntilchanged",{"_index":716,"title":{},"body":{"injectables/PileService.html":{}}}],["lengthsubject.next(pile.length",{"_index":702,"title":{},"body":{"injectables/PileService.html":{}}}],["level",{"_index":458,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["liability",{"_index":917,"title":{},"body":{"license.html":{}}}],["liable",{"_index":914,"title":{},"body":{"license.html":{}}}],["license",{"_index":862,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":44,"title":{},"body":{"classes/Animal.html":{}}}],["limitation",{"_index":881,"title":{},"body":{"license.html":{}}}],["limited",{"_index":905,"title":{},"body":{"license.html":{}}}],["line",{"_index":219,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["list",{"_index":92,"title":{},"body":{"classes/Animal.html":{}}}],["local",{"_index":495,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["lodash",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":169,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["made",{"_index":688,"title":{},"body":{"injectables/PileService.html":{}}}],["maintain",{"_index":446,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["making",{"_index":447,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["mammalanimal",{"_index":78,"title":{},"body":{"classes/Animal.html":{},"injectables/GameManagementService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":319,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["management.service",{"_index":189,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["management.service.ts",{"_index":294,"title":{},"body":{"injectables/GameManagementService.html":{},"coverage.html":{}}}],["management.service.ts:11",{"_index":296,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["management.service.ts:14",{"_index":297,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["many",{"_index":609,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["map",{"_index":82,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"miscellaneous/variables.html":{}}}],["map((gamestate",{"_index":533,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["map((pilestates",{"_index":265,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["matbutton",{"_index":164,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["matching",{"_index":119,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mattooltip",{"_index":165,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["meatelement",{"_index":87,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["member",{"_index":594,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["merchantability",{"_index":907,"title":{},"body":{"license.html":{}}}],["merge",{"_index":884,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["method",{"_index":452,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{}}}],["miscellaneous",{"_index":775,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":863,"title":{},"body":{"license.html":{}}}],["model/faction.model",{"_index":417,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["model/game",{"_index":305,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["model/piece.model",{"_index":692,"title":{},"body":{"injectables/PileService.html":{}}}],["model/pile.model",{"_index":418,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["modify",{"_index":883,"title":{},"body":{"license.html":{}}}],["modules",{"_index":926,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":491,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"index.html":{}}}],["name",{"_index":25,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/Player.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["navigate",{"_index":824,"title":{},"body":{"index.html":{}}}],["need",{"_index":849,"title":{},"body":{"index.html":{}}}],["needed",{"_index":572,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["new",{"_index":40,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newstate",{"_index":361,"title":{},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["newstate.kind",{"_index":544,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ng",{"_index":821,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":910,"title":{},"body":{"license.html":{}}}],["notice",{"_index":897,"title":{},"body":{"license.html":{}}}],["null",{"_index":280,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["number",{"_index":185,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/GameStatePatch.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["object",{"_index":318,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["object.keys(this._state.inventory).reduce",{"_index":614,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["object1",{"_index":808,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object2",{"_index":806,"title":{},"body":{"miscellaneous/functions.html":{}}}],["objects",{"_index":327,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/functions.html":{}}}],["observable",{"_index":242,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["observables",{"_index":460,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["obtaining",{"_index":875,"title":{},"body":{"license.html":{}}}],["of(undefined",{"_index":347,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["oldstate",{"_index":363,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["once",{"_index":686,"title":{},"body":{"injectables/PileService.html":{}}}],["one",{"_index":471,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["ones",{"_index":58,"title":{},"body":{"classes/Animal.html":{}}}],["operation",{"_index":350,"title":{},"body":{"interfaces/GameStatePatch.html":{}}}],["optional",{"_index":35,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["orchestrating",{"_index":376,"title":{},"body":{"injectables/GameStateService.html":{}}}],["others",{"_index":449,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["otherwise",{"_index":922,"title":{},"body":{"license.html":{}}}],["out",{"_index":858,"title":{},"body":{"index.html":{},"license.html":{}}}],["outside",{"_index":330,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["overview",{"_index":859,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrites",{"_index":478,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["owned",{"_index":9,"title":{},"body":{"classes/Animal.html":{}}}],["owner",{"_index":26,"title":{},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{}}}],["package",{"_index":754,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":861,"title":{},"body":{"index.html":{}}}],["param",{"_index":106,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":470,"title":{},"body":{"injectables/GameStateStoreService.html":{},"license.html":{}}}],["passed",{"_index":455,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["patch",{"_index":301,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["patch.model",{"_index":345,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{}}}],["patch.model.ts",{"_index":348,"title":{},"body":{"interfaces/GameStatePatch.html":{},"coverage.html":{}}}],["patch.service",{"_index":414,"title":{},"body":{"injectables/GameStateService.html":{}}}],["patch.service.ts",{"_index":352,"title":{},"body":{"injectables/GameStatePatchService.html":{},"coverage.html":{}}}],["patch.service.ts:13",{"_index":362,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["patch.service.ts:20",{"_index":359,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["permission",{"_index":869,"title":{},"body":{"license.html":{}}}],["permit",{"_index":891,"title":{},"body":{"license.html":{}}}],["person",{"_index":874,"title":{},"body":{"license.html":{}}}],["persons",{"_index":892,"title":{},"body":{"license.html":{}}}],["piece",{"_index":37,"title":{"interfaces/Piece.html":{}},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["piece.model",{"_index":604,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["piececount",{"_index":624,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["piecefactory",{"_index":566,"title":{},"body":{"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/typealiases.html":{}}}],["pieces",{"_index":570,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["pieces.push(null",{"_index":630,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieces.push(this.piecefactory(kind",{"_index":629,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieceswithcount.length",{"_index":625,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieceswithcount[math.floor(math.random",{"_index":626,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pile",{"_index":240,"title":{"classes/Pile.html":{}},"body":{"injectables/ElementDrawPoolService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pile(drawpilestate",{"_index":271,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pile.kind",{"_index":705,"title":{},"body":{"injectables/PileService.html":{}}}],["pile.model",{"_index":324,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["pile.pull(count",{"_index":718,"title":{},"body":{"injectables/PileService.html":{}}}],["pile.put(pieces",{"_index":719,"title":{},"body":{"injectables/PileService.html":{}}}],["pile.setstate(pilestate",{"_index":697,"title":{},"body":{"injectables/PileService.html":{}}}],["piles",{"_index":675,"title":{},"body":{"injectables/PileService.html":{}}}],["pileservice",{"_index":634,"title":{"injectables/PileService.html":{}},"body":{"injectables/PileService.html":{},"coverage.html":{}}}],["pilestate",{"_index":322,"title":{"interfaces/PileState.html":{}},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["pilestate.kind",{"_index":267,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pilestates.find((pilestate",{"_index":266,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pilestates.foreach((pilestate",{"_index":695,"title":{},"body":{"injectables/PileService.html":{}}}],["pipe",{"_index":264,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["places",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platform",{"_index":846,"title":{},"body":{"index.html":{}}}],["player",{"_index":10,"title":{"interfaces/Player.html":{}},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["player.model",{"_index":291,"title":{},"body":{"interfaces/FactionState.html":{}}}],["pool",{"_index":149,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["pool.service",{"_index":194,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["pool.service.ts",{"_index":224,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"coverage.html":{}}}],["pool.service.ts:12",{"_index":246,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:13",{"_index":244,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:14",{"_index":232,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:19",{"_index":248,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:26",{"_index":233,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:43",{"_index":250,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:47",{"_index":239,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:56",{"_index":235,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:63",{"_index":238,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["portions",{"_index":900,"title":{},"body":{"license.html":{}}}],["pretty",{"_index":605,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["previous",{"_index":479,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["printed",{"_index":12,"title":{},"body":{"classes/Animal.html":{}}}],["private",{"_index":195,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["progress",{"_index":398,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["project",{"_index":812,"title":{},"body":{"index.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"properties.html":{}}}],["provideanimationsasync('noop",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":901,"title":{},"body":{"license.html":{}}}],["providedin",{"_index":257,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["providerouter(routes",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provides",{"_index":372,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["providezonechangedetection",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":18,"title":{},"body":{"classes/Animal.html":{}}}],["publish",{"_index":885,"title":{},"body":{"license.html":{}}}],["pull",{"_index":227,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{}}}],["pull(count",{"_index":234,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pull(kind",{"_index":662,"title":{},"body":{"injectables/PileService.html":{}}}],["pulled",{"_index":666,"title":{},"body":{"injectables/PileService.html":{}}}],["pulls",{"_index":664,"title":{},"body":{"injectables/PileService.html":{}}}],["purpose",{"_index":909,"title":{},"body":{"license.html":{}}}],["put",{"_index":228,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{}}}],["put(elements",{"_index":237,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["put(kind",{"_index":667,"title":{},"body":{"injectables/PileService.html":{}}}],["put(pieces",{"_index":595,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["puts",{"_index":669,"title":{},"body":{"injectables/PileService.html":{}}}],["random",{"_index":569,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["readonly",{"_index":579,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["ready",{"_index":552,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["received",{"_index":483,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["record",{"_index":611,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["reference",{"_index":860,"title":{},"body":{"index.html":{}}}],["regardless",{"_index":469,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["register",{"_index":643,"title":{},"body":{"injectables/PileService.html":{}}}],["register(pile",{"_index":670,"title":{},"body":{"injectables/PileService.html":{}}}],["registered",{"_index":674,"title":{},"body":{"injectables/PileService.html":{}}}],["registeredpilekinds",{"_index":639,"title":{},"body":{"injectables/PileService.html":{}}}],["registeredpiles",{"_index":640,"title":{},"body":{"injectables/PileService.html":{}}}],["registeredpilessubject",{"_index":641,"title":{},"body":{"injectables/PileService.html":{}}}],["registers",{"_index":672,"title":{},"body":{"injectables/PileService.html":{}}}],["related",{"_index":377,"title":{},"body":{"injectables/GameStateService.html":{}}}],["reload",{"_index":828,"title":{},"body":{"index.html":{}}}],["remove",{"_index":52,"title":{},"body":{"classes/Animal.html":{}}}],["removeelement",{"_index":22,"title":{},"body":{"classes/Animal.html":{}}}],["removeelement(element",{"_index":49,"title":{},"body":{"classes/Animal.html":{}}}],["removes",{"_index":51,"title":{},"body":{"classes/Animal.html":{}}}],["representing",{"_index":334,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["represents",{"_index":8,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["reptileanimal",{"_index":79,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":402,"title":{},"body":{"injectables/GameStateService.html":{}}}],["requiretransaction",{"_index":382,"title":{},"body":{"injectables/GameStateService.html":{}}}],["respective",{"_index":679,"title":{},"body":{"injectables/PileService.html":{}}}],["responsible",{"_index":445,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["rest",{"_index":373,"title":{},"body":{"injectables/GameStateService.html":{}}}],["restriction",{"_index":880,"title":{},"body":{"license.html":{}}}],["results",{"_index":118,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":657,"title":{},"body":{"injectables/PileService.html":{}}}],["retrieves",{"_index":655,"title":{},"body":{"injectables/PileService.html":{}}}],["return",{"_index":93,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["returned",{"_index":591,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["returns",{"_index":47,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":882,"title":{},"body":{"license.html":{}}}],["rollback",{"_index":560,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["rollbacktransaction",{"_index":383,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["root",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["root'},{'name",{"_index":157,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["routeroutlet",{"_index":134,"title":{},"body":{"components/AppComponent.html":{}}}],["run",{"_index":820,"title":{},"body":{"index.html":{}}}],["running",{"_index":839,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":255,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"dependencies.html":{}}}],["scaffolding",{"_index":832,"title":{},"body":{"index.html":{}}}],["seedelement",{"_index":85,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["selected",{"_index":588,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["selector",{"_index":128,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["selector(gamestate",{"_index":534,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["sell",{"_index":889,"title":{},"body":{"license.html":{}}}],["sendgsptobackend",{"_index":338,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["sendgsptobackend(gsp",{"_index":340,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["serve",{"_index":822,"title":{},"body":{"index.html":{}}}],["server",{"_index":819,"title":{},"body":{"index.html":{}}}],["service",{"_index":648,"title":{},"body":{"injectables/PileService.html":{}}}],["service/element",{"_index":193,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["services",{"_index":378,"title":{},"body":{"injectables/GameStateService.html":{}}}],["set",{"_index":492,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["setfaction",{"_index":384,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setfaction(newstate",{"_index":404,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setgamestate",{"_index":475,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["setgamestate(newstate",{"_index":515,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["setpile",{"_index":385,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setpile(newstate",{"_index":406,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setstate",{"_index":580,"title":{},"body":{"classes/Pile.html":{}}}],["setstate(newstate",{"_index":597,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["setting",{"_index":661,"title":{},"body":{"injectables/PileService.html":{}}}],["settransactionstateelement",{"_index":502,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["settransactionstateelement(key",{"_index":518,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["several",{"_index":456,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["shall",{"_index":898,"title":{},"body":{"license.html":{}}}],["simple",{"_index":606,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["software",{"_index":877,"title":{},"body":{"license.html":{}}}],["someone",{"_index":462,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"index.html":{}}}],["species",{"_index":144,"title":{},"body":{"components/AppComponent.html":{}}}],["species.constants",{"_index":253,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{}}}],["species.constants.ts",{"_index":748,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["species_amphibian",{"_index":790,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_arachnid",{"_index":792,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_bird",{"_index":794,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_insect",{"_index":796,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_mammal",{"_index":798,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_reptile",{"_index":800,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesamphibian",{"_index":791,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesarachnid",{"_index":793,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesbird",{"_index":795,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesinsect",{"_index":797,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesmammal",{"_index":799,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesreptile",{"_index":801,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["specified",{"_index":652,"title":{},"body":{"injectables/PileService.html":{}}}],["src/.../animal.model.ts",{"_index":931,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dominant",{"_index":777,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../piece.model.ts",{"_index":804,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../util.ts",{"_index":803,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.component.ts",{"_index":126,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:13",{"_index":145,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":726,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/engine/model/faction.model.ts",{"_index":288,"title":{},"body":{"interfaces/FactionState.html":{},"coverage.html":{}}}],["src/app/engine/model/game",{"_index":315,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"coverage.html":{}}}],["src/app/engine/model/piece.model.ts",{"_index":565,"title":{},"body":{"interfaces/Piece.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/engine/model/pile.model.ts",{"_index":568,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["src/app/engine/model/pile.model.ts:23",{"_index":589,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:24",{"_index":581,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:41",{"_index":599,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:48",{"_index":602,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:52",{"_index":603,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:56",{"_index":598,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:65",{"_index":590,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:89",{"_index":596,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/player.model.ts",{"_index":720,"title":{},"body":{"interfaces/Player.html":{},"coverage.html":{}}}],["src/app/engine/service/game",{"_index":293,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["src/app/engine/service/pile.service.ts",{"_index":635,"title":{},"body":{"injectables/PileService.html":{},"coverage.html":{}}}],["src/app/engine/service/pile.service.ts:11",{"_index":681,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:116",{"_index":663,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:12",{"_index":682,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:129",{"_index":668,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:13",{"_index":691,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:14",{"_index":680,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:19",{"_index":684,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:23",{"_index":644,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:39",{"_index":659,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:55",{"_index":650,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:69",{"_index":673,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:83",{"_index":654,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:97",{"_index":671,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/util.ts",{"_index":742,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/game/component/draw",{"_index":162,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["src/app/game/dominant",{"_index":747,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app/game/model/animal.model.ts",{"_index":6,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/game/model/animal.model.ts:32",{"_index":31,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:42",{"_index":54,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:46",{"_index":60,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:54",{"_index":62,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:59",{"_index":66,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:68",{"_index":38,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:81",{"_index":50,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/service/element",{"_index":223,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"coverage.html":{}}}],["standalone",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["start",{"_index":217,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["started",{"_index":439,"title":{"index.html":{},"license.html":{}},"body":{"injectables/GameStateService.html":{}}}],["starttransaction",{"_index":386,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["startturn",{"_index":172,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["state",{"_index":19,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["state.model",{"_index":292,"title":{},"body":{"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["state.model.ts",{"_index":316,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"coverage.html":{}}}],["state.service",{"_index":192,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/PileService.html":{}}}],["state.service.ts",{"_index":371,"title":{},"body":{"injectables/GameStateService.html":{},"coverage.html":{}}}],["state.service.ts:18",{"_index":390,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:29",{"_index":392,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:38",{"_index":395,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:42",{"_index":408,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:46",{"_index":393,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:61",{"_index":403,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:68",{"_index":396,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:74",{"_index":410,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:78",{"_index":405,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:82",{"_index":412,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:86",{"_index":407,"title":{},"body":{"injectables/GameStateService.html":{}}}],["statements",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store.service",{"_index":413,"title":{},"body":{"injectables/GameStateService.html":{}}}],["store.service.ts",{"_index":444,"title":{},"body":{"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["store.service.ts:101",{"_index":520,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:109",{"_index":507,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:118",{"_index":513,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:128",{"_index":527,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:132",{"_index":514,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:136",{"_index":528,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:140",{"_index":517,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:31",{"_index":521,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:32",{"_index":522,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:33",{"_index":504,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:39",{"_index":509,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:48",{"_index":519,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:62",{"_index":524,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:70",{"_index":526,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:78",{"_index":506,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:83",{"_index":512,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:91",{"_index":516,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["stored",{"_index":836,"title":{},"body":{"index.html":{}}}],["string",{"_index":64,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":138,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["subject",{"_index":699,"title":{},"body":{"injectables/PileService.html":{},"license.html":{}}}],["sublicense",{"_index":887,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":465,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["subscribe((drawpilestate",{"_index":269,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["subscriber",{"_index":687,"title":{},"body":{"injectables/PileService.html":{}}}],["subscribers",{"_index":556,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["subscribing",{"_index":647,"title":{},"body":{"injectables/PileService.html":{}}}],["substantial",{"_index":899,"title":{},"body":{"license.html":{}}}],["substatearray",{"_index":539,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray.findindex((item",{"_index":542,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray.push(newstate",{"_index":546,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray[index",{"_index":545,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["such",{"_index":493,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["suffix",{"_index":100,"title":{},"body":{"classes/Animal.html":{}}}],["sum",{"_index":615,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["sunelement",{"_index":88,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":374,"title":{},"body":{"injectables/GameStateService.html":{}}}],["t",{"_index":510,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["table",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":487,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["takes",{"_index":476,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["template",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["templateurl",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["test",{"_index":842,"title":{},"body":{"index.html":{}}}],["test1",{"_index":310,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["test2",{"_index":312,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["tester1",{"_index":311,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["tester2",{"_index":313,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["testing",{"_index":852,"title":{},"body":{"index.html":{}}}],["tests",{"_index":841,"title":{},"body":{"index.html":{}}}],["this._gamestate",{"_index":547,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(deepclone(this._gamestate",{"_index":559,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(gamestate",{"_index":551,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(newstate",{"_index":553,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(this._transactionstate",{"_index":554,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._state",{"_index":612,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[key",{"_index":616,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[kind",{"_index":628,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[piece.kind",{"_index":633,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.kind",{"_index":618,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._transactionstate",{"_index":536,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._transactionstate[key",{"_index":540,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.applygsp(gsp",{"_index":421,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.drawpool.length",{"_index":276,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.drawpool.pull(count",{"_index":283,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.drawpool.put(elements",{"_index":285,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.drawpoollength",{"_index":197,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.drawpoolsvc.length$.subscribe((length",{"_index":196,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.drawpoolsvc.pull",{"_index":205,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.elementpile",{"_index":260,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.elements.length",{"_index":111,"title":{},"body":{"classes/Animal.html":{}}}],["this.emitlength(pile",{"_index":698,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gamemanagementsvc.creategame",{"_index":200,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamestateclient.gsp$.pipe(filter((gsp",{"_index":419,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestateclient.sendgsptobackend(gsp",{"_index":436,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestateservice.initializegamestate(gamestate",{"_index":314,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["this.gamestatestore.committransaction",{"_index":435,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.faction",{"_index":440,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.gamestate",{"_index":422,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.initializegamestate(gamestate",{"_index":428,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.pile",{"_index":442,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.rollbacktransaction",{"_index":437,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setfaction(newstate",{"_index":441,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setgamestate(updatedstate",{"_index":425,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setpile(newstate",{"_index":443,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.starttransaction",{"_index":429,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.transactionstate",{"_index":431,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatesubject",{"_index":529,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesubject.asobservable().pipe",{"_index":531,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesubject.next(this.gamestate",{"_index":550,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesvc.committransaction",{"_index":215,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamestatesvc.pile",{"_index":263,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.gamestatesvc.pile$.subscribe((pilestates",{"_index":694,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gamestatesvc.requiretransaction",{"_index":281,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/PileService.html":{}}}],["this.gamestatesvc.setpile(pile.state",{"_index":707,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gamestatesvc.setpile(this.elementpile.state",{"_index":277,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.gamestatesvc.starttransaction",{"_index":203,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.getobservableforkey((gamestate",{"_index":561,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.getpile(kind",{"_index":717,"title":{},"body":{"injectables/PileService.html":{}}}],["this.getpile(pilestate.kind",{"_index":696,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gspservice.apply(this.gamestatestore.gamestate",{"_index":424,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gspservice.create",{"_index":434,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.initialize",{"_index":259,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/PileService.html":{}}}],["this.kind.replace('animal",{"_index":102,"title":{},"body":{"classes/Animal.html":{}}}],["this.kindtolengthobservables.set(pile.kind",{"_index":715,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtolengthsubjects.get(pile.kind",{"_index":701,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtolengthsubjects.set(pile.kind",{"_index":714,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtopile.get(kind",{"_index":708,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtopile.set(pile.kind",{"_index":711,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtopile.values",{"_index":706,"title":{},"body":{"injectables/PileService.html":{}}}],["this.lengthsubject.asobservable",{"_index":243,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.lengthsubject.next(this.elementpile.length",{"_index":272,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.log.push('pile",{"_index":212,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.log.push(`you",{"_index":210,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.name",{"_index":117,"title":{},"body":{"classes/Animal.html":{}}}],["this.piececounts.get(key",{"_index":619,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.piecefactory",{"_index":613,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.registeredpilekinds.add(pile.kind",{"_index":712,"title":{},"body":{"injectables/PileService.html":{}}}],["this.registeredpilekinds.has(pile.kind",{"_index":710,"title":{},"body":{"injectables/PileService.html":{}}}],["this.registeredpilessubject.asobservable",{"_index":683,"title":{},"body":{"injectables/PileService.html":{}}}],["this.settransactionstateelement('faction",{"_index":562,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.settransactionstateelement('pile",{"_index":564,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.state",{"_index":91,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.addedelements",{"_index":95,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.addedelements.splice(elementindex",{"_index":116,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.inherentelements",{"_index":94,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.kind",{"_index":96,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.owner",{"_index":105,"title":{},"body":{"classes/Animal.html":{}}}],["this.updategamestate",{"_index":284,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/PileService.html":{}}}],["those",{"_index":461,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["throw",{"_index":108,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["throws",{"_index":107,"title":{},"body":{"classes/Animal.html":{},"injectables/PileService.html":{}}}],["timestamp",{"_index":349,"title":{},"body":{"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{}}}],["title",{"_index":140,"title":{},"body":{"components/AppComponent.html":{}}}],["top",{"_index":457,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["tort",{"_index":921,"title":{},"body":{"license.html":{}}}],["total",{"_index":600,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["tpiece",{"_index":575,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["track",{"_index":220,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["tracks",{"_index":608,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["transaction",{"_index":397,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["transactionstate",{"_index":503,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["tree",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["true",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"miscellaneous/variables.html":{}}}],["tsc",{"_index":621,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["tslib",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":202,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["two",{"_index":472,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":34,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":929,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":541,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["typically",{"_index":482,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["undefined",{"_index":241,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStatePatchService.html":{}}}],["undefined)).subscribe((gsp",{"_index":420,"title":{},"body":{"injectables/GameStateService.html":{}}}],["uninitialized",{"_index":427,"title":{},"body":{"injectables/GameStateService.html":{}}}],["unit",{"_index":840,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":623,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["until",{"_index":451,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["update",{"_index":558,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["updated",{"_index":468,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["updatedstate",{"_index":423,"title":{},"body":{"injectables/GameStateService.html":{}}}],["updategamestate",{"_index":229,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/PileService.html":{}}}],["updates",{"_index":401,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileService.html":{}}}],["updating",{"_index":538,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["use",{"_index":586,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":450,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["value",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":481,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["var",{"_index":155,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["variable",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":932,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":329,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{}}}],["vars",{"_index":571,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["version",{"_index":816,"title":{},"body":{"index.html":{},"properties.html":{}}}],["via",{"_index":474,"title":{},"body":{"injectables/GameStateStoreService.html":{},"index.html":{}}}],["void",{"_index":48,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["warranties",{"_index":906,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":902,"title":{},"body":{"license.html":{}}}],["waterelement",{"_index":83,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["ways",{"_index":473,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["whenever",{"_index":467,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["whether",{"_index":918,"title":{},"body":{"license.html":{}}}],["without",{"_index":98,"title":{},"body":{"classes/Animal.html":{},"license.html":{}}}],["zone.js",{"_index":773,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Animal.html":{"url":"classes/Animal.html","title":"class - Animal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Animal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/game/model/animal.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an animal owned by a player with inherent (printed on the card) and added elements.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addElement\n                            \n                            \n                                removeElement\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elements\n                                \n                                \n                                    kind\n                                \n                                \n                                    name\n                                \n                                \n                                    owner\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: AnimalState)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/model/animal.model.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        AnimalState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnimalState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/game/model/animal.model.ts:32\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addElement\n                        \n                    \n                \n            \n            \n                \naddElement(element: Piece)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/model/animal.model.ts:68\n                        \n                    \n\n\n            \n                \n                        Adds a new element to the animal, ensuring it does not exceed the limit of 6 elements.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            Piece\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to add.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeElement\n                        \n                    \n                \n            \n            \n                \nremoveElement(element: Piece)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/model/animal.model.ts:81\n                        \n                    \n\n\n            \n                \n                        Removes an added element from the animal.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            Piece\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to remove.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elements\n                    \n                \n\n                \n                    \n                        getelements()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:42\n                                \n                            \n                    \n                        \n                                Gets all elements of the animal, including both inherent and added ones.\n\n\n                                \n                                \n                                \n                                    Returns :         Piece[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        kind\n                    \n                \n\n                \n                    \n                        getkind()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:46\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:54\n                                \n                            \n                    \n                        \n                                Gets the name of the animal, based on its kind.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        owner\n                    \n                \n\n                \n                    \n                        getowner()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Player } from '../../engine/model/player.model';\nimport { FactionState } from '../../engine/model/faction.model';\nimport {Piece} from \"../../engine/model/piece.model\";\n\nexport type AnimalKind =\n  | 'amphibianAnimal'\n  | 'arachnidAnimal'\n  | 'birdAnimal'\n  | 'insectAnimal'\n  | 'mammalAnimal'\n  | 'reptileAnimal';\n\nexport const inherentElementKindByAnimalKind = new Map([\n  ['amphibianAnimal', 'waterElement'],\n  ['arachnidAnimal', 'grubElement'],\n  ['birdAnimal', 'seedElement'],\n  ['insectAnimal', 'grassElement'],\n  ['mammalAnimal', 'meatElement'],\n  ['reptileAnimal', 'sunElement'],\n] as const);\n\nexport type AnimalState = FactionState & {\n  kind: AnimalKind;\n  inherentElements: Piece[];\n  addedElements: Piece[];\n};\n\n/**\n * Represents an animal owned by a player with inherent (printed on the card) and added elements.\n */\nexport class Animal {\n  public state: AnimalState;\n\n  constructor(state: AnimalState) {\n    this.state = state;\n  }\n\n  /**\n   * Gets all elements of the animal, including both inherent and added ones.\n   * @returns A list of all elements.\n   */\n  get elements(): Piece[] {\n    return [...this.state.inherentElements, ...this.state.addedElements];\n  }\n\n  get kind(): AnimalKind {\n    return this.state.kind;\n  }\n\n  /**\n   * Gets the name of the animal, based on its kind.\n   * @returns The capitalized name of the animal without the \"AnimalModel\" suffix.\n   */\n  get name(): string {\n    const animalName = this.kind.replace('Animal', '');\n    return animalName.charAt(0).toUpperCase() + animalName.slice(1);\n  }\n\n  get owner(): Player {\n    return this.state.owner;\n  }\n\n  /**\n   * Adds a new element to the animal, ensuring it does not exceed the limit of 6 elements.\n   * @param element The element to add.\n   * @throws Will throw an error if the animal already has 6 elements.\n   */\n  addElement(element: Piece): void {\n    if (this.elements.length  addedElement.kind === element.kind,\n    );\n    if (elementIndex !== -1) {\n      this.state.addedElements.splice(elementIndex, 1);\n    } else {\n      throw new Error(\n        `${this.name} does not have element kind ${element.kind} as an added element.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                DrawPoolGameComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'dominant-species'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { DrawPoolGameComponent } from './game/component/draw-pool-game/draw-pool-game.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, DrawPoolGameComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'dominant-species';\n}\n\n    \n\n    \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DrawPoolGameComponent', 'selector': 'app-draw-pool-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DrawPoolGameComponent.html":{"url":"components/DrawPoolGameComponent.html","title":"component - DrawPoolGameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DrawPoolGameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/component/draw-pool-game/draw-pool-game.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-draw-pool-game\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatButton\n                            MatTooltip\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./draw-pool-game.component.html\n            \n\n\n\n            \n                styleUrl\n                ./draw-pool-game.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                drawPoolLength\n                            \n                            \n                                log\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createGame\n                            \n                            \n                                draw\n                            \n                            \n                                endTurn\n                            \n                            \n                                startTurn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gameManagementSvc: GameManagementService, gameStateSvc: GameStateService, drawPoolSvc: ElementDrawPoolService)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameManagementSvc\n                                                  \n                                                        \n                                                                        GameManagementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gameStateSvc\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        drawPoolSvc\n                                                  \n                                                        \n                                                                        ElementDrawPoolService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createGame\n                        \n                    \n                \n            \n            \n                \ncreateGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draw\n                        \n                    \n                \n            \n            \n                \ndraw()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endTurn\n                        \n                    \n                \n            \n            \n                \nendTurn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTurn\n                        \n                    \n                \n            \n            \n                \nstartTurn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        drawPoolLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { GameManagementService } from '../../../engine/service/game-management.service';\nimport { MatButton } from '@angular/material/button';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { GameStateService } from '../../../engine/service/game-state.service';\nimport { ElementDrawPoolService } from '../../service/element-draw-pool.service';\n\n@Component({\n  selector: 'app-draw-pool-game',\n  standalone: true,\n  imports: [MatButton, MatTooltip],\n  templateUrl: './draw-pool-game.component.html',\n  styleUrl: './draw-pool-game.component.scss',\n})\nexport class DrawPoolGameComponent {\n  drawPoolLength = 0;\n  log: string[] = [];\n  constructor(\n    private gameManagementSvc: GameManagementService,\n    private gameStateSvc: GameStateService,\n    private drawPoolSvc: ElementDrawPoolService,\n  ) {\n    this.drawPoolSvc.length$.subscribe((length) => {\n      this.drawPoolLength = length;\n    });\n  }\n\n  createGame(): void {\n    console.log('Create Game');\n    this.gameManagementSvc.createGame();\n  }\n\n  startTurn(): void {\n    console.log('Start Turn');\n    this.gameStateSvc.startTransaction();\n  }\n\n  draw(): void {\n    const item = this.drawPoolSvc.pull();\n    if (item[0]) {\n      let element = item[0].kind.replace('Element', '');\n      element = element.charAt(0).toUpperCase() + element.slice(1);\n      this.log.push(`You drew a ${element}`);\n    } else {\n      this.log.push('Pile is empty!');\n    }\n  }\n\n  endTurn(): void {\n    console.log('End Turn');\n    this.gameStateSvc.commitTransaction();\n  }\n}\n\n    \n\n    \n        \n  \n    Initialize\n    Start Turn\n    Draw!\n    End Turn\n  \n  \n    Draw Pool: {{ drawPoolLength }}\n    \n      \n        @for (line of log; track $index) {\n          {{ line }}\n        }\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Initialize    Start Turn    Draw!    End Turn        Draw Pool: {{ drawPoolLength }}                  @for (line of log; track $index) {          {{ line }}        }            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DrawPoolGameComponent', 'selector': 'app-draw-pool-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DrawPoolGameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ElementDrawPoolService.html":{"url":"injectables/ElementDrawPoolService.html","title":"injectable - ElementDrawPoolService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ElementDrawPoolService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/game/service/element-draw-pool.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                elementPile\n                            \n                            \n                                length$\n                            \n                            \n                                    Private\n                                lengthSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                initialize\n                            \n                            \n                                pull\n                            \n                            \n                                put\n                            \n                            \n                                    Private\n                                updateGameState\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    drawPool\n                                \n                                \n                                    length\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateSvc: GameStateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/service/element-draw-pool.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateSvc\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/service/element-draw-pool.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pull\n                        \n                    \n                \n            \n            \n                \npull(count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/service/element-draw-pool.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     []\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(elements: Piece[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/service/element-draw-pool.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                elements\n                                            \n                                                            Piece[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateGameState\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateGameState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/service/element-draw-pool.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elementPile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Pile | undefined\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in src/app/game/service/element-draw-pool.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.lengthSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/game/service/element-draw-pool.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        lengthSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(0)\n                    \n                \n                    \n                        \n                                Defined in src/app/game/service/element-draw-pool.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        drawPool\n                    \n                \n\n                \n                    \n                        getdrawPool()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/service/element-draw-pool.service.ts:19\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/service/element-draw-pool.service.ts:43\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Pile } from '../../engine/model/pile.model';\nimport { dsPieceKind} from '../dominant-species.constants';\nimport { GameStateService } from '../../engine/service/game-state.service';\nimport { BehaviorSubject, map, Observable } from 'rxjs';\nimport {defaultPieceFactory, Piece} from \"../../engine/model/piece.model\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ElementDrawPoolService {\n  private lengthSubject = new BehaviorSubject(0);\n  length$: Observable = this.lengthSubject.asObservable();\n  private elementPile: Pile | undefined = undefined;\n  constructor(private gameStateSvc: GameStateService) {\n    this.initialize();\n  }\n\n  private get drawPool(): Pile {\n    if (!this.elementPile) {\n      throw new Error('Element pile has not been initialized.');\n    }\n    return this.elementPile;\n  }\n\n  private initialize() {\n    this.gameStateSvc.pile$\n      .pipe(\n        map((pileStates) =>\n          pileStates.find((pileState) => pileState.kind === (dsPieceKind.ELEMENT as string)),\n        ),\n      )\n      .subscribe((drawPileState) => {\n        if (drawPileState) {\n          this.elementPile = new Pile(drawPileState, defaultPieceFactory);\n          this.lengthSubject.next(this.elementPile.length);\n        } else {\n          throw new Error('GameState does not include a state element for the ElementDrawPool');\n        }\n      });\n  }\n\n  get length(): number {\n    return this.drawPool.length;\n  }\n\n  private updateGameState(): void {\n    if (this.elementPile) {\n      this.lengthSubject.next(this.elementPile.length);\n      this.gameStateSvc.setPile(this.elementPile.state);\n    } else {\n      throw new Error(\"elementPile doesn't have state!\");\n    }\n  }\n\n  pull(count = 1): (Piece | null)[] {\n    this.gameStateSvc.requireTransaction();\n    const items = this.drawPool.pull(count);\n    this.updateGameState();\n    return items;\n  }\n\n  put(elements: Piece[]): void {\n    this.gameStateSvc.requireTransaction();\n    this.drawPool.put(elements);\n    this.updateGameState();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FactionState.html":{"url":"interfaces/FactionState.html","title":"interface - FactionState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FactionState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/faction.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            GameStateElement\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            owner\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        owner\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        owner:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Player } from './player.model';\nimport { GameStateElement } from './game-state.model';\n\nexport interface FactionState extends GameStateElement {\n  owner: Player;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameManagementService.html":{"url":"injectables/GameManagementService.html","title":"injectable - GameManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-management.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateService: GameStateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-management.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateService\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createGame\n                        \n                    \n                \n            \n            \n                \ncreateGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-management.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateService } from './game-state.service';\nimport { deepClone } from 'fast-json-patch';\nimport { baseGameState } from '../../game/dominant-species.constants';\nimport { GameState } from '../model/game-state.model';\nimport { Animal } from '../../game/model/animal.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameManagementService {\n  constructor(private gameStateService: GameStateService) {}\n\n  createGame(): void {\n    const gameState = deepClone(baseGameState) as GameState;\n    gameState.faction = [\n      {\n        owner: {\n          id: 'test1',\n          name: 'Tester1',\n        },\n        kind: 'birdAnimal',\n      } as Animal,\n      {\n        owner: {\n          id: 'test2',\n          name: 'Tester2',\n        },\n        kind: 'mammalAnimal',\n      } as Animal,\n    ];\n    this.gameStateService.initializeGameState(gameState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameState.html":{"url":"interfaces/GameState.html","title":"interface - GameState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining the GameState object managed by GameStateStoreService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            faction\n                                        \n                                \n                                \n                                        \n                                            pile\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        faction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        faction:         FactionState[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FactionState[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pile:         PileState[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PileState[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FactionState } from './faction.model';\nimport { PileState } from './pile.model';\n\n/**\n * Defining the GameState object managed by GameStateStoreService\n */\nexport interface GameState {\n  faction: FactionState[];\n  pile: PileState[];\n}\n\n/**\n * GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\n * An example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\n * This object defining the state would be of type GameStateElement.\n */\nexport interface GameStateElement {\n  kind: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateClientService.html":{"url":"injectables/GameStateClientService.html","title":"injectable - GameStateClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendGspToBackend\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gsp$\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendGspToBackend\n                        \n                    \n                \n            \n            \n                \nsendGspToBackend(gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-client.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gsp$\n                    \n                \n\n                \n                    \n                        getgsp$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-client.service.ts:13\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { of, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateClientService {\n  sendGspToBackend(gsp: GameStatePatch): void {\n    console.log(JSON.stringify(gsp));\n  }\n\n  get gsp$(): Observable {\n    return of(undefined);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameStateElement.html":{"url":"interfaces/GameStateElement.html","title":"interface - GameStateElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameStateElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state.model.ts\n        \n\n\n            \n                Description\n            \n            \n                GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\nAn example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\nThis object defining the state would be of type GameStateElement.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            kind\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        kind\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        kind:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FactionState } from './faction.model';\nimport { PileState } from './pile.model';\n\n/**\n * Defining the GameState object managed by GameStateStoreService\n */\nexport interface GameState {\n  faction: FactionState[];\n  pile: PileState[];\n}\n\n/**\n * GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\n * An example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\n * This object defining the state would be of type GameStateElement.\n */\nexport interface GameStateElement {\n  kind: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameStatePatch.html":{"url":"interfaces/GameStatePatch.html","title":"interface - GameStatePatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameStatePatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state-patch.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            patch\n                                        \n                                \n                                \n                                        \n                                            timeStamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        patch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        patch:     Operation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Operation[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeStamp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Operation } from 'fast-json-patch';\n\nexport interface GameStatePatch {\n  timeStamp: number;\n  patch: Operation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStatePatchService.html":{"url":"injectables/GameStatePatchService.html","title":"injectable - GameStatePatchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStatePatchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-patch.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Creates and applies GameStatePatches\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                apply\n                            \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        apply\n                        \n                    \n                \n            \n            \n                \napply(gameState: GameState, gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-patch.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gameState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GameState\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(oldState: GameState, newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-patch.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GameStatePatch\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameState } from '../model/game-state.model';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { applyPatch, compare } from 'fast-json-patch';\n\n/**\n * Creates and applies GameStatePatches\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStatePatchService {\n  create(oldState: GameState, newState: GameState): GameStatePatch {\n    return {\n      timeStamp: Date.now(),\n      patch: compare(oldState, newState),\n    };\n  }\n\n  apply(gameState: GameState, gsp: GameStatePatch): GameState {\n    return applyPatch(gameState, gsp.patch, undefined, false).newDocument;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateService.html":{"url":"injectables/GameStateService.html","title":"injectable - GameStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The GameStateService provides an interface for the rest of the system to interact with state.\nIt does this by orchestrating the various other GameState related services.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyGsp\n                            \n                            \n                                commitTransaction\n                            \n                            \n                                initializeGameState\n                            \n                            \n                                requireTransaction\n                            \n                            \n                                rollbackTransaction\n                            \n                            \n                                setFaction\n                            \n                            \n                                setPile\n                            \n                            \n                                startTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    faction$\n                                \n                                \n                                    pile$\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateStore: GameStateStoreService, gspService: GameStatePatchService, gameStateClient: GameStateClientService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-state.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateStore\n                                                  \n                                                        \n                                                                        GameStateStoreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gspService\n                                                  \n                                                        \n                                                                        GameStatePatchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gameStateClient\n                                                  \n                                                        \n                                                                        GameStateClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyGsp\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyGsp(gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \ncommitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializeGameState\n                        \n                    \n                \n            \n            \n                \ninitializeGameState(gameState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gameState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requireTransaction\n                        \n                    \n                \n            \n            \n                \nrequireTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Will throw error if there is not a transaction in progress. Call before state updates that require a transaction.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \nrollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFaction\n                        \n                    \n                \n            \n            \n                \nsetFaction(newState: FactionState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            FactionState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPile\n                        \n                    \n                \n            \n            \n                \nsetPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTransaction\n                        \n                    \n                \n            \n            \n                \nstartTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        faction$\n                    \n                \n\n                \n                    \n                        getfaction$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state.service.ts:74\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pile$\n                    \n                \n\n                \n                    \n                        getpile$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state.service.ts:82\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateStoreService } from './game-state-store.service';\nimport { GameStatePatchService } from './game-state-patch.service';\nimport { GameStateClientService } from './game-state-client.service';\nimport { filter, Observable } from 'rxjs';\nimport { FactionState } from '../model/faction.model';\nimport { PileState } from '../model/pile.model';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { GameState } from '../model/game-state.model';\n\n/**\n * The GameStateService provides an interface for the rest of the system to interact with state.\n * It does this by orchestrating the various other GameState related services.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateService {\n  constructor(\n    private gameStateStore: GameStateStoreService,\n    private gspService: GameStatePatchService,\n    private gameStateClient: GameStateClientService,\n  ) {\n    this.gameStateClient.gsp$.pipe(filter((gsp) => gsp != undefined)).subscribe((gsp) => {\n      this.applyGsp(gsp);\n    });\n  }\n\n  private applyGsp(gsp: GameStatePatch): void {\n    if (this.gameStateStore.gameState) {\n      const updatedState = this.gspService.apply(this.gameStateStore.gameState, gsp);\n      this.gameStateStore.setGameState(updatedState);\n    } else {\n      throw new Error(\"Can't apply a GSP to an uninitialized GameStateStore.\");\n    }\n  }\n\n  initializeGameState(gameState: GameState): void {\n    this.gameStateStore.initializeGameState(gameState);\n  }\n\n  startTransaction(): void {\n    this.gameStateStore.startTransaction();\n  }\n\n  commitTransaction(): void {\n    if (!this.gameStateStore.gameState) {\n      throw new Error('GameStateStore uninitialized');\n    } else if (!this.gameStateStore.transactionState) {\n      throw new Error('No transaction in progress to commit');\n    } else {\n      const gsp = this.gspService.create(\n        this.gameStateStore.gameState,\n        this.gameStateStore.transactionState,\n      );\n      this.gameStateStore.commitTransaction();\n      this.gameStateClient.sendGspToBackend(gsp);\n    }\n  }\n\n  rollbackTransaction(): void {\n    this.gameStateStore.rollbackTransaction();\n  }\n\n  /**\n   * Will throw error if there is not a transaction in progress. Call before state updates that require a transaction.\n   */\n  requireTransaction(): void {\n    if (!this.gameStateStore.transactionState) {\n      throw new Error('Transaction has not been started.');\n    }\n  }\n\n  get faction$(): Observable {\n    return this.gameStateStore.faction$;\n  }\n\n  setFaction(newState: FactionState): void {\n    this.gameStateStore.setFaction(newState);\n  }\n\n  get pile$(): Observable {\n    return this.gameStateStore.pile$;\n  }\n\n  setPile(newState: PileState): void {\n    this.gameStateStore.setPile(newState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateStoreService.html":{"url":"injectables/GameStateStoreService.html","title":"injectable - GameStateStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-store.service.ts\n        \n\n\n            \n                Description\n            \n            \n                GameStateStoreService is responsible for maintain the GameState and making it accessible to others.\nA GameStateStoreService cannot be used until the initializeGameState method is called an initial GameState is passed in.\nThe GameState has several top level keys, and GameStateStoreService provides observables for each of those keys.\nSo if someone was interested in the faction key, then they could subscribe to the faction$ observable.\nA value will be emitted on each observable whenever the GameState is updated, regardless of if the particular key has been updated.\nThe GameState can be updated in one of two ways:\n1.) Via the setGameState method which will takes an entire GameState object and overwrites the previous GameState object. All observables\nwill then emit the values from the new GameState object. This method is typically used when the GameState is updated based on a received GSP.\n2.) Via a transaction, which is typically done via actions taken during a turn. In this case, the startTransaction method is called and\nthe state is updated via calling one or more set methods (such as setFaction) and then calling commitTransaction or rollbackTransaction.\nIn Either case, all observables will then emit the values from the new GameState object. This is to ensure that all local objects have the\ncurrent GameState.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _gameState\n                            \n                            \n                                    Private\n                                _transactionState\n                            \n                            \n                                    Private\n                                gameStateSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _setGameState\n                            \n                            \n                                commitTransaction\n                            \n                            \n                                    Private\n                                getObservableForKey\n                            \n                            \n                                initializeGameState\n                            \n                            \n                                rollbackTransaction\n                            \n                            \n                                setFaction\n                            \n                            \n                                setGameState\n                            \n                            \n                                setPile\n                            \n                            \n                                    Private\n                                setTransactionStateElement\n                            \n                            \n                                startTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gameState\n                                \n                                \n                                    transactionState\n                                \n                                \n                                    faction$\n                                \n                                \n                                    pile$\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-state-store.service.ts:33\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _setGameState\n                        \n                    \n                \n            \n            \n                \n                        \n                    _setGameState(newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \ncommitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getObservableForKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getObservableForKey(selector: (state: GameState) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:39\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializeGameState\n                        \n                    \n                \n            \n            \n                \ninitializeGameState(gameState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gameState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \nrollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFaction\n                        \n                    \n                \n            \n            \n                \nsetFaction(newState: FactionState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            FactionState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGameState\n                        \n                    \n                \n            \n            \n                \nsetGameState(newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPile\n                        \n                    \n                \n            \n            \n                \nsetPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setTransactionStateElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    setTransactionStateElement(key, newState: GameStateElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newState\n                                            \n                                                            GameStateElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTransaction\n                        \n                    \n                \n            \n            \n                \nstartTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _gameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _transactionState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        gameStateSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:33\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gameState\n                    \n                \n\n                \n                    \n                        getgameState()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:62\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        transactionState\n                    \n                \n\n                \n                    \n                        gettransactionState()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:70\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        faction$\n                    \n                \n\n                \n                    \n                        getfaction$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:128\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pile$\n                    \n                \n\n                \n                    \n                        getpile$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:136\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PileState } from '../model/pile.model';\nimport { BehaviorSubject, filter, map, Observable } from 'rxjs';\nimport { FactionState } from '../model/faction.model';\nimport { GameState, GameStateElement } from '../model/game-state.model';\nimport { Injectable } from '@angular/core';\nimport { deepClone } from 'fast-json-patch';\n\n/**\n * GameStateStoreService is responsible for maintain the GameState and making it accessible to others.\n *\n * A GameStateStoreService cannot be used until the initializeGameState method is called an initial GameState is passed in.\n *\n * The GameState has several top level keys, and GameStateStoreService provides observables for each of those keys.\n * So if someone was interested in the faction key, then they could subscribe to the faction$ observable.\n * A value will be emitted on each observable whenever the GameState is updated, regardless of if the particular key has been updated.\n *\n * The GameState can be updated in one of two ways:\n *\n * 1.) Via the setGameState method which will takes an entire GameState object and overwrites the previous GameState object. All observables\n * will then emit the values from the new GameState object. This method is typically used when the GameState is updated based on a received GSP.\n *\n * 2.) Via a transaction, which is typically done via actions taken during a turn. In this case, the startTransaction method is called and\n * the state is updated via calling one or more set methods (such as setFaction) and then calling commitTransaction or rollbackTransaction.\n * In Either case, all observables will then emit the values from the new GameState object. This is to ensure that all local objects have the\n * current GameState.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateStoreService {\n  private _gameState: GameState | null = null;\n  private _transactionState: GameState | null = null;\n  private gameStateSubject: BehaviorSubject;\n\n  constructor() {\n    this.gameStateSubject = new BehaviorSubject(this._gameState);\n  }\n\n  private getObservableForKey(selector: (state: GameState) => T): Observable {\n    return this.gameStateSubject.asObservable().pipe(\n      filter((gameState) => gameState != null),\n      map((gameState) => {\n        return selector(gameState);\n      }),\n    );\n  }\n\n  private setTransactionStateElement(key: keyof GameState, newState: GameStateElement): void {\n    if (!this._transactionState) {\n      throw new Error('Must start transaction before updating GameState.');\n    }\n    const subStateArray = this._transactionState[key] as (typeof newState)[];\n    const index = subStateArray.findIndex((item) => item.kind === newState.kind);\n\n    if (index > -1) {\n      subStateArray[index] = newState;\n    } else {\n      subStateArray.push(newState);\n    }\n  }\n\n  get gameState(): GameState | null {\n    if (this._gameState) {\n      return deepClone(this._gameState) as GameState;\n    } else {\n      return null;\n    }\n  }\n\n  get transactionState(): GameState | null {\n    if (this._transactionState) {\n      return deepClone(this._transactionState) as GameState;\n    } else {\n      return null;\n    }\n  }\n\n  private _setGameState(newState: GameState) {\n    this._gameState = newState;\n    this.gameStateSubject.next(this.gameState);\n  }\n\n  initializeGameState(gameState: GameState): void {\n    if (!this._gameState) {\n      this._setGameState(gameState);\n    } else {\n      throw new Error('GameState all ready initialized.');\n    }\n  }\n\n  setGameState(newState: GameState) {\n    if (!this._gameState) {\n      throw new Error('GameState must be initialized before it can be set.');\n    } else if (this._transactionState) {\n      throw new Error('GameState can not be set during a transaction.');\n    } else {\n      this._setGameState(newState);\n    }\n  }\n\n  startTransaction(): void {\n    if (!this._transactionState) {\n      this._transactionState = deepClone(this._gameState) as GameState;\n    } else {\n      throw new Error(\"Can't start transaction as one already in progress.\");\n    }\n  }\n\n  commitTransaction(): void {\n    if (this._transactionState) {\n      this._setGameState(this._transactionState);\n      this._transactionState = null;\n    } else {\n      throw new Error('No transaction in progress to commit');\n    }\n  }\n\n  rollbackTransaction(): void {\n    if (this._transactionState) {\n      this._transactionState = null;\n      // Ensures gameState is a new object so that subscribers can detect the update\n      this._setGameState(deepClone(this._gameState) as GameState);\n    } else {\n      throw new Error('No transaction in progress to rollback');\n    }\n  }\n\n  get faction$(): Observable {\n    return this.getObservableForKey((gameState) => gameState.faction);\n  }\n\n  setFaction(newState: FactionState): void {\n    this.setTransactionStateElement('faction', newState);\n  }\n\n  get pile$(): Observable {\n    return this.getObservableForKey((gameState) => gameState.pile);\n  }\n\n  setPile(newState: PileState): void {\n    this.setTransactionStateElement('pile', newState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Piece.html":{"url":"interfaces/Piece.html","title":"interface - Piece","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Piece\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/piece.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            kind\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        kind\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        kind:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Piece {\n  kind: string;\n}\n\nexport type PieceFactory = (kind: string) => Piece;\n\nexport function defaultPieceFactory(kind: string): Piece {\n  return { kind: kind }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Pile.html":{"url":"classes/Pile.html","title":"class - Pile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Pile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/pile.model.ts\n        \n\n\n            \n                Description\n            \n            \n                A Pile is used to draw one or more random pieces for a defined pool of pieces.\nA Pile has two Type Vars needed to be set when it's instantiated:\nTpiece Kind A type var used to set the kinds of Pieces the Pipe can contain and\nTpiece A type var used to set the type of Piece the Pile creates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _state\n                            \n                            \n                                    Private\n                                    Readonly\n                                pieceFactory\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                pull\n                            \n                            \n                                put\n                            \n                            \n                                setState\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                                \n                                    state\n                                \n                                \n                                    kind\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: PileState, pieceFactory: PieceFactory)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/model/pile.model.ts:24\n                            \n                        \n\n                \n                    \n                            Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\nthe pile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        PileState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An object that acts as the definition for the pool of pieces the Pile represents.\nEach key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\nthe pile.\n\n                                                        \n                                                \n                                                \n                                                        pieceFactory\n                                                  \n                                                        \n                                                                        PieceFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A factory function use to build the random selected piece.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PileState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        pieceFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PieceFactory\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:23\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        pull\n                        \n                    \n                \n            \n            \n                \npull(count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:65\n                        \n                    \n\n\n            \n                \n                        will be returned for any piece drawn while the pile is empty.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                            \n                                                    The number of pieces to draw from the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     []\n\n                        \n                            \n                                An array where each member represents the piece that was drawn. A null\nwill be returned for any piece drawn while the pile is empty.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(pieces: Piece[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pieces\n                                            \n                                                            Piece[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An array of pieces to add to the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setState\n                        \n                    \n                \n            \n            \n                \nsetState(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:41\n                                \n                            \n                    \n                        \n                                Returns the total number of pieces in the pile.\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:48\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        kind\n                    \n                \n\n                \n                    \n                        getkind()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:52\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {defaultPieceFactory, Piece, PieceFactory} from './piece.model';\nimport {GameStateElement} from './game-state.model';\nimport {deepClone} from \"fast-json-patch\";\n\n/**\n * PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n */\nexport interface PileState extends GameStateElement {\n  inventory: Record;\n}\n\n\n/**\n * A Pile is used to draw one or more random pieces for a defined pool of pieces.\n * A Pile has two Type Vars needed to be set when it's instantiated:\n *\n * **Tpiece** Kind A type var used to set the kinds of Pieces the Pipe can contain and\n *\n * **Tpiece** A type var used to set the type of Piece the Pile creates\n *\n */\nexport class Pile {\n  private readonly pieceFactory: PieceFactory;\n  private _state: PileState;\n\n\n  /**\n   * @param state An object that acts as the definition for the pool of pieces the Pile represents.\n   * Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\n   * the pile.\n   * @param pieceFactory A factory function use to build the random selected piece.\n   */\n  constructor(state: PileState, pieceFactory: PieceFactory = defaultPieceFactory) {\n    this._state = state;\n    this.pieceFactory = pieceFactory;\n  }\n\n  /**\n   * Returns the total number of pieces in the pile.\n   */\n  get length(): number {\n    return Object.keys(this._state.inventory).reduce(\n      (sum, key) => sum + (this._state.inventory[key] ?? 0),\n      0,\n    );\n  }\n\n  get state(): PileState {\n    return deepClone(this._state) as PileState;\n  }\n\n  get kind(): string {\n    return this._state.kind\n  }\n\n  setState(newState: PileState) {\n    this._state = newState;\n  }\n\n  /**\n   * @param count The number of pieces to draw from the pile.\n   * @returns An array where each member represents the piece that was drawn. A `null`\n   * will be returned for any piece drawn while the pile is empty.\n   */\n  pull(count = 1): (Piece | null)[] {\n    const pieces: (Piece | null)[] = [];\n    for (let i = 0; i  {\n        /** this.pieceCounts.get(key) will always return a value, but TSC complains it could be unknown. */\n        const pieceCount = this._state.inventory[key] ?? 0;\n        return pieceCount > 0;\n      });\n\n      if (piecesWithCount.length) {\n        const kind = piecesWithCount[Math.floor(Math.random() * piecesWithCount.length)];\n        const currentCount = this._state.inventory[kind] ?? 0;\n        pieces.push(this.pieceFactory(kind));\n        this._state.inventory[kind] = currentCount - 1;\n      } else {\n        pieces.push(null);\n      }\n    }\n    return pieces;\n  }\n\n  /**\n   * @param pieces An array of pieces to add to the pile.\n   */\n  put(pieces: Piece[]): void {\n    for (const piece of pieces) {\n      // Assume the current count is 0 if the piece is not yet in the inventory\n      const currentItemCount = this._state.inventory[piece.kind] || 0;\n      this._state.inventory[piece.kind] = currentItemCount + 1;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PileService.html":{"url":"injectables/PileService.html","title":"injectable - PileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/pile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                kindToLengthObservables\n                            \n                            \n                                    Private\n                                kindToLengthSubjects\n                            \n                            \n                                    Private\n                                kindToPile\n                            \n                            \n                                    Private\n                                registeredPileKinds\n                            \n                            \n                                registeredPiles$\n                            \n                            \n                                    Private\n                                registeredPilesSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitLength\n                            \n                            \n                                    Private\n                                getPile\n                            \n                            \n                                    Private\n                                initialize\n                            \n                            \n                                pull\n                            \n                            \n                                put\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                updateGameState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateSvc: GameStateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/pile.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructs the PileService and initializes the state by subscribing to the game state.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateSvc\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The service that provides the current game state.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emitLength\n                        \n                    \n                \n            \n            \n                \n                        \n                    emitLength(pile: Pile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Emits the current length of the specified pile.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pile\n                                            \n                                                            Pile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The pile for which to emit the length.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPile(kind: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Retrieves the pile for the given kind.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The kind of the pile to retrieve.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Pile\n\n                        \n                            \n                                The pile corresponding to the given kind.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Initializes the pile service by subscribing to pile state changes and setting\nthe state for each pile.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pull\n                        \n                    \n                \n            \n            \n                \npull(kind: string, count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Pulls a specified number of pieces from the pile of the given kind.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The kind of pile to pull pieces from.\n\n                                            \n                                        \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                            \n                                                    The number of pieces to pull. Defaults to 1.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     []\n\n                        \n                            \n                                An array of pieces pulled from the pile, or null values if the pile is empty.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(kind: string, pieces: Piece[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Puts the specified pieces into the pile of the given kind.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The kind of pile to put pieces into.\n\n                                            \n                                        \n                                        \n                                                pieces\n                                            \n                                                            Piece[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The pieces to put into the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(pile: Pile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:97\n                        \n                    \n\n\n            \n                \n                        Registers a new pile with the service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pile\n                                            \n                                                            Pile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The pile to register.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateGameState\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateGameState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Updates the game state by setting the state for all registered piles and emitting\ntheir lengths.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        kindToLengthObservables\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map>()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:23\n                        \n                    \n\n            \n                \n                    Returns a map with a key for each registered pile and the value being an Observable emitting the length of the respective pile.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kindToLengthSubjects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map>()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kindToPile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registeredPileKinds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Set\n\n                    \n                \n                \n                    \n                        Default value : new Set()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registeredPiles$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.registeredPilesSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:19\n                        \n                    \n\n            \n                \n                    Subscribers can use this Observable to determine if the pile they have been interested has been registered. Once the pile is registered,\nthen the subscriber can subscribe to other Observables, such as those made available in kindToLengthObservables\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registeredPilesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject>(new Set())\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateService } from \"./game-state.service\";\nimport { Pile } from \"../model/pile.model\";\nimport { Piece } from \"../model/piece.model\";\nimport { BehaviorSubject, distinctUntilChanged, Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PileService {\n  private kindToPile: Map = new Map();\n  private registeredPileKinds: Set = new Set();\n  private registeredPilesSubject = new BehaviorSubject>(new Set());\n  private kindToLengthSubjects: Map> = new Map>();\n  /**\n   * Subscribers can use this Observable to determine if the pile they have been interested has been registered. Once the pile is registered,\n   * then the subscriber can subscribe to other Observables, such as those made available in kindToLengthObservables\n   */\n  registeredPiles$: Observable> = this.registeredPilesSubject.asObservable();\n  /**\n   * Returns a map with a key for each registered pile and the value being an Observable emitting the length of the respective pile.\n   */\n  kindToLengthObservables: Map> = new Map>();\n\n\n  /**\n   * Constructs the PileService and initializes the state by subscribing to the game state.\n   * @param gameStateSvc The service that provides the current game state.\n   */\n  constructor(private gameStateSvc: GameStateService) {\n    this.initialize();\n  }\n\n  /**\n   * Initializes the pile service by subscribing to pile state changes and setting\n   * the state for each pile.\n   * @private\n   */\n  private initialize(): void {\n    this.gameStateSvc.pile$.subscribe((pileStates) => {\n      pileStates.forEach((pileState) => {\n        const pile = this.getPile(pileState.kind);\n        pile.setState(pileState);\n        this.emitLength(pile);\n      });\n    });\n  }\n\n  /**\n   * Emits the current length of the specified pile.\n   * @param pile The pile for which to emit the length.\n   * @throws Will throw an error if the length subject for the pile kind is not found.\n   * @private\n   */\n  private emitLength(pile: Pile): void {\n    const lengthSubject = this.kindToLengthSubjects.get(pile.kind);\n    if (lengthSubject) {\n      lengthSubject.next(pile.length);\n    } else {\n      throw new Error(`Unable to find lengthSubject for pile kind ${pile.kind}`);\n    }\n  }\n\n  /**\n   * Updates the game state by setting the state for all registered piles and emitting\n   * their lengths.\n   * @private\n   */\n  private updateGameState(): void {\n    for (const pile of this.kindToPile.values()) {\n      this.gameStateSvc.setPile(pile.state);\n      this.emitLength(pile);\n    }\n  }\n\n  /**\n   * Retrieves the pile for the given kind.\n   * @param kind The kind of the pile to retrieve.\n   * @returns The pile corresponding to the given kind.\n   * @throws Will throw an error if the pile for the given kind is not registered.\n   * @private\n   */\n  private getPile(kind: string): Pile {\n    const pile = this.kindToPile.get(kind);\n    if (!pile) {\n      throw new Error(`Pile for kind ${kind} is not registered.`);\n    } else {\n      return pile;\n    }\n  }\n\n  /**\n   * Registers a new pile with the service.\n   * @param pile The pile to register.\n   * @throws Will throw an error if the pile is already registered.\n   */\n  register(pile: Pile): void {\n    if (!this.registeredPileKinds.has(pile.kind)) {\n      this.kindToPile.set(pile.kind, pile);\n      this.registeredPileKinds.add(pile.kind);\n      const lengthSubject = new BehaviorSubject(pile.length);\n      this.kindToLengthSubjects.set(pile.kind, lengthSubject);\n      this.kindToLengthObservables.set(pile.kind, lengthSubject.asObservable().pipe(distinctUntilChanged()));\n      this.updateGameState();\n    } else {\n      throw new Error(`Pile for kind ${pile.kind} already registered.`);\n    }\n  }\n\n  /**\n   * Pulls a specified number of pieces from the pile of the given kind.\n   * @param kind The kind of pile to pull pieces from.\n   * @param count The number of pieces to pull. Defaults to 1.\n   * @returns An array of pieces pulled from the pile, or null values if the pile is empty.\n   */\n  pull(kind: string, count = 1): (Piece | null)[] {\n    this.gameStateSvc.requireTransaction();\n    const pile = this.getPile(kind);\n    const pieces = pile.pull(count);\n    this.updateGameState();\n    return pieces;\n  }\n\n  /**\n   * Puts the specified pieces into the pile of the given kind.\n   * @param kind The kind of pile to put pieces into.\n   * @param pieces The pieces to put into the pile.\n   */\n  put(kind: string, pieces: Piece[]): void {\n    this.gameStateSvc.requireTransaction();\n    const pile = this.getPile(kind);\n    pile.put(pieces);\n    this.updateGameState();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PileState.html":{"url":"interfaces/PileState.html","title":"interface - PileState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PileState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/pile.model.ts\n        \n\n\n            \n                Description\n            \n            \n                PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n\n            \n\n            \n                Extends\n            \n            \n                            GameStateElement\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            inventory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inventory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inventory:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {defaultPieceFactory, Piece, PieceFactory} from './piece.model';\nimport {GameStateElement} from './game-state.model';\nimport {deepClone} from \"fast-json-patch\";\n\n/**\n * PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n */\nexport interface PileState extends GameStateElement {\n  inventory: Record;\n}\n\n\n/**\n * A Pile is used to draw one or more random pieces for a defined pool of pieces.\n * A Pile has two Type Vars needed to be set when it's instantiated:\n *\n * **Tpiece** Kind A type var used to set the kinds of Pieces the Pipe can contain and\n *\n * **Tpiece** A type var used to set the type of Piece the Pile creates\n *\n */\nexport class Pile {\n  private readonly pieceFactory: PieceFactory;\n  private _state: PileState;\n\n\n  /**\n   * @param state An object that acts as the definition for the pool of pieces the Pile represents.\n   * Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\n   * the pile.\n   * @param pieceFactory A factory function use to build the random selected piece.\n   */\n  constructor(state: PileState, pieceFactory: PieceFactory = defaultPieceFactory) {\n    this._state = state;\n    this.pieceFactory = pieceFactory;\n  }\n\n  /**\n   * Returns the total number of pieces in the pile.\n   */\n  get length(): number {\n    return Object.keys(this._state.inventory).reduce(\n      (sum, key) => sum + (this._state.inventory[key] ?? 0),\n      0,\n    );\n  }\n\n  get state(): PileState {\n    return deepClone(this._state) as PileState;\n  }\n\n  get kind(): string {\n    return this._state.kind\n  }\n\n  setState(newState: PileState) {\n    this._state = newState;\n  }\n\n  /**\n   * @param count The number of pieces to draw from the pile.\n   * @returns An array where each member represents the piece that was drawn. A `null`\n   * will be returned for any piece drawn while the pile is empty.\n   */\n  pull(count = 1): (Piece | null)[] {\n    const pieces: (Piece | null)[] = [];\n    for (let i = 0; i  {\n        /** this.pieceCounts.get(key) will always return a value, but TSC complains it could be unknown. */\n        const pieceCount = this._state.inventory[key] ?? 0;\n        return pieceCount > 0;\n      });\n\n      if (piecesWithCount.length) {\n        const kind = piecesWithCount[Math.floor(Math.random() * piecesWithCount.length)];\n        const currentCount = this._state.inventory[kind] ?? 0;\n        pieces.push(this.pieceFactory(kind));\n        this._state.inventory[kind] = currentCount - 1;\n      } else {\n        pieces.push(null);\n      }\n    }\n    return pieces;\n  }\n\n  /**\n   * @param pieces An array of pieces to add to the pile.\n   */\n  put(pieces: Piece[]): void {\n    for (const piece of pieces) {\n      // Assume the current count is 0 if the piece is not yet in the inventory\n      const currentItemCount = this._state.inventory[piece.kind] || 0;\n      this._state.inventory[piece.kind] = currentItemCount + 1;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Player.html":{"url":"interfaces/Player.html","title":"interface - Player","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Player\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/player.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Player {\n  id: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/engine/model/faction.model.ts\n            \n            interface\n            FactionState\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state-patch.model.ts\n            \n            interface\n            GameStatePatch\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state.model.ts\n            \n            interface\n            GameState\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state.model.ts\n            \n            interface\n            GameStateElement\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/piece.model.ts\n            \n            interface\n            Piece\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/piece.model.ts\n            \n            function\n            defaultPieceFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/engine/model/pile.model.ts\n            \n            class\n            Pile\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/engine/model/pile.model.ts\n            \n            interface\n            PileState\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/player.model.ts\n            \n            interface\n            Player\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-management.service.ts\n            \n            injectable\n            GameManagementService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-client.service.ts\n            \n            injectable\n            GameStateClientService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-patch.service.ts\n            \n            injectable\n            GameStatePatchService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-store.service.ts\n            \n            injectable\n            GameStateStoreService\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state.service.ts\n            \n            injectable\n            GameStateService\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                src/app/engine/service/pile.service.ts\n            \n            injectable\n            PileService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/app/engine/util.ts\n            \n            function\n            deepCompare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/game/component/draw-pool-game/draw-pool-game.component.ts\n            \n            component\n            DrawPoolGameComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/game/dominant-species.constants.ts\n            \n            variable\n            baseGameState\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/game/model/animal.model.ts\n            \n            class\n            Animal\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/app/game/model/animal.model.ts\n            \n            variable\n            inherentElementKindByAnimalKind\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/game/service/element-draw-pool.service.ts\n            \n            injectable\n            ElementDrawPoolService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.2.0\n        \n            @angular/cdk : ^18.2.7\n        \n            @angular/common : ^18.2.0\n        \n            @angular/compiler : ^18.2.0\n        \n            @angular/core : ^18.2.0\n        \n            @angular/forms : ^18.2.0\n        \n            @angular/material : ^18.2.7\n        \n            @angular/platform-browser : ^18.2.0\n        \n            @angular/platform-browser-dynamic : ^18.2.0\n        \n            @angular/router : ^18.2.0\n        \n            fast-json-patch : ^3.1.1\n        \n            lodash : ^4.17.21\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.10\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dsPieceKind   (src/.../dominant-species.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/game/dominant-species.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        dsPieceKind\n                    \n                \n                        \n                            \n                                 ELEMENT\n                            \n                        \n                        \n                            \n                                Value : element\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_AMPHIBIAN\n                            \n                        \n                        \n                            \n                                Value : actionPawnAmphibian\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_ARACHNID\n                            \n                        \n                        \n                            \n                                Value : actionPawnArachnid\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_BIRD\n                            \n                        \n                        \n                            \n                                Value : actionPawnBird\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_INSECT\n                            \n                        \n                        \n                            \n                                Value : actionPawnInsect\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_MAMMAL\n                            \n                        \n                        \n                            \n                                Value : actionPawnMammal\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_REPTILE\n                            \n                        \n                        \n                            \n                                Value : actionPawnReptile\n                            \n                        \n                        \n                            \n                                 SPECIES_AMPHIBIAN\n                            \n                        \n                        \n                            \n                                Value : speciesAmphibian\n                            \n                        \n                        \n                            \n                                 SPECIES_ARACHNID\n                            \n                        \n                        \n                            \n                                Value : speciesArachnid\n                            \n                        \n                        \n                            \n                                 SPECIES_BIRD\n                            \n                        \n                        \n                            \n                                Value : speciesBird\n                            \n                        \n                        \n                            \n                                 SPECIES_INSECT\n                            \n                        \n                        \n                            \n                                Value : speciesInsect\n                            \n                        \n                        \n                            \n                                 SPECIES_MAMMAL\n                            \n                        \n                        \n                            \n                                Value : speciesMammal\n                            \n                        \n                        \n                            \n                                 SPECIES_REPTILE\n                            \n                        \n                        \n                            \n                                Value : speciesReptile\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            deepCompare   (src/.../util.ts)\n                        \n                        \n                            defaultPieceFactory   (src/.../piece.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/engine/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deepCompare\n                        \n                    \n                \n            \n            \n                \ndeepCompare(object1, object2)\n                \n            \n\n\n\n\n            \n                \n                        Used to determine if two objects are equal. Often used in distinctUntilChanged().\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                object1\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                object2\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/app/engine/model/piece.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultPieceFactory\n                        \n                    \n                \n            \n            \n                \ndefaultPieceFactory(kind: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Piece\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDominantSpecies\nThis project was generated with Angular CLI version 18.2.5.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 Joe K.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnimalKind   (src/.../animal.model.ts)\n                        \n                        \n                            AnimalState   (src/.../animal.model.ts)\n                        \n                        \n                            PieceFactory   (src/.../piece.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/game/model/animal.model.ts\n    \n    \n        \n            \n                \n                    \n                    AnimalKind\n                \n            \n            \n                \n                            \"amphibianAnimal\" | \"arachnidAnimal\" | \"birdAnimal\" | \"insectAnimal\" | \"mammalAnimal\" | \"reptileAnimal\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AnimalState\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/engine/model/piece.model.ts\n    \n    \n        \n            \n                \n                    \n                    PieceFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            baseGameState   (src/.../dominant-species.constants.ts)\n                        \n                        \n                            inherentElementKindByAnimalKind   (src/.../animal.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideAnimationsAsync('noop'),\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/app/game/dominant-species.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        baseGameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState\n\n                    \n                \n                \n                    \n                        Default value : {\n  faction: [],\n  pile: [\n    {\n      kind: dsPieceKind.ELEMENT as string,\n      inventory: {\n        // 20 Elements each, with 2 being places on Earth, leaving 18 in the bag\n        grassElement: 18,\n        grubElement: 18,\n        meatElement: 18,\n        seedElement: 18,\n        sunElement: 18,\n        waterElement: 18,\n      },\n    },\n  ],\n}\n                    \n                \n\n            \n                \n                    GameState defining the static elements of the DS game\n\n                \n            \n\n        \n    \n\n    src/app/game/model/animal.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        inherentElementKindByAnimalKind\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map([\n  ['amphibianAnimal', 'waterElement'],\n  ['arachnidAnimal', 'grubElement'],\n  ['birdAnimal', 'seedElement'],\n  ['insectAnimal', 'grassElement'],\n  ['mammalAnimal', 'meatElement'],\n  ['reptileAnimal', 'sunElement'],\n] as const)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
