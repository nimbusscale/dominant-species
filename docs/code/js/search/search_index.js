var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Animal.html",[0,0.663,1,1.817]],["body/classes/Animal.html",[0,0.465,1,3.301,2,1.609,3,0.342,4,0.305,5,0.305,6,1.424,7,1.714,8,2.41,9,3.346,10,2.544,11,4.455,12,3.346,13,3.346,14,4.163,15,4.066,16,0.174,17,0.632,18,3.335,19,1.31,20,1.096,21,3.346,22,3.346,23,1.726,24,1.425,25,1.25,26,3.335,27,0.872,28,2.41,29,4.163,30,1.466,31,3.346,32,1.203,33,0.035,34,0.458,35,1.203,36,3.346,37,2.605,38,2.234,39,3.346,40,1.459,41,3.223,42,3.346,43,3.346,44,3.346,45,4.012,46,2.782,47,1.375,48,1.314,49,2.234,50,2.234,51,2.234,52,2.234,53,2.234,54,2.234,55,4.455,56,2.782,57,3.346,58,3.346,59,1.857,60,2.234,61,2.234,62,2.234,63,2.782,64,0.918,65,2.234,66,2.234,67,0.757,68,2.234,69,1.43,70,2.234,71,2.234,72,0.682,73,3.335,74,2.41,75,2.41,76,2.41,77,2.41,78,2.41,79,2.41,80,1.101,81,1.609,82,1.276,83,1.857,84,1.857,85,1.857,86,1.857,87,1.857,88,1.857,89,2.234,90,2.234,91,1.609,92,2.234,93,1.336,94,2.234,95,2.234,96,2.234,97,2.234,98,1.857,99,2.234,100,2.234,101,2.234,102,2.234,103,2.234,104,2.234,105,2.234,106,1.424,107,2.234,108,1.911,109,2.782,110,1.424,111,2.234,112,2.234,113,3.346,114,2.234,115,2.132,116,2.234,117,2.234,118,0.018,119,0.018]],["title/components/AppComponent.html",[120,1.491,121,2.027]],["body/components/AppComponent.html",[0,0.74,3,0.544,4,0.486,5,0.486,16,0.276,17,0.875,25,1.061,30,0.976,33,0.034,34,0.325,41,2.648,64,0.976,67,0.974,72,0.544,118,0.025,119,0.025,120,2.418,121,3.485,122,3.34,123,2.956,124,2.956,125,2.956,126,2.956,127,2.956,128,3.938,129,4.546,130,1.811,131,3.855,132,3.34,133,3.855,134,5.16,135,3.485,136,3.855,137,4.637,138,3.855,139,4.637,140,5.16,141,1.519,142,1.271,143,3.855,144,4.637,145,3.556,146,1.164,147,2.956,148,3.556,149,2.946,150,2.561,151,3.556,152,2.956,153,3.855,154,2.956,155,3.485,156,2.956,157,2.956,158,1.834,159,1.389,160,2.956,161,2.956]],["title/components/DrawPoolGameComponent.html",[120,1.491,135,2.027]],["body/components/DrawPoolGameComponent.html",[0,0.395,3,0.29,4,0.259,5,0.259,16,0.282,17,0.558,20,0.967,24,0.521,25,0.937,27,1.153,30,1.462,32,0.886,33,0.035,34,0.406,35,0.886,41,2.337,47,1.289,48,1.744,64,1.346,67,0.957,72,0.29,80,1.123,93,0.569,118,0.016,119,0.016,120,1.699,121,1.209,122,2.127,123,1.577,124,1.577,125,1.577,127,1.577,128,2.947,129,3.402,131,2.455,132,2.127,133,2.455,135,2.608,136,2.455,138,2.455,141,1.549,142,1.296,146,0.621,149,3.519,150,3.906,152,1.577,153,2.455,154,1.577,155,2.608,156,1.577,157,1.577,158,2.97,159,1.598,160,1.577,161,1.577,162,4.509,163,1.577,164,3.626,165,3.626,166,2.953,167,2.953,168,3.686,169,4.434,170,4.434,171,3.402,172,4.092,173,2.225,174,2.953,175,3.382,176,4.092,177,1.897,178,2.608,179,3.014,180,2.337,181,3.626,182,2.608,183,2.953,184,2.953,185,1.897,186,1.897,187,1.897,188,2.953,189,1.897,190,1.897,191,1.897,192,0.91,193,2.532,194,1.897,195,1.209,196,1.882,197,1.897,198,2.953,199,1.897,200,1.897,201,1.897,202,1.366,203,1.366,204,0.678,205,1.577,206,1.897,207,1.897,208,1.366,209,1.577,210,1.897,211,1.897,212,1.897,213,2.953,214,1.897,215,1.897,216,1.209,217,1.577,218,1.897,219,1.897,220,1.897,221,3.904,222,1.897,223,1.897,224,1.897,225,1.897,226,1.897,227,1.897,228,1.897,229,1.897,230,1.897,231,1.897,232,1.897,233,1.897,234,1.209,235,1.897,236,1.897,237,2.455,238,2.455,239,4.092,240,2.953]],["title/injectables/ElementDrawPoolService.html",[182,2.027,241,0.601]],["body/injectables/ElementDrawPoolService.html",[0,0.621,3,0.456,4,0.407,5,0.407,16,0.232,17,0.778,20,1.349,23,2.125,25,0.682,27,1.164,30,1.517,32,0.894,33,0.035,34,0.466,35,0.894,40,1.349,47,0.818,48,1.349,67,1.009,72,0.456,80,0.818,93,0.894,118,0.022,119,0.022,130,1.164,141,2.016,142,1.687,143,2.478,146,0.976,158,2.921,168,4.593,173,2.503,175,3.666,182,2.625,192,1.277,193,3.051,203,2.147,204,1.066,205,2.478,208,2.147,209,2.478,217,2.478,241,0.778,242,1.164,243,4.708,244,2.478,245,4.72,246,4.72,247,2.478,248,2.907,249,4.119,250,3.424,251,2.981,252,2.981,253,2.211,254,4.119,255,3.051,256,5.091,257,2.981,258,2.981,259,2.981,260,2.981,261,2.478,262,2.478,263,2.478,264,1.274,265,1.9,266,2.981,267,2.981,268,2.981,269,2.147,270,2.981,271,2.981]],["title/interfaces/FactionState.html",[69,1.359,272,0.601]],["body/interfaces/FactionState.html",[3,0.674,4,0.602,5,0.602,10,3.373,16,0.342,17,1.001,26,4.91,33,0.034,34,0.403,67,1.001,69,2.266,72,0.674,118,0.028,119,0.028,159,1.721,272,0.832,273,1.883,274,3.663,275,3.82,276,2.432,277,4.406,278,2.516]],["title/injectables/GameManagementService.html",[178,2.027,241,0.601]],["body/injectables/GameManagementService.html",[0,0.802,3,0.59,4,0.526,5,0.526,16,0.299,20,1.599,25,0.882,27,1.505,30,1.34,32,1.156,33,0.035,34,0.352,35,1.156,47,1.058,48,1.599,67,1.064,72,0.59,80,1.058,118,0.026,119,0.026,130,1.505,146,1.262,171,4.685,178,3.112,192,1.345,241,0.922,242,1.505,247,3.203,248,3.218,250,4.059,261,3.203,263,3.203,264,1.646,265,2.456,279,2.765,280,3.203,281,3.853,282,3.853,283,2.775,284,3.853,285,2.2,286,2.775,287,3.853,288,3.853,289,3.853,290,3.853]],["title/interfaces/GameState.html",[272,0.601,291,1.359]],["body/interfaces/GameState.html",[1,2.068,3,0.554,4,0.495,5,0.495,7,1.547,16,0.281,17,0.886,19,1.429,24,0.994,33,0.035,34,0.504,64,0.994,67,0.886,69,2.353,72,0.797,80,0.994,118,0.025,119,0.025,192,1.431,272,0.886,273,1.547,276,2.224,291,2.437,292,2.068,293,2.308,294,3.749,295,3.144,296,3.901,297,2.42,298,3.397,299,2.353,300,3.01,301,3.01,302,2.068,303,3.901,304,3.01,305,2.99,306,3.01,307,2.308,308,3.01,309,2.608,310,3.01,311,1.868,312,3.01,313,3.01]],["title/injectables/GameStateClientService.html",[241,0.601,314,2.027]],["body/injectables/GameStateClientService.html",[0,0.818,3,0.602,4,0.537,5,0.537,16,0.305,19,1.558,20,1.619,23,2.55,25,0.9,30,1.357,32,1.179,33,0.034,34,0.359,35,1.179,47,1.079,48,1.619,67,1.021,72,0.602,93,1.179,118,0.027,119,0.027,130,1.535,146,1.287,204,1.405,241,0.933,242,1.535,253,2.317,264,1.679,279,2.79,314,3.151,315,3.267,316,4.944,317,3.617,318,4.944,319,2.928,320,3.93,321,3.93,322,3.93,323,2.504,324,2.831,325,3.93,326,3.93]],["title/interfaces/GameStateElement.html",[272,0.601,276,1.359]],["body/interfaces/GameStateElement.html",[1,2.617,3,0.535,4,0.477,5,0.477,7,1.492,16,0.271,17,0.865,19,1.589,24,1.491,33,0.034,34,0.516,64,1.404,67,0.865,69,1.958,72,0.783,80,0.959,118,0.025,119,0.025,192,1.15,272,0.865,273,1.492,276,2.473,291,2.186,292,1.995,293,2.226,294,3.684,295,3.22,296,2.904,297,1.802,298,3.305,299,1.958,300,2.904,301,2.904,302,1.995,303,4.515,304,3.81,305,3.461,306,3.81,307,2.921,308,3.81,309,3.301,310,3.81,311,2.364,312,3.81,313,3.81]],["title/interfaces/GameStatePatch.html",[272,0.601,319,1.641]],["body/interfaces/GameStatePatch.html",[3,0.668,4,0.596,5,0.596,16,0.339,17,0.996,19,1.198,33,0.034,34,0.482,67,0.824,72,0.668,118,0.028,119,0.028,195,3.612,272,0.824,273,1.865,292,2.492,319,2.721,327,3.628,328,3.109,329,4.895,330,5.888,331,2.251,332,2.251]],["title/injectables/GameStatePatchService.html",[241,0.601,333,2.027]],["body/injectables/GameStatePatchService.html",[0,0.715,3,0.525,4,0.469,5,0.469,7,1.466,16,0.267,19,1.481,20,1.484,25,1.037,30,1.244,32,1.359,33,0.035,34,0.414,35,1.359,47,1.244,67,1.018,72,0.525,93,1.359,118,0.024,119,0.024,130,1.34,146,1.124,241,0.855,242,1.34,264,1.466,278,1.96,279,2.616,291,2.654,317,3.232,319,2.971,323,2.887,324,2.472,328,2.337,329,2.853,331,1.771,332,1.771,333,2.887,334,2.853,335,2.887,336,4.531,337,4.531,338,4.531,339,4.531,340,4.531,341,3.432,342,4.531,343,3.08,344,3.432,345,3.432,346,3.432,347,3.432,348,3.432,349,3.432,350,3.432,351,3.432,352,3.432,353,3.432]],["title/injectables/GameStateService.html",[180,1.817,241,0.601]],["body/injectables/GameStateService.html",[0,0.446,3,0.328,4,0.292,5,0.292,7,0.915,16,0.166,19,1.447,20,1.061,23,1.671,25,1.072,27,1.265,30,1.534,32,1.405,33,0.035,34,0.428,35,1.405,40,1.061,47,1.447,48,1.927,67,0.995,69,1.863,72,0.328,80,0.889,93,0.972,108,2.49,109,2.694,118,0.017,119,0.017,130,0.836,146,0.701,159,1.527,173,2.105,180,2.49,192,0.981,203,1.542,204,0.765,241,0.612,242,0.836,253,1.832,264,0.915,272,0.612,279,2.922,285,1.222,291,1.384,297,2.249,298,2.232,299,2.187,307,2.065,309,2.334,314,2.778,317,2.778,319,2.249,323,1.364,324,1.542,333,2.778,343,2.232,354,1.542,355,2.694,356,3.24,357,3.24,358,2.694,359,3.24,360,2.694,361,3.24,362,3.24,363,3.625,364,2.694,365,4.36,366,3.625,367,2.694,368,2.694,369,3.625,370,2.141,371,3.91,372,3.91,373,1.78,374,3.24,375,1.78,376,1.78,377,2.694,378,2.141,379,2.141,380,3.373,381,3.25,382,3.24,383,2.694,384,2.334,385,3.24,386,2.141,387,2.694,388,2.141,389,2.694,390,2.141,391,2.141,392,1.78,393,2.141,394,1.542,395,2.141,396,2.141,397,2.141,398,2.141,399,1.78,400,2.141,401,2.141,402,2.141,403,2.141,404,2.141,405,2.141,406,2.141,407,3.91,408,1.78,409,1.78,410,2.141,411,2.141,412,2.141,413,2.141,414,2.141,415,2.141,416,1.364,417,2.141,418,2.141,419,2.141,420,2.141,421,2.141]],["title/injectables/GameStateStoreService.html",[241,0.601,297,1.641]],["body/injectables/GameStateStoreService.html",[0,0.224,3,0.164,4,0.147,5,0.147,7,1.041,14,1.537,15,0.773,16,0.254,17,0.349,19,1.55,20,0.948,23,0.954,24,0.795,25,0.924,27,0.951,30,1.435,32,1.266,33,0.035,34,0.425,35,1.21,40,1.67,41,1.653,47,1.241,48,1.712,63,1.537,67,0.673,69,1.237,72,0.164,80,0.795,82,0.613,93,1.146,106,1.845,108,2.304,110,1.845,115,1.845,118,0.01,119,0.01,128,0.773,130,0.419,141,0.79,142,1.035,146,0.351,173,2.321,192,0.959,193,2.304,204,0.384,221,1.537,234,1.178,237,1.537,241,0.349,242,0.419,253,1.978,255,1.391,264,0.459,269,1.332,276,2.372,278,0.613,279,2.727,285,0.613,291,2.596,295,2.716,297,2.082,298,1.391,299,1.632,302,0.613,305,1.178,307,1.178,311,1.493,317,1.178,323,0.684,328,0.554,331,0.554,332,0.554,335,1.178,343,2.41,355,1.537,363,2.965,364,1.537,366,2.965,367,1.537,368,2.406,369,2.965,377,1.537,380,3.346,381,2.406,383,0.892,387,1.537,389,1.537,392,0.892,394,0.773,399,0.892,408,1.537,409,0.892,416,1.845,422,0.892,423,1.849,424,1.849,425,1.849,426,1.849,427,1.849,428,1.332,429,1.849,430,1.537,431,1.537,432,3.04,433,3.355,434,1.849,435,1.849,436,2.406,437,1.537,438,1.849,439,1.849,440,1.849,441,1.849,442,2.895,443,2.965,444,1.537,445,1.849,446,1.537,447,3.498,448,1.849,449,1.849,450,4.757,451,1.849,452,1.537,453,2.351,454,1.178,455,1.849,456,3.355,457,2.895,458,1.849,459,1.849,460,1.849,461,1.849,462,2.895,463,2.085,464,2.895,465,2.037,466,1.849,467,1.332,468,1.849,469,1.849,470,1.849,471,2.025,472,2.895,473,1.849,474,2.895,475,1.845,476,1.391,477,1.849,478,1.537,479,1.332,480,2.435,481,2.435,482,2.435,483,1.849,484,1.849,485,2.435,486,2.435,487,2.435,488,1.849,489,1.849,490,1.073,491,1.073,492,1.849,493,1.073,494,1.849,495,0.554,496,1.073,497,1.073,498,4.522,499,1.073,500,1.849,501,1.537,502,2.895,503,1.073,504,1.073,505,1.849,506,1.073,507,1.073,508,1.073,509,1.073,510,3.264,511,2.085,512,1.849,513,1.849,514,1.849,515,1.073,516,1.849,517,1.073,518,1.073,519,1.073,520,1.073,521,1.073,522,1.073,523,1.073,524,1.073,525,0.773,526,1.073,527,1.073,528,1.073,529,1.073,530,1.073,531,1.849,532,4.221,533,1.073,534,1.073,535,1.849,536,1.073,537,1.849,538,1.849,539,1.849,540,1.849,541,1.073,542,1.849,543,1.849,544,1.073,545,1.073,546,1.073,547,1.073,548,1.849,549,1.073,550,1.073,551,1.073,552,1.073,553,1.073,554,1.073,555,1.073,556,1.073,557,0.892,558,1.073,559,1.073,560,1.073,561,1.849,562,1.073,563,1.073,564,1.073,565,1.073,566,1.073]],["title/interfaces/Piece.html",[37,1.491,272,0.601]],["body/interfaces/Piece.html",[3,0.664,4,0.592,5,0.592,16,0.337,17,0.992,24,1.699,33,0.034,34,0.481,37,2.753,64,1.652,72,0.865,93,1.301,118,0.028,119,0.028,272,0.819,273,1.853,495,2.237,567,2.764,568,2.764,569,3.606]],["title/classes/Pile.html",[0,0.663,192,0.798]],["body/classes/Pile.html",[0,0.315,2,1.09,3,0.232,4,0.207,5,0.207,7,1.538,8,1.776,16,0.118,17,0.466,19,1.327,20,0.807,23,1.272,24,1.508,25,0.824,27,0.591,28,1.776,30,1.508,32,1.079,33,0.035,34,0.512,35,1.079,37,2.544,40,0.807,47,1.283,48,1.298,59,1.258,64,0.415,67,0.68,72,0.377,80,1.167,91,1.09,93,1.275,106,2.294,115,2.709,118,0.013,119,0.013,141,0.646,142,0.881,149,2.055,155,2.294,158,1.272,159,0.591,173,2.32,192,1.496,193,2.055,195,3.167,196,2.978,204,0.541,216,2.709,234,1.571,253,1.857,255,2.263,272,0.286,275,1.09,276,1.053,278,0.864,295,1.408,299,2.218,311,1.61,328,0.78,331,0.78,332,0.78,335,1.571,343,1.408,428,1.776,447,2.592,453,1.776,454,1.571,463,2.855,465,2.427,475,1.571,476,2.427,479,1.09,495,1.272,525,1.09,568,3.415,570,1.09,571,2.992,572,4.295,573,2.05,574,2.05,575,1.776,576,2.992,577,2.595,578,2.05,579,2.05,580,2.595,581,2.595,582,2.595,583,2.595,584,2.992,585,2.592,586,2.592,587,2.466,588,2.466,589,2.248,590,3.534,591,2.05,592,2.05,593,2.05,594,1.408,595,1.776,596,2.05,597,1.513,598,1.513,599,1.513,600,1.513,601,1.513,602,1.513,603,2.05,604,1.513,605,2.05,606,2.992,607,2.992,608,2.05,609,2.05,610,2.05,611,2.05,612,1.513,613,2.05,614,2.05,615,1.513,616,1.513,617,1.513,618,2.05,619,1.513,620,1.513,621,1.513,622,1.571,623,1.258,624,1.09,625,1.258,626,1.258,627,1.258,628,1.258,629,1.258,630,1.776,631,1.258,632,2.05,633,1.258,634,1.258,635,1.258,636,1.258,637,1.258,638,1.258,639,1.258,640,1.258,641,1.258,642,2.05,643,2.05,644,1.258,645,1.258,646,1.258,647,1.258,648,1.258,649,1.258,650,1.258,651,1.258,652,1.258,653,2.05,654,2.05,655,1.258,656,2.05,657,2.05,658,1.258,659,1.258,660,2.05,661,1.258,662,2.05,663,2.05]],["title/injectables/PileRegistryService.html",[241,0.601,248,1.817]],["body/injectables/PileRegistryService.html",[0,0.486,3,0.357,4,0.318,5,0.318,16,0.181,17,0.652,18,3.421,19,1.13,20,1.131,24,1.249,25,0.942,27,0.911,30,1.445,32,1.234,33,0.035,34,0.465,35,1.234,40,1.771,47,0.948,48,1.131,64,1.13,67,0.859,72,0.357,80,0.64,82,2.598,93,0.699,108,1.973,110,1.486,118,0.019,119,0.019,120,1.093,130,0.911,141,1.944,142,1.627,146,0.764,159,1.777,173,2.36,192,1.515,202,1.68,204,0.834,216,1.486,241,0.652,242,0.911,248,1.973,253,2.384,255,1.332,264,0.996,265,1.486,269,3.277,285,1.332,286,2.964,358,1.939,360,1.939,384,1.68,431,1.939,432,2.964,433,1.939,436,3.783,437,2.872,443,2.872,444,2.872,446,3.421,465,2.35,476,2.905,478,1.939,501,3.421,511,3.895,557,2.872,572,1.68,575,1.68,585,1.68,586,1.68,594,1.973,664,3.895,665,1.939,666,3.421,667,3.421,668,4.55,669,4.115,670,2.332,671,2.9,672,3.455,673,3.455,674,3.455,675,2.332,676,2.872,677,2.332,678,2.332,679,2.332,680,3.455,681,2.872,682,3.455,683,3.455,684,3.455,685,3.455,686,3.455,687,2.332,688,3.455,689,2.332,690,2.332,691,2.332,692,2.332,693,2.332,694,2.332,695,2.332,696,2.332,697,1.939,698,2.872,699,1.939,700,1.939,701,1.939,702,1.939,703,1.939,704,2.332,705,2.332]],["title/interfaces/PileState.html",[272,0.601,299,1.359]],["body/interfaces/PileState.html",[0,0.429,3,0.315,4,0.281,5,0.281,7,0.88,8,1.484,16,0.16,17,0.594,19,1.174,24,1.387,28,1.484,30,0.566,33,0.035,34,0.421,37,2.501,40,1.031,47,0.864,48,1.031,64,0.566,67,0.807,72,0.482,80,1.333,91,1.484,93,1.456,106,2.725,115,2.725,118,0.017,119,0.017,142,0.737,149,1.797,155,2.006,158,1.063,159,0.805,173,1.968,192,1.455,193,2.181,195,2.725,196,3.319,204,0.737,216,2.006,234,1.313,253,1.79,255,2.181,272,0.389,273,0.88,275,2.267,276,1.632,278,1.177,295,1.177,299,2.281,311,1.063,328,1.063,331,1.063,332,1.063,335,1.313,343,1.177,428,1.484,447,2.267,453,1.484,454,1.313,463,2.267,465,2.181,475,1.313,476,2.181,479,1.484,495,1.063,525,1.484,568,3.219,570,1.484,571,2.617,572,4.242,573,1.713,574,1.713,575,1.484,576,2.617,577,3.175,578,1.713,579,1.713,580,1.713,581,1.713,582,1.713,583,1.713,584,1.713,585,1.484,586,1.484,589,1.484,590,3.175,591,1.713,592,1.713,593,1.713,594,1.177,595,1.484,596,1.713,603,1.713,605,1.713,606,2.617,607,2.617,608,1.713,609,1.713,610,1.713,611,1.713,613,1.713,614,1.713,618,1.713,622,2.006,623,1.713,624,1.484,625,2.617,626,2.617,627,2.617,628,2.617,629,2.617,630,3.317,631,3.175,632,2.617,633,1.713,634,1.713,635,1.713,636,1.713,637,1.713,638,1.713,639,1.713,640,1.713,641,1.713,642,2.617,643,2.617,644,1.713,645,1.713,646,1.713,647,1.713,648,1.713,649,1.713,650,1.713,651,1.713,652,1.713,653,2.617,654,2.617,655,1.713,656,2.617,657,2.617,658,1.713,659,1.713,660,2.617,661,1.713,662,2.617,663,2.617]],["title/injectables/PileStateService.html",[241,0.601,671,2.027]],["body/injectables/PileStateService.html",[0,0.564,3,0.414,4,0.37,5,0.37,16,0.21,17,0.727,19,0.743,20,1.26,24,1.339,25,1.025,27,1.057,30,1.471,32,1.344,33,0.035,34,0.472,35,1.344,40,1.754,47,1.23,48,1.598,64,1.23,67,0.921,72,0.414,80,1.057,82,2.786,93,0.812,108,2.198,110,1.725,118,0.021,119,0.021,130,1.057,141,1.645,142,1.601,146,0.886,159,1.057,173,2.538,175,3.514,179,3.2,180,2.786,192,1.49,202,1.949,204,0.967,208,1.949,241,0.727,242,1.057,264,1.156,265,1.725,285,1.545,286,1.949,354,1.949,373,2.25,375,2.25,376,2.25,380,1.949,384,1.949,394,2.772,432,2.772,471,2.25,476,2.786,511,3.227,664,3.97,666,3.724,667,3.724,671,2.453,676,3.2,697,2.25,698,3.2,699,2.25,700,2.25,701,2.25,702,2.25,703,2.25,706,2.707,707,3.849,708,3.849,709,2.707,710,3.849,711,2.707,712,2.707,713,2.707,714,2.707,715,2.707,716,2.707,717,2.25,718,2.707,719,2.707,720,2.707]],["title/interfaces/Player.html",[10,1.817,272,0.601]],["body/interfaces/Player.html",[3,0.688,4,0.613,5,0.613,10,3.064,16,0.349,17,1.013,25,1.361,33,0.033,34,0.491,64,1.693,72,0.688,118,0.029,119,0.029,272,0.848,273,1.919,721,3.734,722,5.945]],["title/coverage.html",[723,3.58]],["body/coverage.html",[0,0.867,1,1.728,5,0.413,6,2.652,10,1.728,19,1.406,33,0.034,34,0.277,37,1.418,40,0.991,69,1.293,81,2.18,118,0.022,119,0.022,120,1.95,121,1.929,126,2.516,135,1.929,149,2.377,150,2.18,158,1.561,162,2.516,163,2.516,178,1.929,180,1.728,182,1.929,192,0.759,196,3.91,241,1.094,243,2.516,244,2.516,248,1.728,272,1.074,274,2.516,276,1.293,279,2.771,280,2.516,283,2.18,291,1.293,292,2.926,293,3.032,297,1.561,299,1.293,302,1.728,314,1.929,315,2.516,319,1.561,327,2.516,333,1.929,334,2.516,354,2.998,422,2.516,495,2.147,567,2.652,570,2.998,622,1.929,664,2.998,665,2.516,671,1.929,721,2.516,723,2.516,724,2.516,725,3.027,726,3.027,727,5.124,728,2.516,729,5.124,730,2.516,731,5.124,732,4.757,733,4.757,734,4.162,735,4.162,736,4.162,737,3.027,738,2.516,739,3.027,740,2.516,741,3.027,742,3.027,743,3.027,744,3.027,745,2.516,746,2.516,747,4.162,748,4.162,749,3.027,750,2.18,751,2.18,752,3.027,753,3.027,754,3.027,755,3.027,756,3.027]],["title/dependencies.html",[757,1.926,758,3.173]],["body/dependencies.html",[33,0.035,118,0.028,119,0.028,146,1.385,147,3.517,204,1.512,328,2.182,331,2.182,332,2.182,758,3.517,759,4.231,760,6.216,761,4.231,762,5.175,763,4.231,764,4.231,765,4.231,766,4.231,767,5.175,768,5.175,769,4.231,770,4.231,771,4.231,772,4.231,773,4.231,774,4.231,775,4.231,776,4.231,777,4.231]],["title/miscellaneous/enumerations.html",[778,1.143,779,3.173]],["body/miscellaneous/enumerations.html",[16,0.319,33,0.034,41,2.901,118,0.027,119,0.027,142,2.273,262,4.223,750,2.957,751,3.659,778,1.754,779,3.413,780,3.413,781,4.105,782,4.105,783,4.105,784,4.105,785,4.105,786,4.105,787,4.105,788,4.105,789,4.105,790,4.105,791,4.105,792,4.105,793,4.105,794,4.105,795,4.105,796,4.105,797,4.105,798,4.105,799,4.105,800,4.105,801,4.105,802,4.105,803,4.105,804,4.105]],["title/miscellaneous/functions.html",[778,1.143,805,3.173]],["body/miscellaneous/functions.html",[16,0.339,24,1.198,25,1.207,32,1.582,33,0.033,34,0.399,35,1.582,37,2.045,47,1.448,64,1.448,118,0.028,119,0.028,305,2.781,454,2.781,465,3.011,567,2.781,569,3.628,622,3.361,624,3.143,681,3.628,745,3.628,746,4.385,778,1.865,805,3.628,806,4.365,807,3.628,808,4.365,809,5.274,810,4.365,811,4.365,812,4.365]],["title/index.html",[16,0.208,416,1.704,813,2.223]],["body/index.html",[4,0.5,25,0.838,33,0.025,40,1.198,46,3.042,118,0.025,119,0.025,120,2.451,238,4.873,430,3.042,456,3.927,475,2.332,594,2.987,595,3.982,717,3.042,757,2.636,814,3.66,815,4.724,816,3.66,817,5.232,818,5.232,819,3.042,820,3.66,821,3.66,822,4.724,823,5.723,824,5.964,825,3.66,826,3.66,827,3.66,828,3.66,829,3.66,830,3.66,831,3.66,832,3.66,833,3.042,834,3.66,835,3.66,836,5.232,837,3.66,838,3.66,839,3.66,840,3.66,841,3.66,842,4.724,843,4.724,844,5.529,845,3.66,846,4.724,847,3.66,848,3.66,849,3.66,850,3.66,851,4.724,852,3.66,853,3.66,854,3.66,855,3.66,856,5.232,857,3.66,858,3.66,859,3.042,860,2.636,861,3.66,862,3.66]],["title/license.html",[416,1.704,813,2.223,863,2.223]],["body/license.html",[24,1.029,33,0.026,56,3.989,98,4.399,118,0.026,119,0.026,452,3.117,589,2.7,594,2.74,724,3.117,833,3.117,859,3.117,863,3.117,864,3.749,865,5.292,866,3.749,867,3.749,868,3.749,869,3.749,870,4.798,871,3.749,872,3.749,873,3.749,874,3.749,875,3.749,876,3.749,877,4.798,878,6.133,879,3.749,880,3.749,881,3.749,882,3.749,883,3.749,884,3.749,885,3.749,886,3.749,887,3.749,888,3.749,889,3.749,890,3.749,891,4.798,892,3.749,893,3.749,894,3.749,895,3.749,896,3.749,897,3.749,898,3.749,899,4.798,900,4.798,901,3.749,902,3.749,903,3.749,904,3.749,905,3.749,906,3.749,907,3.749,908,3.749,909,3.749,910,3.749,911,3.749,912,3.749,913,3.749,914,3.749,915,3.749,916,3.749,917,3.749,918,3.749,919,3.749,920,3.749,921,3.749,922,3.749,923,3.749,924,3.749,925,3.749,926,3.749,927,3.749]],["title/modules.html",[928,3.58]],["body/modules.html",[33,0.031,118,0.031,119,0.031,928,4.153]],["title/overview.html",[860,3.102]],["body/overview.html",[2,3.497,33,0.03,118,0.03,119,0.03,122,3.497,242,1.896,273,2.074,467,4.046,860,3.497,929,4.855,930,4.855]],["title/properties.html",[17,0.721,757,1.926]],["body/properties.html",[17,0.933,33,0.032,118,0.03,119,0.03,819,4.108,931,4.942]],["title/miscellaneous/typealiases.html",[778,1.143,932,3.817]],["body/miscellaneous/typealiases.html",[6,2.91,16,0.355,29,4.505,33,0.034,34,0.418,73,4.505,74,3.289,75,3.289,76,3.289,77,3.289,78,3.289,79,3.289,118,0.029,119,0.029,495,2.355,567,2.91,568,3.453,778,1.951,807,3.796,933,4.566,934,4.505]],["title/miscellaneous/variables.html",[778,1.143,935,3.173]],["body/miscellaneous/variables.html",[6,2.22,15,3.296,16,0.271,24,0.956,33,0.035,34,0.467,40,1.141,64,0.956,74,2.509,75,2.509,76,2.509,77,2.509,78,2.509,79,2.509,80,0.956,81,3.296,82,1.989,83,3.804,84,3.804,85,3.804,86,3.804,87,3.804,88,3.804,118,0.025,119,0.025,132,2.509,141,2.318,142,1.939,159,1.361,192,1.148,283,3.296,291,2.183,292,1.989,293,2.916,294,2.509,298,2.613,302,2.613,311,1.797,467,2.509,630,2.509,728,2.897,730,3.804,738,4.9,740,2.897,750,2.509,751,3.296,778,1.489,780,2.897,934,2.897,935,2.897,936,3.484,937,3.484,938,3.484,939,3.484,940,3.484,941,3.484,942,3.484,943,3.484,944,3.484,945,3.484,946,3.484,947,3.484,948,3.484,949,3.484,950,3.484,951,3.484]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":196,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["0.0.0",{"_index":931,"title":{},"body":{"properties.html":{}}}],["0.14.10",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":749,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":115,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["1/1",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":747,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":742,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":738,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["18.2.0",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["18.2.5",{"_index":820,"title":{},"body":{"index.html":{}}}],["18.2.7",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":467,"title":{},"body":{"injectables/GameStateStoreService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.3.0",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["2/10",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":740,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["2024",{"_index":867,"title":{},"body":{"license.html":{}}}],["3.1.1",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["3/16",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["4.17.21",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["4/12",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":45,"title":{},"body":{"classes/Animal.html":{}}}],["60",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":930,"title":{},"body":{"overview.html":{}}}],["7.8.0",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":929,"title":{},"body":{"overview.html":{}}}],["_drawpool",{"_index":245,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["_gamestate",{"_index":480,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_setgamestate",{"_index":483,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_setgamestate(newstate",{"_index":489,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_state",{"_index":580,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["_transactionstate",{"_index":481,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["above",{"_index":898,"title":{},"body":{"license.html":{}}}],["accessible",{"_index":426,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["accessors",{"_index":23,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["action",{"_index":921,"title":{},"body":{"license.html":{}}}],["action_pawn_amphibian",{"_index":781,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_arachnid",{"_index":783,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_bird",{"_index":785,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_insect",{"_index":787,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_mammal",{"_index":789,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_reptile",{"_index":791,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnamphibian",{"_index":782,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnarachnid",{"_index":784,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnbird",{"_index":786,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawninsect",{"_index":788,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnmammal",{"_index":790,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnreptile",{"_index":792,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actions",{"_index":469,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["acts",{"_index":591,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["actual_component",{"_index":161,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["add",{"_index":46,"title":{},"body":{"classes/Animal.html":{},"index.html":{}}}],["added",{"_index":14,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{}}}],["addedelement.kind",{"_index":112,"title":{},"body":{"classes/Animal.html":{}}}],["addedelements",{"_index":90,"title":{},"body":{"classes/Animal.html":{}}}],["addelement",{"_index":21,"title":{},"body":{"classes/Animal.html":{}}}],["addelement(element",{"_index":36,"title":{},"body":{"classes/Animal.html":{}}}],["adds",{"_index":39,"title":{},"body":{"classes/Animal.html":{}}}],["aliases",{"_index":933,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":110,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["always",{"_index":649,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["amphibiananimal",{"_index":74,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":889,"title":{},"body":{"license.html":{}}}],["angular",{"_index":817,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":146,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":200,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["angular/material/tooltip",{"_index":201,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["angular/platform",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":147,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["animal",{"_index":1,"title":{"classes/Animal.html":{}},"body":{"classes/Animal.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"coverage.html":{}}}],["animalkind",{"_index":73,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{}}}],["animalmodel",{"_index":99,"title":{},"body":{"classes/Animal.html":{}}}],["animalname",{"_index":101,"title":{},"body":{"classes/Animal.html":{}}}],["animalname.charat(0).touppercase",{"_index":103,"title":{},"body":{"classes/Animal.html":{}}}],["animalname.slice(1",{"_index":104,"title":{},"body":{"classes/Animal.html":{}}}],["animalstate",{"_index":29,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{}}}],["app",{"_index":129,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["app.component.html",{"_index":137,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":139,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":121,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":730,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":829,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applies",{"_index":336,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["apply",{"_index":338,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["apply(gamestate",{"_index":340,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["applygsp",{"_index":362,"title":{},"body":{"injectables/GameStateService.html":{}}}],["applygsp(gsp",{"_index":374,"title":{},"body":{"injectables/GameStateService.html":{}}}],["applypatch",{"_index":346,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["applypatch(gamestate",{"_index":350,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["arachnidanimal",{"_index":75,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["areaservice",{"_index":438,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["arising",{"_index":925,"title":{},"body":{"license.html":{}}}],["array",{"_index":609,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["artifacts",{"_index":838,"title":{},"body":{"index.html":{}}}],["associated",{"_index":879,"title":{},"body":{"license.html":{}}}],["assume",{"_index":661,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["authors",{"_index":914,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":830,"title":{},"body":{"index.html":{}}}],["available",{"_index":684,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["bag",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":304,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["based",{"_index":63,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{}}}],["basegamestate",{"_index":283,"title":{},"body":{"injectables/GameManagementService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["basegamestate.pile.foreach((pilestate",{"_index":287,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["before",{"_index":383,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["behaviorsubject",{"_index":255,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{}}}],["behaviorsubject(this._gamestate",{"_index":527,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["behaviorsubject(this.length",{"_index":638,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["behaviorsubject(this.state",{"_index":635,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["behaviorsubject>(new",{"_index":686,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["being",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["birdanimal",{"_index":76,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":812,"title":{},"body":{"miscellaneous/functions.html":{}}}],["both",{"_index":57,"title":{},"body":{"classes/Animal.html":{}}}],["browser",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":595,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"index.html":{}}}],["c",{"_index":866,"title":{},"body":{"license.html":{}}}],["call",{"_index":382,"title":{},"body":{"injectables/GameStateService.html":{}}}],["called",{"_index":473,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["callers",{"_index":691,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["calling",{"_index":474,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["calls",{"_index":695,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["capabilities",{"_index":854,"title":{},"body":{"index.html":{}}}],["capitalized",{"_index":97,"title":{},"body":{"classes/Animal.html":{}}}],["card",{"_index":13,"title":{},"body":{"classes/Animal.html":{}}}],["case",{"_index":472,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["change",{"_index":832,"title":{},"body":{"index.html":{}}}],["charge",{"_index":874,"title":{},"body":{"license.html":{}}}],["check",{"_index":858,"title":{},"body":{"index.html":{}}}],["choice",{"_index":850,"title":{},"body":{"index.html":{}}}],["claim",{"_index":917,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Animal.html":{},"classes/Pile.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"overview.html":{}}}],["cli",{"_index":818,"title":{},"body":{"index.html":{}}}],["client.service",{"_index":398,"title":{},"body":{"injectables/GameStateService.html":{}}}],["client.service.ts",{"_index":315,"title":{},"body":{"injectables/GameStateClientService.html":{},"coverage.html":{}}}],["client.service.ts:13",{"_index":322,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["client.service.ts:9",{"_index":320,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["code",{"_index":834,"title":{},"body":{"index.html":{}}}],["command",{"_index":851,"title":{},"body":{"index.html":{}}}],["commit",{"_index":409,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["committransaction",{"_index":363,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["compare",{"_index":347,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["compare(oldstate",{"_index":349,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["complains",{"_index":651,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["component",{"_index":120,"title":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/PileRegistryService.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":156,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["components",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"overview.html":{}}}],["conditions",{"_index":897,"title":{},"body":{"license.html":{}}}],["connection",{"_index":926,"title":{},"body":{"license.html":{}}}],["console.log('create",{"_index":218,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log('end",{"_index":235,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log('start",{"_index":220,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log(json.stringify(gsp",{"_index":325,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["const",{"_index":80,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":27,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["constructor(gamemanagementsvc",{"_index":177,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["constructor(gamestatestore",{"_index":370,"title":{},"body":{"injectables/GameStateService.html":{}}}],["constructor(gamestatesvc",{"_index":706,"title":{},"body":{"injectables/PileStateService.html":{}}}],["constructor(pileregistrysvc",{"_index":247,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{}}}],["constructor(pilestatesvc",{"_index":670,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["constructor(private",{"_index":265,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["constructor(state",{"_index":28,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["contain",{"_index":579,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["contract",{"_index":922,"title":{},"body":{"license.html":{}}}],["copies",{"_index":891,"title":{},"body":{"license.html":{}}}],["copy",{"_index":877,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":865,"title":{},"body":{"license.html":{}}}],["count",{"_index":590,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["coverage",{"_index":723,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":339,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["create(oldstate",{"_index":342,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["creategame",{"_index":171,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{}}}],["creates",{"_index":335,"title":{},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["current",{"_index":479,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["currentcount",{"_index":656,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["currentitemcount",{"_index":662,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["damages",{"_index":918,"title":{},"body":{"license.html":{}}}],["date.now",{"_index":348,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["deal",{"_index":880,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":927,"title":{},"body":{"license.html":{}}}],["deepclone",{"_index":525,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["deepclone(emptygamestate",{"_index":516,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["deepclone(this._gamestate",{"_index":548,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["deepclone(this._state",{"_index":644,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["deepclone(this._transactionstate",{"_index":549,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["deepcompare",{"_index":746,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deepcompare(object1",{"_index":808,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{},"miscellaneous/variables.html":{}}}],["defaultpiecefactory",{"_index":622,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["defaultpiecefactory(kind",{"_index":569,"title":{},"body":{"interfaces/Piece.html":{},"miscellaneous/functions.html":{}}}],["defaults",{"_index":608,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["defined",{"_index":30,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{}}}],["defines",{"_index":303,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["defining",{"_index":294,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"miscellaneous/variables.html":{}}}],["definition",{"_index":592,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["dependencies",{"_index":758,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Animal.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["detect",{"_index":558,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["determine",{"_index":681,"title":{},"body":{"injectables/PileRegistryService.html":{},"miscellaneous/functions.html":{}}}],["dev",{"_index":826,"title":{},"body":{"index.html":{}}}],["development",{"_index":821,"title":{},"body":{"index.html":{}}}],["directive",{"_index":154,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["directives",{"_index":160,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":837,"title":{},"body":{"index.html":{}}}],["directory",{"_index":841,"title":{},"body":{"index.html":{}}}],["dist",{"_index":840,"title":{},"body":{"index.html":{}}}],["distinctuntilchanged",{"_index":624,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["distribute",{"_index":887,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":306,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["documentation",{"_index":724,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["dom",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["dominant",{"_index":143,"title":{},"body":{"components/AppComponent.html":{},"injectables/ElementDrawPoolService.html":{}}}],["dominantspecies",{"_index":814,"title":{},"body":{"index.html":{}}}],["done",{"_index":468,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["draw",{"_index":158,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["drawpool",{"_index":168,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{}}}],["drawpool.length$.subscribe((length",{"_index":214,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["drawpoolgamecomponent",{"_index":135,"title":{"components/DrawPoolGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["drawpoollength",{"_index":169,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["drawpoolsubject",{"_index":246,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["drew",{"_index":232,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["ds",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dspiecekind",{"_index":262,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"miscellaneous/enumerations.html":{}}}],["dspiecekind.element",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["during",{"_index":471,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileStateService.html":{}}}],["dynamic",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":313,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["e2e",{"_index":848,"title":{},"body":{"index.html":{}}}],["each",{"_index":311,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["earth",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":41,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/enumerations.html":{}}}],["element.kind",{"_index":113,"title":{},"body":{"classes/Animal.html":{}}}],["elementdrawpoolservice",{"_index":182,"title":{"injectables/ElementDrawPoolService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"coverage.html":{}}}],["elementdrawpoolsvc",{"_index":181,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elementindex",{"_index":114,"title":{},"body":{"classes/Animal.html":{}}}],["elementname",{"_index":223,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elementname.charat(0).touppercase",{"_index":225,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elementname.slice(1",{"_index":226,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elements",{"_index":15,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/variables.html":{}}}],["emit",{"_index":462,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["emitstate",{"_index":584,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["emitted",{"_index":448,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["empty",{"_index":234,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["emptygamestate",{"_index":302,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":238,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"index.html":{}}}],["endturn",{"_index":172,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["engine/model/faction.model",{"_index":70,"title":{},"body":{"classes/Animal.html":{}}}],["engine/model/piece.model",{"_index":71,"title":{},"body":{"classes/Animal.html":{}}}],["engine/model/pile.model",{"_index":205,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{}}}],["engine/model/player.model",{"_index":68,"title":{},"body":{"classes/Animal.html":{}}}],["engine/service/game",{"_index":198,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["engine/service/pile",{"_index":260,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["ensure",{"_index":477,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ensures",{"_index":556,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ensuring",{"_index":42,"title":{},"body":{"classes/Animal.html":{}}}],["entire",{"_index":459,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["enumerations",{"_index":779,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":810,"title":{},"body":{"miscellaneous/functions.html":{}}}],["error",{"_index":109,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateService.html":{}}}],["error(\"can't",{"_index":554,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('can",{"_index":545,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('gamestate",{"_index":552,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('must",{"_index":533,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('no",{"_index":408,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["error('transaction",{"_index":415,"title":{},"body":{"injectables/GameStateService.html":{}}}],["error(`pile",{"_index":698,"title":{},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["error(`state",{"_index":542,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["event",{"_index":913,"title":{},"body":{"license.html":{}}}],["eventcoalescing",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":310,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["exceed",{"_index":43,"title":{},"body":{"classes/Animal.html":{}}}],["execute",{"_index":846,"title":{},"body":{"index.html":{}}}],["existing",{"_index":512,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["export",{"_index":72,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{}}}],["express",{"_index":905,"title":{},"body":{"license.html":{}}}],["extends",{"_index":275,"title":{},"body":{"interfaces/FactionState.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["faction",{"_index":298,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/variables.html":{}}}],["faction.model",{"_index":300,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["factionstate",{"_index":69,"title":{"interfaces/FactionState.html":{}},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["factory",{"_index":593,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["false).newdocument",{"_index":353,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["fast",{"_index":331,"title":{},"body":{"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["files",{"_index":833,"title":{},"body":{"index.html":{},"license.html":{}}}],["filter",{"_index":203,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateService.html":{}}}],["first",{"_index":717,"title":{},"body":{"injectables/PileStateService.html":{},"index.html":{}}}],["fitness",{"_index":910,"title":{},"body":{"license.html":{}}}],["following",{"_index":896,"title":{},"body":{"license.html":{}}}],["formatelementname",{"_index":174,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["formatelementname(kind",{"_index":188,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["free",{"_index":873,"title":{},"body":{"license.html":{}}}],["from/to",{"_index":696,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["function",{"_index":495,"title":{},"body":{"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":805,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":894,"title":{},"body":{"license.html":{}}}],["further",{"_index":855,"title":{},"body":{"index.html":{}}}],["game",{"_index":159,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameStateService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"miscellaneous/variables.html":{}}}],["game.component",{"_index":151,"title":{},"body":{"components/AppComponent.html":{}}}],["game.component.html",{"_index":166,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.scss",{"_index":167,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts",{"_index":163,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["game.component.ts:18",{"_index":194,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:19",{"_index":197,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:20",{"_index":183,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:29",{"_index":190,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:41",{"_index":185,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:46",{"_index":191,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:51",{"_index":189,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:56",{"_index":186,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:68",{"_index":187,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game/component/draw",{"_index":148,"title":{},"body":{"components/AppComponent.html":{}}}],["game/dominant",{"_index":284,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["game/draw",{"_index":150,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["gamemanagementservice",{"_index":178,"title":{"injectables/GameManagementService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"coverage.html":{}}}],["gamemanagementsvc",{"_index":184,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["gamestate",{"_index":291,"title":{"interfaces/GameState.html":{}},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gamestate.faction",{"_index":562,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestate.pile",{"_index":564,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestateclient",{"_index":372,"title":{},"body":{"injectables/GameStateService.html":{}}}],["gamestateclientservice",{"_index":314,"title":{"injectables/GameStateClientService.html":{}},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestateelement",{"_index":276,"title":{"interfaces/GameStateElement.html":{}},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["gamestateelements",{"_index":429,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestatepatch",{"_index":319,"title":{"interfaces/GameStatePatch.html":{}},"body":{"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestatepatches",{"_index":337,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["gamestatepatchservice",{"_index":333,"title":{"injectables/GameStatePatchService.html":{}},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestateservice",{"_index":180,"title":{"injectables/GameStateService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateService.html":{},"injectables/PileStateService.html":{},"coverage.html":{}}}],["gamestatestore",{"_index":309,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{}}}],["gamestatestoreservice",{"_index":297,"title":{"injectables/GameStateStoreService.html":{}},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["gamestatesubject",{"_index":482,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestatesvc",{"_index":179,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/PileStateService.html":{}}}],["generate",{"_index":836,"title":{},"body":{"index.html":{}}}],["generated",{"_index":816,"title":{},"body":{"index.html":{}}}],["get(kind",{"_index":674,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["getdrawpool",{"_index":258,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["getelements",{"_index":53,"title":{},"body":{"classes/Animal.html":{}}}],["getfaction",{"_index":392,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["getgamestate",{"_index":519,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getgsp",{"_index":321,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["getkind",{"_index":59,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{}}}],["getlength",{"_index":616,"title":{},"body":{"classes/Pile.html":{}}}],["getname",{"_index":61,"title":{},"body":{"classes/Animal.html":{}}}],["getobservableforkey",{"_index":484,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getobservableforkey(selector",{"_index":492,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getowner",{"_index":65,"title":{},"body":{"classes/Animal.html":{}}}],["getpile",{"_index":394,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileStateService.html":{}}}],["getpile(kind",{"_index":708,"title":{},"body":{"injectables/PileStateService.html":{}}}],["gets",{"_index":55,"title":{},"body":{"classes/Animal.html":{}}}],["getstate",{"_index":619,"title":{},"body":{"classes/Pile.html":{}}}],["getting",{"_index":813,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettransactionstate",{"_index":521,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["given",{"_index":607,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["go",{"_index":857,"title":{},"body":{"index.html":{}}}],["granted",{"_index":872,"title":{},"body":{"license.html":{}}}],["grasselement",{"_index":86,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["grubelement",{"_index":84,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["gsp",{"_index":317,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["gsp.patch",{"_index":351,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["gspservice",{"_index":371,"title":{},"body":{"injectables/GameStateService.html":{}}}],["happen",{"_index":718,"title":{},"body":{"injectables/PileStateService.html":{}}}],["help",{"_index":856,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":871,"title":{},"body":{"license.html":{}}}],["holders",{"_index":915,"title":{},"body":{"license.html":{}}}],["html",{"_index":153,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["http://localhost:4200",{"_index":828,"title":{},"body":{"index.html":{}}}],["id",{"_index":722,"title":{},"body":{"interfaces/Player.html":{}}}],["identifier",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":852,"title":{},"body":{"index.html":{}}}],["implied",{"_index":906,"title":{},"body":{"license.html":{}}}],["import",{"_index":67,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{}}}],["imports",{"_index":133,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["included",{"_index":589,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"license.html":{}}}],["including",{"_index":56,"title":{},"body":{"classes/Animal.html":{},"license.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{}}}],["inherent",{"_index":11,"title":{},"body":{"classes/Animal.html":{}}}],["inherentelementkindbyanimalkind",{"_index":81,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inherentelements",{"_index":89,"title":{},"body":{"classes/Animal.html":{}}}],["initialize",{"_index":175,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/PileStateService.html":{}}}],["initialized",{"_index":690,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["injectable",{"_index":241,"title":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{},"coverage.html":{}}}],["injectables",{"_index":242,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{},"overview.html":{}}}],["insectanimal",{"_index":77,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["instantiated",{"_index":428,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["interact",{"_index":358,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileRegistryService.html":{}}}],["interested",{"_index":446,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{}}}],["interface",{"_index":272,"title":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"interfaces/Piece.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{}},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStateService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["interfaces",{"_index":273,"title":{},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"interfaces/Piece.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"overview.html":{}}}],["inventory",{"_index":630,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":575,"title":{},"body":{"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{}}}],["item",{"_index":227,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["item.kind",{"_index":539,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["item[0",{"_index":229,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["joe",{"_index":868,"title":{},"body":{"license.html":{}}}],["json",{"_index":332,"title":{},"body":{"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["json.stringify(newgamestateelement",{"_index":543,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["k",{"_index":869,"title":{},"body":{"license.html":{}}}],["karma",{"_index":847,"title":{},"body":{"index.html":{}}}],["keeps",{"_index":627,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["key",{"_index":447,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["keyof",{"_index":531,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["keys",{"_index":442,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["kind",{"_index":24,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["kind.replace('element",{"_index":224,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["kinds",{"_index":577,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["kindtolengthobservables",{"_index":685,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["kindtopile",{"_index":666,"title":{},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["leaving",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":152,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["length",{"_index":216,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{}}}],["lengthsubject",{"_index":581,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["level",{"_index":441,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["liability",{"_index":919,"title":{},"body":{"license.html":{}}}],["liable",{"_index":916,"title":{},"body":{"license.html":{}}}],["license",{"_index":863,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":44,"title":{},"body":{"classes/Animal.html":{}}}],["limitation",{"_index":882,"title":{},"body":{"license.html":{}}}],["limited",{"_index":907,"title":{},"body":{"license.html":{}}}],["line",{"_index":239,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["list",{"_index":92,"title":{},"body":{"classes/Animal.html":{}}}],["local",{"_index":478,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{}}}],["lodash",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":170,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["made",{"_index":683,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["maintain",{"_index":424,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["make",{"_index":694,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["making",{"_index":425,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["mammalanimal",{"_index":78,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":296,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["management",{"_index":434,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["management.service",{"_index":199,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["management.service.ts",{"_index":280,"title":{},"body":{"injectables/GameManagementService.html":{},"coverage.html":{}}}],["management.service.ts:12",{"_index":282,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["management.service.ts:9",{"_index":281,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["manages",{"_index":689,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["many",{"_index":629,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["map",{"_index":82,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{},"miscellaneous/variables.html":{}}}],["map((gamestate",{"_index":529,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["matbutton",{"_index":164,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["matches",{"_index":513,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["matching",{"_index":119,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mattooltip",{"_index":165,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["meatelement",{"_index":87,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":909,"title":{},"body":{"license.html":{}}}],["merge",{"_index":885,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["method",{"_index":433,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["miscellaneous",{"_index":778,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":864,"title":{},"body":{"license.html":{}}}],["model/faction.model",{"_index":399,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["model/game",{"_index":323,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["model/pile.model",{"_index":285,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["modify",{"_index":884,"title":{},"body":{"license.html":{}}}],["modules",{"_index":928,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":475,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"index.html":{}}}],["name",{"_index":25,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["navigate",{"_index":827,"title":{},"body":{"index.html":{}}}],["need",{"_index":430,"title":{},"body":{"injectables/GameStateStoreService.html":{},"index.html":{}}}],["needed",{"_index":574,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["new",{"_index":40,"title":{},"body":{"classes/Animal.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newgamestateelement",{"_index":498,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["newgamestateelement.kind",{"_index":540,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["newstate",{"_index":343,"title":{},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["ng",{"_index":824,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":912,"title":{},"body":{"license.html":{}}}],["notice",{"_index":899,"title":{},"body":{"license.html":{}}}],["null",{"_index":193,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["number",{"_index":195,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"interfaces/GameStatePatch.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["object",{"_index":295,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["object.keys(this._state.inventory).reduce",{"_index":641,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["object1",{"_index":811,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object2",{"_index":809,"title":{},"body":{"miscellaneous/functions.html":{}}}],["objects",{"_index":305,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/functions.html":{}}}],["observable",{"_index":253,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{}}}],["observables",{"_index":443,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{}}}],["obtaining",{"_index":876,"title":{},"body":{"license.html":{}}}],["of(undefined",{"_index":326,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["oldstate",{"_index":345,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["once",{"_index":501,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{}}}],["one",{"_index":453,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["ones",{"_index":58,"title":{},"body":{"classes/Animal.html":{}}}],["operation",{"_index":330,"title":{},"body":{"interfaces/GameStatePatch.html":{}}}],["optional",{"_index":35,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{},"miscellaneous/functions.html":{}}}],["orchestrating",{"_index":359,"title":{},"body":{"injectables/GameStateService.html":{}}}],["others",{"_index":427,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["otherwise",{"_index":924,"title":{},"body":{"license.html":{}}}],["out",{"_index":859,"title":{},"body":{"index.html":{},"license.html":{}}}],["outside",{"_index":308,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["overview",{"_index":860,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrites",{"_index":460,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["owned",{"_index":9,"title":{},"body":{"classes/Animal.html":{}}}],["owner",{"_index":26,"title":{},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{}}}],["package",{"_index":757,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":862,"title":{},"body":{"index.html":{}}}],["param",{"_index":106,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":452,"title":{},"body":{"injectables/GameStateStoreService.html":{},"license.html":{}}}],["passed",{"_index":514,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["patch",{"_index":328,"title":{},"body":{"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["patch.model",{"_index":324,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{}}}],["patch.model.ts",{"_index":327,"title":{},"body":{"interfaces/GameStatePatch.html":{},"coverage.html":{}}}],["patch.service",{"_index":397,"title":{},"body":{"injectables/GameStateService.html":{}}}],["patch.service.ts",{"_index":334,"title":{},"body":{"injectables/GameStatePatchService.html":{},"coverage.html":{}}}],["patch.service.ts:13",{"_index":344,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["patch.service.ts:20",{"_index":341,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["permission",{"_index":870,"title":{},"body":{"license.html":{}}}],["permit",{"_index":892,"title":{},"body":{"license.html":{}}}],["person",{"_index":875,"title":{},"body":{"license.html":{}}}],["persons",{"_index":893,"title":{},"body":{"license.html":{}}}],["piece",{"_index":37,"title":{"interfaces/Piece.html":{}},"body":{"classes/Animal.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["piece.model",{"_index":623,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["piececount",{"_index":653,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["piecefactory",{"_index":568,"title":{},"body":{"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/typealiases.html":{}}}],["pieces",{"_index":572,"title":{},"body":{"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{}}}],["pieces.push(null",{"_index":659,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieces.push(this.piecefactory(kind",{"_index":658,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieceswithcount.length",{"_index":654,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieceswithcount[math.floor(math.random",{"_index":655,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pile",{"_index":192,"title":{"classes/Pile.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pile(pilestate",{"_index":289,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["pile.kind",{"_index":703,"title":{},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["pile.model",{"_index":301,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["pile.setstate(pilestate",{"_index":715,"title":{},"body":{"injectables/PileStateService.html":{}}}],["pile.state$.pipe(skip(1)).subscribe((pilestate",{"_index":719,"title":{},"body":{"injectables/PileStateService.html":{}}}],["pileregistryservice",{"_index":248,"title":{"injectables/PileRegistryService.html":{}},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/PileRegistryService.html":{},"coverage.html":{}}}],["pileregistrysvc",{"_index":250,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{}}}],["piles",{"_index":286,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["piles.foreach((pile",{"_index":699,"title":{},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["piles.push(new",{"_index":288,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["pileservice",{"_index":437,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{}}}],["pilestate",{"_index":299,"title":{"interfaces/PileState.html":{}},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["pilestates.foreach((pilestate",{"_index":712,"title":{},"body":{"injectables/PileStateService.html":{}}}],["pilestateservice",{"_index":671,"title":{"injectables/PileStateService.html":{}},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{},"coverage.html":{}}}],["pilestatesvc",{"_index":673,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["pipe",{"_index":578,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pipe(filter((drawpool",{"_index":211,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["pipe(filter((registeredpiles",{"_index":267,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["places",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platform",{"_index":849,"title":{},"body":{"index.html":{}}}],["player",{"_index":10,"title":{"interfaces/Player.html":{}},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["player.model",{"_index":277,"title":{},"body":{"interfaces/FactionState.html":{}}}],["pool",{"_index":149,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["pool.service",{"_index":207,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["pool.service.ts",{"_index":244,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"coverage.html":{}}}],["pool.service.ts:11",{"_index":252,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:12",{"_index":257,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:15",{"_index":249,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:21",{"_index":251,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["pool.service.ts:31",{"_index":259,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["portions",{"_index":902,"title":{},"body":{"license.html":{}}}],["pretty",{"_index":625,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["previous",{"_index":461,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["printed",{"_index":12,"title":{},"body":{"classes/Animal.html":{}}}],["private",{"_index":173,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{}}}],["progress",{"_index":381,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["project",{"_index":815,"title":{},"body":{"index.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{},"properties.html":{}}}],["provideanimationsasync('noop",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":903,"title":{},"body":{"license.html":{}}}],["providedin",{"_index":264,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["providerouter(routes",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provides",{"_index":355,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["providezonechangedetection",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":18,"title":{},"body":{"classes/Animal.html":{},"injectables/PileRegistryService.html":{}}}],["publish",{"_index":886,"title":{},"body":{"license.html":{}}}],["pull",{"_index":585,"title":{},"body":{"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{}}}],["pull(count",{"_index":603,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pulled",{"_index":610,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pulls",{"_index":605,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["purpose",{"_index":911,"title":{},"body":{"license.html":{}}}],["put",{"_index":586,"title":{},"body":{"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{}}}],["put(pieces",{"_index":611,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["puts",{"_index":613,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["random",{"_index":571,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["readonly",{"_index":582,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["received",{"_index":466,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["record",{"_index":631,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["reference",{"_index":861,"title":{},"body":{"index.html":{}}}],["regardless",{"_index":451,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["register",{"_index":432,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["register(piles",{"_index":676,"title":{},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["registered",{"_index":511,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["registeredpilekinds",{"_index":667,"title":{},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["registeredpiles",{"_index":668,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["registeredpiles.has(dspiecekind.element",{"_index":268,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["registeredpilessubject",{"_index":669,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["registeredpilessubscription",{"_index":209,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{}}}],["registeredpilessubscription.unsubscribe",{"_index":217,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{}}}],["registerpile",{"_index":364,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["registerpile(newstate",{"_index":377,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["registertransactionstateelement",{"_index":485,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["registertransactionstateelement(key",{"_index":497,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["registry.service",{"_index":261,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{}}}],["registry.service.ts",{"_index":665,"title":{},"body":{"injectables/PileRegistryService.html":{},"coverage.html":{}}}],["registry.service.ts:17",{"_index":678,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["registry.service.ts:18",{"_index":679,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["registry.service.ts:19",{"_index":687,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["registry.service.ts:24",{"_index":672,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["registry.service.ts:28",{"_index":675,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["registry.service.ts:37",{"_index":677,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["related",{"_index":360,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileRegistryService.html":{}}}],["reload",{"_index":831,"title":{},"body":{"index.html":{}}}],["remove",{"_index":52,"title":{},"body":{"classes/Animal.html":{}}}],["removeelement",{"_index":22,"title":{},"body":{"classes/Animal.html":{}}}],["removeelement(element",{"_index":49,"title":{},"body":{"classes/Animal.html":{}}}],["removes",{"_index":51,"title":{},"body":{"classes/Animal.html":{}}}],["representing",{"_index":312,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["represents",{"_index":8,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["reptileanimal",{"_index":79,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":385,"title":{},"body":{"injectables/GameStateService.html":{}}}],["requiretransaction",{"_index":365,"title":{},"body":{"injectables/GameStateService.html":{}}}],["responsible",{"_index":423,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["rest",{"_index":356,"title":{},"body":{"injectables/GameStateService.html":{}}}],["restriction",{"_index":881,"title":{},"body":{"license.html":{}}}],["results",{"_index":118,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":93,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{}}}],["returns",{"_index":47,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":883,"title":{},"body":{"license.html":{}}}],["rollback",{"_index":560,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["rollbacktransaction",{"_index":366,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["root",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["root'},{'name",{"_index":157,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["routeroutlet",{"_index":134,"title":{},"body":{"components/AppComponent.html":{}}}],["run",{"_index":823,"title":{},"body":{"index.html":{}}}],["running",{"_index":842,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":204,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"dependencies.html":{}}}],["same",{"_index":500,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["scaffolding",{"_index":835,"title":{},"body":{"index.html":{}}}],["seedelement",{"_index":85,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["selected",{"_index":596,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["selector",{"_index":128,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["selector(gamestate",{"_index":530,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["sell",{"_index":890,"title":{},"body":{"license.html":{}}}],["sendgsptobackend",{"_index":316,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["sendgsptobackend(gsp",{"_index":318,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["serve",{"_index":825,"title":{},"body":{"index.html":{}}}],["server",{"_index":822,"title":{},"body":{"index.html":{}}}],["service",{"_index":435,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["service/element",{"_index":206,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["services",{"_index":361,"title":{},"body":{"injectables/GameStateService.html":{}}}],["set",{"_index":476,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{}}}],["setfaction",{"_index":367,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setfaction(newstate",{"_index":387,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setgamestate",{"_index":457,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["setgamestate(newstate",{"_index":505,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["setpile",{"_index":368,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setpile(newstate",{"_index":389,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setstate",{"_index":587,"title":{},"body":{"classes/Pile.html":{}}}],["setstate(newstate",{"_index":614,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["settransactionstateelement",{"_index":486,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["settransactionstateelement(key",{"_index":508,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["several",{"_index":439,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["shall",{"_index":900,"title":{},"body":{"license.html":{}}}],["simple",{"_index":626,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["skip",{"_index":710,"title":{},"body":{"injectables/PileStateService.html":{}}}],["software",{"_index":878,"title":{},"body":{"license.html":{}}}],["someone",{"_index":445,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{},"index.html":{}}}],["species",{"_index":144,"title":{},"body":{"components/AppComponent.html":{}}}],["species.constants",{"_index":263,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{}}}],["species.constants.ts",{"_index":751,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["species_amphibian",{"_index":793,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_arachnid",{"_index":795,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_bird",{"_index":797,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_insect",{"_index":799,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_mammal",{"_index":801,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_reptile",{"_index":803,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesamphibian",{"_index":794,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesarachnid",{"_index":796,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesbird",{"_index":798,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesinsect",{"_index":800,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesmammal",{"_index":802,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesreptile",{"_index":804,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["specified",{"_index":606,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["src/.../animal.model.ts",{"_index":934,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dominant",{"_index":780,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../game",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../piece.model.ts",{"_index":807,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../util.ts",{"_index":806,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.component.ts",{"_index":126,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:13",{"_index":145,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":728,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/engine/model/faction.model.ts",{"_index":274,"title":{},"body":{"interfaces/FactionState.html":{},"coverage.html":{}}}],["src/app/engine/model/game",{"_index":292,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/engine/model/piece.model.ts",{"_index":567,"title":{},"body":{"interfaces/Piece.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/engine/model/pile.model.ts",{"_index":570,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["src/app/engine/model/pile.model.ts:103",{"_index":612,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:23",{"_index":599,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:24",{"_index":597,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:25",{"_index":601,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:26",{"_index":598,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:27",{"_index":600,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:28",{"_index":588,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:48",{"_index":617,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:55",{"_index":620,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:59",{"_index":621,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:63",{"_index":615,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:67",{"_index":602,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:77",{"_index":604,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/player.model.ts",{"_index":721,"title":{},"body":{"interfaces/Player.html":{},"coverage.html":{}}}],["src/app/engine/service/game",{"_index":279,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["src/app/engine/service/pile",{"_index":664,"title":{},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{},"coverage.html":{}}}],["src/app/engine/util.ts",{"_index":745,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/game/component/draw",{"_index":162,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["src/app/game/dominant",{"_index":750,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app/game/model/animal.model.ts",{"_index":6,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/game/model/animal.model.ts:32",{"_index":31,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:42",{"_index":54,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:46",{"_index":60,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:54",{"_index":62,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:59",{"_index":66,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:68",{"_index":38,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:81",{"_index":50,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/service/element",{"_index":243,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"coverage.html":{}}}],["standalone",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["start",{"_index":237,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["started",{"_index":416,"title":{"index.html":{},"license.html":{}},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["starttransaction",{"_index":369,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["startturn",{"_index":176,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["state",{"_index":19,"title":{},"body":{"classes/Animal.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"coverage.html":{}}}],["state.model",{"_index":278,"title":{},"body":{"interfaces/FactionState.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["state.model.ts",{"_index":293,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["state.service",{"_index":202,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["state.service.ts",{"_index":354,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileStateService.html":{},"coverage.html":{}}}],["state.service.ts:10",{"_index":709,"title":{},"body":{"injectables/PileStateService.html":{}}}],["state.service.ts:11",{"_index":707,"title":{},"body":{"injectables/PileStateService.html":{}}}],["state.service.ts:17",{"_index":373,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileStateService.html":{}}}],["state.service.ts:28",{"_index":375,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileStateService.html":{}}}],["state.service.ts:33",{"_index":391,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:37",{"_index":376,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileStateService.html":{}}}],["state.service.ts:50",{"_index":386,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:57",{"_index":379,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:63",{"_index":393,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:67",{"_index":388,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:71",{"_index":395,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:75",{"_index":390,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:79",{"_index":378,"title":{},"body":{"injectables/GameStateService.html":{}}}],["statements",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["statesubject",{"_index":583,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["static",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store.service",{"_index":396,"title":{},"body":{"injectables/GameStateService.html":{}}}],["store.service.ts",{"_index":422,"title":{},"body":{"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["store.service.ts:101",{"_index":522,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:109",{"_index":490,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:114",{"_index":506,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:122",{"_index":515,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:130",{"_index":491,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:139",{"_index":503,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:149",{"_index":523,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:153",{"_index":504,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:157",{"_index":524,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:161",{"_index":507,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:165",{"_index":496,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:32",{"_index":517,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:33",{"_index":518,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:34",{"_index":488,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:40",{"_index":493,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:56",{"_index":509,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:80",{"_index":499,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:97",{"_index":520,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["stored",{"_index":839,"title":{},"body":{"index.html":{}}}],["stores",{"_index":502,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["string",{"_index":64,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":138,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["subject",{"_index":895,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":888,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":269,"title":{},"body":{"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{}}}],["subscribe((drawpool",{"_index":212,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["subscriber",{"_index":682,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["subscribers",{"_index":557,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{}}}],["substantial",{"_index":901,"title":{},"body":{"license.html":{}}}],["substatearray",{"_index":535,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray.findindex((item",{"_index":538,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray.push(newgamestateelement",{"_index":547,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray[index",{"_index":541,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["such",{"_index":436,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{}}}],["suffix",{"_index":100,"title":{},"body":{"classes/Animal.html":{}}}],["sum",{"_index":642,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["sunelement",{"_index":88,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":357,"title":{},"body":{"injectables/GameStateService.html":{}}}],["t",{"_index":494,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["table",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":470,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["takes",{"_index":458,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["template",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["templateurl",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["test",{"_index":845,"title":{},"body":{"index.html":{}}}],["testing",{"_index":853,"title":{},"body":{"index.html":{}}}],["tests",{"_index":844,"title":{},"body":{"index.html":{}}}],["this._drawpool",{"_index":256,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this._gamestate",{"_index":550,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._gamestate[key",{"_index":546,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(deepclone(this._gamestate",{"_index":559,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(newstate",{"_index":553,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(this._transactionstate",{"_index":555,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._state",{"_index":632,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[key",{"_index":643,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[kind",{"_index":657,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[piece.kind",{"_index":663,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.kind",{"_index":645,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._transactionstate",{"_index":532,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._transactionstate[key",{"_index":536,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.applygsp(gsp",{"_index":402,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.drawpool",{"_index":213,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.drawpool.pull",{"_index":228,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.drawpoollength",{"_index":215,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.drawpoolsubject.asobservable",{"_index":254,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.drawpoolsubject.next(this._drawpool",{"_index":271,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.elementdrawpoolsvc.drawpool",{"_index":210,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.elements.length",{"_index":111,"title":{},"body":{"classes/Animal.html":{}}}],["this.emitstate",{"_index":660,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.formatelementname(item[0].kind",{"_index":230,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamemanagementsvc.creategame",{"_index":219,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamestateclient.gsp$.pipe(filter((gsp",{"_index":400,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestateclient.sendgsptobackend(gsp",{"_index":413,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.committransaction",{"_index":412,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.faction",{"_index":417,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.gamestate",{"_index":411,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.pile",{"_index":419,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.registerpile(newstate",{"_index":421,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.rollbacktransaction",{"_index":414,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setfaction(newstate",{"_index":418,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setgamestate(updatedstate",{"_index":405,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setpile(newstate",{"_index":420,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.starttransaction",{"_index":406,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.transactionstate",{"_index":407,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatesubject",{"_index":526,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesubject.asobservable().pipe",{"_index":528,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesubject.next(this.gamestate",{"_index":551,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesvc.committransaction",{"_index":236,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamestatesvc.pile$.subscribe((pilestates",{"_index":711,"title":{},"body":{"injectables/PileStateService.html":{}}}],["this.gamestatesvc.registerpile(pile.state",{"_index":716,"title":{},"body":{"injectables/PileStateService.html":{}}}],["this.gamestatesvc.setpile(pilestate",{"_index":720,"title":{},"body":{"injectables/PileStateService.html":{}}}],["this.gamestatesvc.starttransaction",{"_index":222,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.getobservableforkey((gamestate",{"_index":561,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.getpile(pilestate.kind",{"_index":714,"title":{},"body":{"injectables/PileStateService.html":{}}}],["this.gspservice.apply(this.gamestatestore.gamestate",{"_index":404,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gspservice.create",{"_index":410,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.initialize",{"_index":208,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/PileStateService.html":{}}}],["this.kind.replace('animal",{"_index":102,"title":{},"body":{"classes/Animal.html":{}}}],["this.kindtopile.get(kind",{"_index":697,"title":{},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["this.kindtopile.set(pile.kind",{"_index":701,"title":{},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["this.length",{"_index":639,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.lengthsubject",{"_index":637,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.lengthsubject.asobservable().pipe(distinctuntilchanged",{"_index":640,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.lengthsubject.next(this.length",{"_index":647,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.log.push('pile",{"_index":233,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.log.push(`you",{"_index":231,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.name",{"_index":117,"title":{},"body":{"classes/Animal.html":{}}}],["this.piececounts.get(key",{"_index":648,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.piecefactory",{"_index":633,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.pileregistrysvc.get(dspiecekind.element",{"_index":270,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.pileregistrysvc.register(piles",{"_index":290,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["this.pileregistrysvc.registeredpiles",{"_index":266,"title":{},"body":{"injectables/ElementDrawPoolService.html":{}}}],["this.pilestatesvc.register(piles",{"_index":705,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["this.registeredpilekinds.add(pile.kind",{"_index":702,"title":{},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["this.registeredpilekinds.has(pile.kind",{"_index":700,"title":{},"body":{"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["this.registeredpilekinds.has(pilestate.kind",{"_index":713,"title":{},"body":{"injectables/PileStateService.html":{}}}],["this.registeredpilessubject.asobservable",{"_index":680,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["this.registeredpilessubject.next(this.registeredpilekinds",{"_index":704,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["this.registertransactionstateelement('pile",{"_index":566,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.settransactionstateelement('faction",{"_index":563,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.settransactionstateelement('pile",{"_index":565,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.state",{"_index":91,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.state.addedelements",{"_index":95,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.addedelements.splice(elementindex",{"_index":116,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.inherentelements",{"_index":94,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.kind",{"_index":96,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.owner",{"_index":105,"title":{},"body":{"classes/Animal.html":{}}}],["this.statesubject",{"_index":634,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.statesubject.asobservable",{"_index":636,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.statesubject.next(this.state",{"_index":646,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.transactionstate",{"_index":544,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["those",{"_index":444,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{}}}],["throw",{"_index":108,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["throws",{"_index":107,"title":{},"body":{"classes/Animal.html":{}}}],["timestamp",{"_index":329,"title":{},"body":{"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{}}}],["title",{"_index":140,"title":{},"body":{"components/AppComponent.html":{}}}],["top",{"_index":440,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["tort",{"_index":923,"title":{},"body":{"license.html":{}}}],["total",{"_index":618,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["tpiece",{"_index":576,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["track",{"_index":240,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["tracks",{"_index":628,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["transaction",{"_index":380,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileStateService.html":{}}}],["transactionstate",{"_index":487,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["tree",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["true",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"miscellaneous/variables.html":{}}}],["tsc",{"_index":650,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["tslib",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":221,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["two",{"_index":454,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":34,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"interfaces/Player.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":932,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":537,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["typically",{"_index":464,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["undefined",{"_index":352,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["undefined)).subscribe((gsp",{"_index":401,"title":{},"body":{"injectables/GameStateService.html":{}}}],["unit",{"_index":843,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":652,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["update",{"_index":510,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["updated",{"_index":450,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["updatedstate",{"_index":403,"title":{},"body":{"injectables/GameStateService.html":{}}}],["updates",{"_index":384,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileRegistryService.html":{},"injectables/PileStateService.html":{}}}],["updating",{"_index":534,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["use",{"_index":594,"title":{},"body":{"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":465,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["using",{"_index":431,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileRegistryService.html":{}}}],["validate",{"_index":692,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["validated",{"_index":693,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["value",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":463,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["var",{"_index":155,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["variable",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":935,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":307,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["vars",{"_index":573,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["version",{"_index":819,"title":{},"body":{"index.html":{},"properties.html":{}}}],["via",{"_index":456,"title":{},"body":{"injectables/GameStateStoreService.html":{},"index.html":{}}}],["void",{"_index":48,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/ElementDrawPoolService.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileRegistryService.html":{},"interfaces/PileState.html":{},"injectables/PileStateService.html":{}}}],["warranties",{"_index":908,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":904,"title":{},"body":{"license.html":{}}}],["waterelement",{"_index":83,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["ways",{"_index":455,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["whenever",{"_index":449,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["whether",{"_index":920,"title":{},"body":{"license.html":{}}}],["within",{"_index":688,"title":{},"body":{"injectables/PileRegistryService.html":{}}}],["without",{"_index":98,"title":{},"body":{"classes/Animal.html":{},"license.html":{}}}],["zone.js",{"_index":776,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Animal.html":{"url":"classes/Animal.html","title":"class - Animal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Animal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/game/model/animal.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an animal owned by a player with inherent (printed on the card) and added elements.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addElement\n                            \n                            \n                                removeElement\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elements\n                                \n                                \n                                    kind\n                                \n                                \n                                    name\n                                \n                                \n                                    owner\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: AnimalState)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/model/animal.model.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        AnimalState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnimalState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/game/model/animal.model.ts:32\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addElement\n                        \n                    \n                \n            \n            \n                \naddElement(element: Piece)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/model/animal.model.ts:68\n                        \n                    \n\n\n            \n                \n                        Adds a new element to the animal, ensuring it does not exceed the limit of 6 elements.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            Piece\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to add.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeElement\n                        \n                    \n                \n            \n            \n                \nremoveElement(element: Piece)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/model/animal.model.ts:81\n                        \n                    \n\n\n            \n                \n                        Removes an added element from the animal.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            Piece\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to remove.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elements\n                    \n                \n\n                \n                    \n                        getelements()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:42\n                                \n                            \n                    \n                        \n                                Gets all elements of the animal, including both inherent and added ones.\n\n\n                                \n                                \n                                \n                                    Returns :         Piece[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        kind\n                    \n                \n\n                \n                    \n                        getkind()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:46\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:54\n                                \n                            \n                    \n                        \n                                Gets the name of the animal, based on its kind.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        owner\n                    \n                \n\n                \n                    \n                        getowner()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Player } from '../../engine/model/player.model';\nimport { FactionState } from '../../engine/model/faction.model';\nimport { Piece } from '../../engine/model/piece.model';\n\nexport type AnimalKind =\n  | 'amphibianAnimal'\n  | 'arachnidAnimal'\n  | 'birdAnimal'\n  | 'insectAnimal'\n  | 'mammalAnimal'\n  | 'reptileAnimal';\n\nexport const inherentElementKindByAnimalKind = new Map([\n  ['amphibianAnimal', 'waterElement'],\n  ['arachnidAnimal', 'grubElement'],\n  ['birdAnimal', 'seedElement'],\n  ['insectAnimal', 'grassElement'],\n  ['mammalAnimal', 'meatElement'],\n  ['reptileAnimal', 'sunElement'],\n] as const);\n\nexport type AnimalState = FactionState & {\n  kind: AnimalKind;\n  inherentElements: Piece[];\n  addedElements: Piece[];\n};\n\n/**\n * Represents an animal owned by a player with inherent (printed on the card) and added elements.\n */\nexport class Animal {\n  public state: AnimalState;\n\n  constructor(state: AnimalState) {\n    this.state = state;\n  }\n\n  /**\n   * Gets all elements of the animal, including both inherent and added ones.\n   * @returns A list of all elements.\n   */\n  get elements(): Piece[] {\n    return [...this.state.inherentElements, ...this.state.addedElements];\n  }\n\n  get kind(): AnimalKind {\n    return this.state.kind;\n  }\n\n  /**\n   * Gets the name of the animal, based on its kind.\n   * @returns The capitalized name of the animal without the \"AnimalModel\" suffix.\n   */\n  get name(): string {\n    const animalName = this.kind.replace('Animal', '');\n    return animalName.charAt(0).toUpperCase() + animalName.slice(1);\n  }\n\n  get owner(): Player {\n    return this.state.owner;\n  }\n\n  /**\n   * Adds a new element to the animal, ensuring it does not exceed the limit of 6 elements.\n   * @param element The element to add.\n   * @throws Will throw an error if the animal already has 6 elements.\n   */\n  addElement(element: Piece): void {\n    if (this.elements.length  addedElement.kind === element.kind,\n    );\n    if (elementIndex !== -1) {\n      this.state.addedElements.splice(elementIndex, 1);\n    } else {\n      throw new Error(\n        `${this.name} does not have element kind ${element.kind} as an added element.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                DrawPoolGameComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'dominant-species'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { DrawPoolGameComponent } from './game/component/draw-pool-game/draw-pool-game.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, DrawPoolGameComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'dominant-species';\n}\n\n    \n\n    \n        \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DrawPoolGameComponent', 'selector': 'app-draw-pool-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DrawPoolGameComponent.html":{"url":"components/DrawPoolGameComponent.html","title":"component - DrawPoolGameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DrawPoolGameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/component/draw-pool-game/draw-pool-game.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-draw-pool-game\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatButton\n                            MatTooltip\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./draw-pool-game.component.html\n            \n\n\n\n            \n                styleUrl\n                ./draw-pool-game.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                drawPool\n                            \n                            \n                                drawPoolLength\n                            \n                            \n                                log\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createGame\n                            \n                            \n                                draw\n                            \n                            \n                                endTurn\n                            \n                            \n                                    Private\n                                formatElementName\n                            \n                            \n                                    Private\n                                initialize\n                            \n                            \n                                startTurn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gameManagementSvc: GameManagementService, gameStateSvc: GameStateService, elementDrawPoolSvc: ElementDrawPoolService)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameManagementSvc\n                                                  \n                                                        \n                                                                        GameManagementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gameStateSvc\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        elementDrawPoolSvc\n                                                  \n                                                        \n                                                                        ElementDrawPoolService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createGame\n                        \n                    \n                \n            \n            \n                \ncreateGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draw\n                        \n                    \n                \n            \n            \n                \ndraw()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endTurn\n                        \n                    \n                \n            \n            \n                \nendTurn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:68\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatElementName\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatElementName(kind: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTurn\n                        \n                    \n                \n            \n            \n                \nstartTurn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        drawPool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Pile | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawPoolLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { GameManagementService } from '../../../engine/service/game-management.service';\nimport { MatButton } from '@angular/material/button';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { GameStateService } from '../../../engine/service/game-state.service';\nimport { filter } from 'rxjs';\nimport { Pile } from '../../../engine/model/pile.model';\nimport { ElementDrawPoolService } from '../../service/element-draw-pool.service';\n\n@Component({\n  selector: 'app-draw-pool-game',\n  standalone: true,\n  imports: [MatButton, MatTooltip],\n  templateUrl: './draw-pool-game.component.html',\n  styleUrl: './draw-pool-game.component.scss',\n})\nexport class DrawPoolGameComponent {\n  drawPool: Pile | null = null;\n  drawPoolLength = 0;\n  log: string[] = [];\n  constructor(\n    private gameManagementSvc: GameManagementService,\n    private gameStateSvc: GameStateService,\n    private elementDrawPoolSvc: ElementDrawPoolService,\n  ) {\n    this.initialize();\n  }\n\n  private initialize(): void {\n    const registeredPilesSubscription = this.elementDrawPoolSvc.drawPool$\n      .pipe(filter((drawPool) => drawPool != null))\n      .subscribe((drawPool) => {\n        this.drawPool = drawPool;\n        drawPool.length$.subscribe((length) => {\n          this.drawPoolLength = length;\n        });\n        registeredPilesSubscription.unsubscribe();\n      });\n  }\n\n  createGame(): void {\n    console.log('Create Game');\n    this.gameManagementSvc.createGame();\n  }\n\n  startTurn(): void {\n    console.log('Start Turn');\n    this.gameStateSvc.startTransaction();\n  }\n\n  private formatElementName(kind: string): string {\n    const elementName = kind.replace('Element', '');\n    return elementName.charAt(0).toUpperCase() + elementName.slice(1);\n  }\n\n  draw(): void {\n    if (this.drawPool) {\n      const item = this.drawPool.pull();\n      if (item[0]) {\n        const element = this.formatElementName(item[0].kind);\n        this.log.push(`You drew a ${element}`);\n      } else {\n        this.log.push('Pile is empty!');\n      }\n    }\n  }\n\n  endTurn(): void {\n    console.log('End Turn');\n    this.gameStateSvc.commitTransaction();\n  }\n}\n\n    \n\n    \n        \n  \n    Initialize\n    Start Turn\n    Draw!\n    End Turn\n  \n  \n    Draw Pool: {{ drawPoolLength }}\n    \n      \n        @for (line of log; track $index) {\n          {{ line }}\n        }\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Initialize    Start Turn    Draw!    End Turn        Draw Pool: {{ drawPoolLength }}                  @for (line of log; track $index) {          {{ line }}        }            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DrawPoolGameComponent', 'selector': 'app-draw-pool-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DrawPoolGameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ElementDrawPoolService.html":{"url":"injectables/ElementDrawPoolService.html","title":"injectable - ElementDrawPoolService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ElementDrawPoolService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/game/service/element-draw-pool.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _drawPool\n                            \n                            \n                                drawPool$\n                            \n                            \n                                    Private\n                                drawPoolSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                initialize\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    drawPool\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pileRegistrySvc: PileRegistryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/service/element-draw-pool.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pileRegistrySvc\n                                                  \n                                                        \n                                                                        PileRegistryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/service/element-draw-pool.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _drawPool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Pile | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/game/service/element-draw-pool.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawPool$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.drawPoolSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/game/service/element-draw-pool.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        drawPoolSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n    this._drawPool,\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/game/service/element-draw-pool.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        drawPool\n                    \n                \n\n                \n                    \n                        getdrawPool()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/service/element-draw-pool.service.ts:31\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { PileRegistryService } from '../../engine/service/pile-registry.service';\nimport { Pile } from '../../engine/model/pile.model';\nimport { BehaviorSubject, filter, Observable } from 'rxjs';\nimport { dsPieceKind } from '../dominant-species.constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ElementDrawPoolService {\n  private _drawPool: Pile | null = null;\n  private drawPoolSubject: BehaviorSubject = new BehaviorSubject(\n    this._drawPool,\n  );\n  drawPool$: Observable = this.drawPoolSubject.asObservable();\n\n  constructor(private pileRegistrySvc: PileRegistryService) {\n    this.initialize();\n  }\n\n  private initialize(): void {\n    const registeredPilesSubscription = this.pileRegistrySvc.registeredPiles$\n      .pipe(filter((registeredPiles) => registeredPiles.has(dsPieceKind.ELEMENT)))\n      .subscribe(() => {\n        this._drawPool = this.pileRegistrySvc.get(dsPieceKind.ELEMENT);\n        this.drawPoolSubject.next(this._drawPool);\n        registeredPilesSubscription.unsubscribe();\n      });\n  }\n\n  get drawPool(): Pile | null {\n    return this._drawPool;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FactionState.html":{"url":"interfaces/FactionState.html","title":"interface - FactionState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FactionState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/faction.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            GameStateElement\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            owner\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        owner\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        owner:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Player } from './player.model';\nimport { GameStateElement } from './game-state.model';\n\nexport interface FactionState extends GameStateElement {\n  owner: Player;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameManagementService.html":{"url":"injectables/GameManagementService.html","title":"injectable - GameManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-management.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pileRegistrySvc: PileRegistryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-management.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pileRegistrySvc\n                                                  \n                                                        \n                                                                        PileRegistryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createGame\n                        \n                    \n                \n            \n            \n                \ncreateGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-management.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { baseGameState } from '../../game/dominant-species.constants';\nimport { Pile } from '../model/pile.model';\nimport { PileRegistryService } from './pile-registry.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameManagementService {\n  constructor(private pileRegistrySvc: PileRegistryService) {}\n\n  createGame(): void {\n    const piles: Pile[] = [];\n    baseGameState.pile.forEach((pileState) => {\n      piles.push(new Pile(pileState));\n    });\n    this.pileRegistrySvc.register(piles);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameState.html":{"url":"interfaces/GameState.html","title":"interface - GameState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining the GameState object managed by GameStateStoreService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            faction\n                                        \n                                \n                                \n                                        \n                                            pile\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        faction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        faction:         FactionState[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FactionState[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pile:         PileState[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PileState[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FactionState } from './faction.model';\nimport { PileState } from './pile.model';\n\n/**\n * Defining the GameState object managed by GameStateStoreService\n */\nexport interface GameState {\n  faction: FactionState[];\n  pile: PileState[];\n}\n\nexport const emptyGameState: GameState = {\n  faction: [],\n  pile: [],\n};\n\n/**\n * GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\n * An example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\n * This object defining the state would be of type GameStateElement.\n */\nexport interface GameStateElement {\n  kind: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateClientService.html":{"url":"injectables/GameStateClientService.html","title":"injectable - GameStateClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendGspToBackend\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gsp$\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendGspToBackend\n                        \n                    \n                \n            \n            \n                \nsendGspToBackend(gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-client.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gsp$\n                    \n                \n\n                \n                    \n                        getgsp$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-client.service.ts:13\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { of, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateClientService {\n  sendGspToBackend(gsp: GameStatePatch): void {\n    console.log(JSON.stringify(gsp));\n  }\n\n  get gsp$(): Observable {\n    return of(undefined);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameStateElement.html":{"url":"interfaces/GameStateElement.html","title":"interface - GameStateElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameStateElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state.model.ts\n        \n\n\n            \n                Description\n            \n            \n                GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\nAn example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\nThis object defining the state would be of type GameStateElement.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            kind\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        kind\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        kind:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FactionState } from './faction.model';\nimport { PileState } from './pile.model';\n\n/**\n * Defining the GameState object managed by GameStateStoreService\n */\nexport interface GameState {\n  faction: FactionState[];\n  pile: PileState[];\n}\n\nexport const emptyGameState: GameState = {\n  faction: [],\n  pile: [],\n};\n\n/**\n * GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\n * An example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\n * This object defining the state would be of type GameStateElement.\n */\nexport interface GameStateElement {\n  kind: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameStatePatch.html":{"url":"interfaces/GameStatePatch.html","title":"interface - GameStatePatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameStatePatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state-patch.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            patch\n                                        \n                                \n                                \n                                        \n                                            timeStamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        patch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        patch:     Operation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Operation[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeStamp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Operation } from 'fast-json-patch';\n\nexport interface GameStatePatch {\n  timeStamp: number;\n  patch: Operation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStatePatchService.html":{"url":"injectables/GameStatePatchService.html","title":"injectable - GameStatePatchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStatePatchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-patch.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Creates and applies GameStatePatches\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                apply\n                            \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        apply\n                        \n                    \n                \n            \n            \n                \napply(gameState: GameState, gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-patch.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gameState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GameState\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(oldState: GameState, newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-patch.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GameStatePatch\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameState } from '../model/game-state.model';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { applyPatch, compare } from 'fast-json-patch';\n\n/**\n * Creates and applies GameStatePatches\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStatePatchService {\n  create(oldState: GameState, newState: GameState): GameStatePatch {\n    return {\n      timeStamp: Date.now(),\n      patch: compare(oldState, newState),\n    };\n  }\n\n  apply(gameState: GameState, gsp: GameStatePatch): GameState {\n    return applyPatch(gameState, gsp.patch, undefined, false).newDocument;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateService.html":{"url":"injectables/GameStateService.html","title":"injectable - GameStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The GameStateService provides an interface for the rest of the system to interact with state.\nIt does this by orchestrating the various other GameState related services.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyGsp\n                            \n                            \n                                commitTransaction\n                            \n                            \n                                registerPile\n                            \n                            \n                                requireTransaction\n                            \n                            \n                                rollbackTransaction\n                            \n                            \n                                setFaction\n                            \n                            \n                                setPile\n                            \n                            \n                                startTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    faction$\n                                \n                                \n                                    pile$\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateStore: GameStateStoreService, gspService: GameStatePatchService, gameStateClient: GameStateClientService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-state.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateStore\n                                                  \n                                                        \n                                                                        GameStateStoreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gspService\n                                                  \n                                                        \n                                                                        GameStatePatchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gameStateClient\n                                                  \n                                                        \n                                                                        GameStateClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyGsp\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyGsp(gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \ncommitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerPile\n                        \n                    \n                \n            \n            \n                \nregisterPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requireTransaction\n                        \n                    \n                \n            \n            \n                \nrequireTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Will throw error if there is not a transaction in progress. Call before state updates that require a transaction.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \nrollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFaction\n                        \n                    \n                \n            \n            \n                \nsetFaction(newState: FactionState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            FactionState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPile\n                        \n                    \n                \n            \n            \n                \nsetPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTransaction\n                        \n                    \n                \n            \n            \n                \nstartTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        faction$\n                    \n                \n\n                \n                    \n                        getfaction$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state.service.ts:63\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pile$\n                    \n                \n\n                \n                    \n                        getpile$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state.service.ts:71\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateStoreService } from './game-state-store.service';\nimport { GameStatePatchService } from './game-state-patch.service';\nimport { GameStateClientService } from './game-state-client.service';\nimport { filter, Observable } from 'rxjs';\nimport { FactionState } from '../model/faction.model';\nimport { PileState } from '../model/pile.model';\nimport { GameStatePatch } from '../model/game-state-patch.model';\n\n/**\n * The GameStateService provides an interface for the rest of the system to interact with state.\n * It does this by orchestrating the various other GameState related services.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateService {\n  constructor(\n    private gameStateStore: GameStateStoreService,\n    private gspService: GameStatePatchService,\n    private gameStateClient: GameStateClientService,\n  ) {\n    this.gameStateClient.gsp$.pipe(filter((gsp) => gsp != undefined)).subscribe((gsp) => {\n      this.applyGsp(gsp);\n    });\n  }\n\n  private applyGsp(gsp: GameStatePatch): void {\n    const updatedState = this.gspService.apply(this.gameStateStore.gameState, gsp);\n    this.gameStateStore.setGameState(updatedState);\n  }\n\n  startTransaction(): void {\n    this.gameStateStore.startTransaction();\n  }\n\n  commitTransaction(): void {\n    if (!this.gameStateStore.transactionState) {\n      throw new Error('No transaction in progress to commit');\n    } else {\n      const gsp = this.gspService.create(\n        this.gameStateStore.gameState,\n        this.gameStateStore.transactionState,\n      );\n      this.gameStateStore.commitTransaction();\n      this.gameStateClient.sendGspToBackend(gsp);\n    }\n  }\n\n  rollbackTransaction(): void {\n    this.gameStateStore.rollbackTransaction();\n  }\n\n  /**\n   * Will throw error if there is not a transaction in progress. Call before state updates that require a transaction.\n   */\n  requireTransaction(): void {\n    if (!this.gameStateStore.transactionState) {\n      throw new Error('Transaction has not been started.');\n    }\n  }\n\n  get faction$(): Observable {\n    return this.gameStateStore.faction$;\n  }\n\n  setFaction(newState: FactionState): void {\n    this.gameStateStore.setFaction(newState);\n  }\n\n  get pile$(): Observable {\n    return this.gameStateStore.pile$;\n  }\n\n  setPile(newState: PileState): void {\n    this.gameStateStore.setPile(newState);\n  }\n\n  registerPile(newState: PileState): void {\n    this.gameStateStore.registerPile(newState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateStoreService.html":{"url":"injectables/GameStateStoreService.html","title":"injectable - GameStateStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-store.service.ts\n        \n\n\n            \n                Description\n            \n            \n                GameStateStoreService is responsible for maintain the GameState and making it accessible to others.\nWhen a GameStateStoreService is instantiated, it creates an empty GameState and the various GameStateElements will need to be added by\nusing the register method of the state element management service such as PileService or AreaService.\nThe GameState has several top level keys, and GameStateStoreService provides observables for each of those keys.\nSo if someone was interested in the pile key, then they could subscribe to the pile$ observable.\nA value will be emitted on each observable whenever the GameState is updated, regardless of if the particular key has been updated.\nThe GameState can be updated in one of two ways:\n1.) Via the setGameState method which will takes an entire GameState object and overwrites the previous GameState object. All observables\nwill then emit the values from the new GameState object. This method is typically used when the GameState is updated based on a received GSP.\n2.) Via a transaction, which is typically done via actions taken during a turn. In this case, the startTransaction method is called and\nthe state is updated via calling one or more set methods (such as setPile) and then calling commitTransaction or rollbackTransaction.\nIn Either case, all observables will then emit the values from the new GameState object. This is to ensure that all local objects have the\ncurrent GameState.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _gameState\n                            \n                            \n                                    Private\n                                _transactionState\n                            \n                            \n                                    Private\n                                gameStateSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _setGameState\n                            \n                            \n                                commitTransaction\n                            \n                            \n                                    Private\n                                getObservableForKey\n                            \n                            \n                                registerPile\n                            \n                            \n                                    Private\n                                registerTransactionStateElement\n                            \n                            \n                                rollbackTransaction\n                            \n                            \n                                setFaction\n                            \n                            \n                                setGameState\n                            \n                            \n                                setPile\n                            \n                            \n                                    Private\n                                setTransactionStateElement\n                            \n                            \n                                startTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gameState\n                                \n                                \n                                    transactionState\n                                \n                                \n                                    faction$\n                                \n                                \n                                    pile$\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-state-store.service.ts:34\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _setGameState\n                        \n                    \n                \n            \n            \n                \n                        \n                    _setGameState(newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \ncommitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getObservableForKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getObservableForKey(selector: (state: GameState) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:40\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerPile\n                        \n                    \n                \n            \n            \n                \nregisterPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registerTransactionStateElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerTransactionStateElement(key, newGameStateElement: GameStateElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Used to register a new GameStateElement.\nA transaction must NOT be started. Cannot register the same GameStateElement more than once.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    key of the GameState object that stores this kind of GameStateElement\n\n                                            \n                                        \n                                        \n                                                newGameStateElement\n                                            \n                                                            GameStateElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the GameStateElement to register.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \nrollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFaction\n                        \n                    \n                \n            \n            \n                \nsetFaction(newState: FactionState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            FactionState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGameState\n                        \n                    \n                \n            \n            \n                \nsetGameState(newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPile\n                        \n                    \n                \n            \n            \n                \nsetPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setTransactionStateElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    setTransactionStateElement(key, newGameStateElement: GameStateElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Used to update the state of an already registered GameStateElement.\nA transaction must be started.\nGameStateElement will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    key of the GameState object that stores this kind of GameStateElement\n\n                                            \n                                        \n                                        \n                                                newGameStateElement\n                                            \n                                                            GameStateElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the GameStateElement to update. An existing GameStateElement that matches this passed in\nGameStateElement will be updated.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTransaction\n                        \n                    \n                \n            \n            \n                \nstartTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _gameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState\n\n                    \n                \n                \n                    \n                        Default value : deepClone(emptyGameState) as GameState\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _transactionState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        gameStateSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:34\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gameState\n                    \n                \n\n                \n                    \n                        getgameState()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:97\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        transactionState\n                    \n                \n\n                \n                    \n                        gettransactionState()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:101\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        faction$\n                    \n                \n\n                \n                    \n                        getfaction$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:149\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pile$\n                    \n                \n\n                \n                    \n                        getpile$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:157\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PileState } from '../model/pile.model';\nimport { BehaviorSubject, map, Observable } from 'rxjs';\nimport { FactionState } from '../model/faction.model';\nimport { emptyGameState, GameState, GameStateElement } from '../model/game-state.model';\nimport { Injectable } from '@angular/core';\nimport { deepClone } from 'fast-json-patch';\n\n/**\n * GameStateStoreService is responsible for maintain the GameState and making it accessible to others.\n *\n * When a GameStateStoreService is instantiated, it creates an empty GameState and the various GameStateElements will need to be added by\n * using the register method of the state element management service such as PileService or AreaService.\n *\n * The GameState has several top level keys, and GameStateStoreService provides observables for each of those keys.\n * So if someone was interested in the pile key, then they could subscribe to the pile$ observable.\n * A value will be emitted on each observable whenever the GameState is updated, regardless of if the particular key has been updated.\n *\n * The GameState can be updated in one of two ways:\n *\n * 1.) Via the setGameState method which will takes an entire GameState object and overwrites the previous GameState object. All observables\n * will then emit the values from the new GameState object. This method is typically used when the GameState is updated based on a received GSP.\n *\n * 2.) Via a transaction, which is typically done via actions taken during a turn. In this case, the startTransaction method is called and\n * the state is updated via calling one or more set methods (such as setPile) and then calling commitTransaction or rollbackTransaction.\n * In Either case, all observables will then emit the values from the new GameState object. This is to ensure that all local objects have the\n * current GameState.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateStoreService {\n  private _gameState: GameState = deepClone(emptyGameState) as GameState;\n  private _transactionState: GameState | null = null;\n  private gameStateSubject: BehaviorSubject;\n\n  constructor() {\n    this.gameStateSubject = new BehaviorSubject(this._gameState);\n  }\n\n  private getObservableForKey(selector: (state: GameState) => T): Observable {\n    return this.gameStateSubject.asObservable().pipe(\n      map((gameState) => {\n        return selector(gameState);\n      }),\n    );\n  }\n\n  /**\n   * Used to update the state of an already registered GameStateElement.\n   * A transaction must be started.\n   * @param key key of the GameState object that stores this kind of GameStateElement\n   * @param newGameStateElement the GameStateElement to update. An existing GameStateElement that matches this passed in\n   * GameStateElement will be updated.\n   * @private\n   */\n  private setTransactionStateElement(\n    key: keyof GameState,\n    newGameStateElement: GameStateElement,\n  ): void {\n    if (!this._transactionState) {\n      throw new Error('Must start transaction before updating GameState.');\n    }\n    const subStateArray = this._transactionState[key] as (typeof newGameStateElement)[];\n    const index = subStateArray.findIndex((item) => item.kind === newGameStateElement.kind);\n\n    if (index > -1) {\n      subStateArray[index] = newGameStateElement;\n    } else {\n      throw new Error(`State Element ${JSON.stringify(newGameStateElement)} not registered`);\n    }\n  }\n\n  /**\n   * Used to register a new GameStateElement.\n   * A transaction must NOT be started. Cannot register the same GameStateElement more than once.\n   * @param key key of the GameState object that stores this kind of GameStateElement\n   * @param newGameStateElement the GameStateElement to register.\n   * @private\n   */\n  private registerTransactionStateElement(\n    key: keyof GameState,\n    newGameStateElement: GameStateElement,\n  ): void {\n    if (this.transactionState) {\n      throw new Error('Can not register new State Elements while a transaction is in progress.');\n    }\n    const subStateArray = this._gameState[key] as (typeof newGameStateElement)[];\n    const index = subStateArray.findIndex((item) => item.kind === newGameStateElement.kind);\n\n    if (index > -1) {\n      throw new Error(`State Element ${JSON.stringify(newGameStateElement)} already registered`);\n    } else {\n      subStateArray.push(newGameStateElement);\n    }\n  }\n\n  get gameState(): GameState {\n    return deepClone(this._gameState) as GameState;\n  }\n\n  get transactionState(): GameState | null {\n    if (this._transactionState) {\n      return deepClone(this._transactionState) as GameState;\n    } else {\n      return null;\n    }\n  }\n\n  private _setGameState(newState: GameState) {\n    this._gameState = newState;\n    this.gameStateSubject.next(this.gameState);\n  }\n\n  setGameState(newState: GameState) {\n    if (this._transactionState) {\n      throw new Error('GameState can not be set during a transaction.');\n    } else {\n      this._setGameState(newState);\n    }\n  }\n\n  startTransaction(): void {\n    if (!this._transactionState) {\n      this._transactionState = deepClone(this._gameState) as GameState;\n    } else {\n      throw new Error(\"Can't start transaction as one already in progress.\");\n    }\n  }\n\n  commitTransaction(): void {\n    if (this._transactionState) {\n      this._setGameState(this._transactionState);\n      this._transactionState = null;\n    } else {\n      throw new Error('No transaction in progress to commit');\n    }\n  }\n\n  rollbackTransaction(): void {\n    if (this._transactionState) {\n      this._transactionState = null;\n      // Ensures gameState is a new object so that subscribers can detect the update\n      this._setGameState(deepClone(this._gameState) as GameState);\n    } else {\n      throw new Error('No transaction in progress to rollback');\n    }\n  }\n\n  get faction$(): Observable {\n    return this.getObservableForKey((gameState) => gameState.faction);\n  }\n\n  setFaction(newState: FactionState): void {\n    this.setTransactionStateElement('faction', newState);\n  }\n\n  get pile$(): Observable {\n    return this.getObservableForKey((gameState) => gameState.pile);\n  }\n\n  setPile(newState: PileState): void {\n    this.setTransactionStateElement('pile', newState);\n  }\n\n  registerPile(newState: PileState): void {\n    this.registerTransactionStateElement('pile', newState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Piece.html":{"url":"interfaces/Piece.html","title":"interface - Piece","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Piece\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/piece.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            kind\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        kind\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        kind:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Piece {\n  kind: string;\n}\n\nexport type PieceFactory = (kind: string) => Piece;\n\nexport function defaultPieceFactory(kind: string): Piece {\n  return { kind: kind };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Pile.html":{"url":"classes/Pile.html","title":"class - Pile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Pile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/pile.model.ts\n        \n\n\n            \n                Description\n            \n            \n                A Pile is used to draw one or more random pieces for a defined pool of pieces.\nA Pile has two Type Vars needed to be set when it's instantiated:\nTpiece Kind A type var used to set the kinds of Pieces the Pipe can contain and\nTpiece A type var used to set the type of Piece the Pile creates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _state\n                            \n                            \n                                length$\n                            \n                            \n                                    Private\n                                lengthSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                pieceFactory\n                            \n                            \n                                state$\n                            \n                            \n                                    Private\n                                stateSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitState\n                            \n                            \n                                pull\n                            \n                            \n                                put\n                            \n                            \n                                setState\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                                \n                                    state\n                                \n                                \n                                    kind\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: PileState, pieceFactory: PieceFactory)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/model/pile.model.ts:28\n                            \n                        \n\n                \n                    \n                            Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\nthe pile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        PileState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An object that acts as the definition for the pool of pieces the Pile represents.\nEach key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\nthe pile.\n\n                                                        \n                                                \n                                                \n                                                        pieceFactory\n                                                  \n                                                        \n                                                                        PieceFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A factory function use to build the random selected piece.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PileState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        lengthSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        pieceFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PieceFactory\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:25\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emitState\n                        \n                    \n                \n            \n            \n                \n                        \n                    emitState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pull\n                        \n                    \n                \n            \n            \n                \npull(count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:77\n                        \n                    \n\n\n            \n                \n                        Pulls a specified number of pieces from the pile of the given kind.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                            \n                                                    The number of pieces to pull. Defaults to 1.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     []\n\n                        \n                            \n                                An array of pieces pulled from the pile, or null values if the pile is empty.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(pieces: Piece[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:103\n                        \n                    \n\n\n            \n                \n                        Puts the specified pieces into the pile of the given kind.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pieces\n                                            \n                                                            Piece[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The pieces to put into the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setState\n                        \n                    \n                \n            \n            \n                \nsetState(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:48\n                                \n                            \n                    \n                        \n                                Returns the total number of pieces in the pile.\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:55\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        kind\n                    \n                \n\n                \n                    \n                        getkind()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { defaultPieceFactory, Piece, PieceFactory } from './piece.model';\nimport { GameStateElement } from './game-state.model';\nimport { deepClone } from 'fast-json-patch';\nimport { BehaviorSubject, distinctUntilChanged, Observable } from 'rxjs';\n\n/**\n * PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n */\nexport interface PileState extends GameStateElement {\n  inventory: Record;\n}\n\n/**\n * A Pile is used to draw one or more random pieces for a defined pool of pieces.\n * A Pile has two Type Vars needed to be set when it's instantiated:\n *\n * **Tpiece** Kind A type var used to set the kinds of Pieces the Pipe can contain and\n *\n * **Tpiece** A type var used to set the type of Piece the Pile creates\n *\n */\nexport class Pile {\n  private readonly pieceFactory: PieceFactory;\n  private _state: PileState;\n  private stateSubject: BehaviorSubject;\n  private lengthSubject: BehaviorSubject;\n  state$: Observable;\n  length$: Observable;\n\n  /**\n   * @param state An object that acts as the definition for the pool of pieces the Pile represents.\n   * Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\n   * the pile.\n   * @param pieceFactory A factory function use to build the random selected piece.\n   */\n  constructor(state: PileState, pieceFactory: PieceFactory = defaultPieceFactory) {\n    this._state = state;\n    this.pieceFactory = pieceFactory;\n    this.stateSubject = new BehaviorSubject(this.state);\n    this.state$ = this.stateSubject.asObservable();\n    this.lengthSubject = new BehaviorSubject(this.length);\n    this.length$ = this.lengthSubject.asObservable().pipe(distinctUntilChanged());\n  }\n\n  /**\n   * Returns the total number of pieces in the pile.\n   */\n  get length(): number {\n    return Object.keys(this._state.inventory).reduce(\n      (sum, key) => sum + (this._state.inventory[key] ?? 0),\n      0,\n    );\n  }\n\n  get state(): PileState {\n    return deepClone(this._state) as PileState;\n  }\n\n  get kind(): string {\n    return this._state.kind;\n  }\n\n  setState(newState: PileState) {\n    this._state = newState;\n  }\n\n  private emitState(): void {\n    this.stateSubject.next(this.state);\n    this.lengthSubject.next(this.length);\n  }\n\n  /**\n   * Pulls a specified number of pieces from the pile of the given kind.\n   * @param count The number of pieces to pull. Defaults to 1.\n   * @returns An array of pieces pulled from the pile, or null values if the pile is empty.\n   */\n  pull(count = 1): (Piece | null)[] {\n    const pieces: (Piece | null)[] = [];\n    for (let i = 0; i  {\n        /** this.pieceCounts.get(key) will always return a value, but TSC complains it could be unknown. */\n        const pieceCount = this._state.inventory[key] ?? 0;\n        return pieceCount > 0;\n      });\n\n      if (piecesWithCount.length) {\n        const kind = piecesWithCount[Math.floor(Math.random() * piecesWithCount.length)];\n        const currentCount = this._state.inventory[kind] ?? 0;\n        pieces.push(this.pieceFactory(kind));\n        this._state.inventory[kind] = currentCount - 1;\n      } else {\n        pieces.push(null);\n      }\n    }\n    this.emitState();\n    return pieces;\n  }\n\n  /**\n   * Puts the specified pieces into the pile of the given kind.\n   * @param pieces The pieces to put into the pile.\n   */\n  put(pieces: Piece[]): void {\n    for (const piece of pieces) {\n      // Assume the current count is 0 if the piece is not yet in the inventory\n      const currentItemCount = this._state.inventory[piece.kind] || 0;\n      this._state.inventory[piece.kind] = currentItemCount + 1;\n    }\n    this.emitState();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PileRegistryService.html":{"url":"injectables/PileRegistryService.html","title":"injectable - PileRegistryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PileRegistryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/pile-registry.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kindToPile\n                            \n                            \n                                    Private\n                                registeredPileKinds\n                            \n                            \n                                registeredPiles$\n                            \n                            \n                                    Private\n                                registeredPilesSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pileStateSvc: PileStateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/pile-registry.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pileStateSvc\n                                                  \n                                                        \n                                                                        PileStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(kind: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile-registry.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Pile\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(piles: Pile[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile-registry.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                piles\n                                            \n                                                            Pile[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kindToPile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile-registry.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registeredPileKinds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Set\n\n                    \n                \n                \n                    \n                        Default value : new Set()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile-registry.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registeredPiles$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.registeredPilesSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile-registry.service.ts:24\n                        \n                    \n\n            \n                \n                    Subscribers can use this Observable to determine if the pile they have been interested has been registered. Once the pile is registered,\nthen the subscriber can subscribe to other Observables, such as those made available in kindToLengthObservables\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registeredPilesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject>(new Set())\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile-registry.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Pile } from '../model/pile.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PileStateService } from './pile-state.service';\n\n@Injectable({\n  providedIn: 'root',\n})\n/**\n * PileService is used to interact with the Piles used within the game. It manages their local state and related game state.\n * When the game is initialized, all the Piles to be used within the game would be registered with the PileService using the register method.\n * Callers that are interested in the state of a pile, such as a Component, can subscribe to the registeredPiles$ observable to validate the\n * Pile is registered. Once that is validated, they can make calls such as to pull or put pieces from/to the pile and subscribe to updates in\n * it's length.\n */\nexport class PileRegistryService {\n  private kindToPile: Map = new Map();\n  private registeredPileKinds: Set = new Set();\n  private registeredPilesSubject = new BehaviorSubject>(new Set());\n  /**\n   * Subscribers can use this Observable to determine if the pile they have been interested has been registered. Once the pile is registered,\n   * then the subscriber can subscribe to other Observables, such as those made available in kindToLengthObservables\n   */\n  registeredPiles$: Observable> = this.registeredPilesSubject.asObservable();\n\n  constructor(private pileStateSvc: PileStateService) {}\n\n  public get(kind: string): Pile {\n    const pile = this.kindToPile.get(kind);\n    if (!pile) {\n      throw new Error(`Pile for kind ${kind} is not registered.`);\n    } else {\n      return pile;\n    }\n  }\n\n  register(piles: Pile[]): void {\n    piles.forEach((pile) => {\n      if (!this.registeredPileKinds.has(pile.kind)) {\n        this.kindToPile.set(pile.kind, pile);\n        this.registeredPileKinds.add(pile.kind);\n      } else {\n        throw new Error(`Pile for kind ${pile.kind} already registered.`);\n      }\n    });\n    this.registeredPilesSubject.next(this.registeredPileKinds);\n    this.pileStateSvc.register(piles);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PileState.html":{"url":"interfaces/PileState.html","title":"interface - PileState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PileState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/pile.model.ts\n        \n\n\n            \n                Description\n            \n            \n                PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n\n            \n\n            \n                Extends\n            \n            \n                            GameStateElement\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            inventory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inventory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inventory:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultPieceFactory, Piece, PieceFactory } from './piece.model';\nimport { GameStateElement } from './game-state.model';\nimport { deepClone } from 'fast-json-patch';\nimport { BehaviorSubject, distinctUntilChanged, Observable } from 'rxjs';\n\n/**\n * PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n */\nexport interface PileState extends GameStateElement {\n  inventory: Record;\n}\n\n/**\n * A Pile is used to draw one or more random pieces for a defined pool of pieces.\n * A Pile has two Type Vars needed to be set when it's instantiated:\n *\n * **Tpiece** Kind A type var used to set the kinds of Pieces the Pipe can contain and\n *\n * **Tpiece** A type var used to set the type of Piece the Pile creates\n *\n */\nexport class Pile {\n  private readonly pieceFactory: PieceFactory;\n  private _state: PileState;\n  private stateSubject: BehaviorSubject;\n  private lengthSubject: BehaviorSubject;\n  state$: Observable;\n  length$: Observable;\n\n  /**\n   * @param state An object that acts as the definition for the pool of pieces the Pile represents.\n   * Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\n   * the pile.\n   * @param pieceFactory A factory function use to build the random selected piece.\n   */\n  constructor(state: PileState, pieceFactory: PieceFactory = defaultPieceFactory) {\n    this._state = state;\n    this.pieceFactory = pieceFactory;\n    this.stateSubject = new BehaviorSubject(this.state);\n    this.state$ = this.stateSubject.asObservable();\n    this.lengthSubject = new BehaviorSubject(this.length);\n    this.length$ = this.lengthSubject.asObservable().pipe(distinctUntilChanged());\n  }\n\n  /**\n   * Returns the total number of pieces in the pile.\n   */\n  get length(): number {\n    return Object.keys(this._state.inventory).reduce(\n      (sum, key) => sum + (this._state.inventory[key] ?? 0),\n      0,\n    );\n  }\n\n  get state(): PileState {\n    return deepClone(this._state) as PileState;\n  }\n\n  get kind(): string {\n    return this._state.kind;\n  }\n\n  setState(newState: PileState) {\n    this._state = newState;\n  }\n\n  private emitState(): void {\n    this.stateSubject.next(this.state);\n    this.lengthSubject.next(this.length);\n  }\n\n  /**\n   * Pulls a specified number of pieces from the pile of the given kind.\n   * @param count The number of pieces to pull. Defaults to 1.\n   * @returns An array of pieces pulled from the pile, or null values if the pile is empty.\n   */\n  pull(count = 1): (Piece | null)[] {\n    const pieces: (Piece | null)[] = [];\n    for (let i = 0; i  {\n        /** this.pieceCounts.get(key) will always return a value, but TSC complains it could be unknown. */\n        const pieceCount = this._state.inventory[key] ?? 0;\n        return pieceCount > 0;\n      });\n\n      if (piecesWithCount.length) {\n        const kind = piecesWithCount[Math.floor(Math.random() * piecesWithCount.length)];\n        const currentCount = this._state.inventory[kind] ?? 0;\n        pieces.push(this.pieceFactory(kind));\n        this._state.inventory[kind] = currentCount - 1;\n      } else {\n        pieces.push(null);\n      }\n    }\n    this.emitState();\n    return pieces;\n  }\n\n  /**\n   * Puts the specified pieces into the pile of the given kind.\n   * @param pieces The pieces to put into the pile.\n   */\n  put(pieces: Piece[]): void {\n    for (const piece of pieces) {\n      // Assume the current count is 0 if the piece is not yet in the inventory\n      const currentItemCount = this._state.inventory[piece.kind] || 0;\n      this._state.inventory[piece.kind] = currentItemCount + 1;\n    }\n    this.emitState();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PileStateService.html":{"url":"injectables/PileStateService.html","title":"injectable - PileStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PileStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/pile-state.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kindToPile\n                            \n                            \n                                    Private\n                                registeredPileKinds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getPile\n                            \n                            \n                                    Private\n                                initialize\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateSvc: GameStateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/pile-state.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateSvc\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPile(kind: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile-state.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Pile\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile-state.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(piles: Pile[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile-state.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                piles\n                                            \n                                                            Pile[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kindToPile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile-state.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registeredPileKinds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Set\n\n                    \n                \n                \n                    \n                        Default value : new Set()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile-state.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateService } from './game-state.service';\nimport { Pile } from '../model/pile.model';\nimport { skip } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PileStateService {\n  private registeredPileKinds: Set = new Set();\n  private kindToPile: Map = new Map();\n\n  constructor(private gameStateSvc: GameStateService) {\n    this.initialize();\n  }\n\n  private initialize(): void {\n    this.gameStateSvc.pile$.subscribe((pileStates) => {\n      pileStates.forEach((pileState) => {\n        if (this.registeredPileKinds.has(pileState.kind)) {\n          const pile = this.getPile(pileState.kind);\n          pile.setState(pileState);\n        }\n      });\n    });\n  }\n\n  private getPile(kind: string): Pile {\n    const pile = this.kindToPile.get(kind);\n    if (!pile) {\n      throw new Error(`Pile for kind ${kind} is not registered.`);\n    } else {\n      return pile;\n    }\n  }\n\n  register(piles: Pile[]): void {\n    piles.forEach((pile) => {\n      if (!this.registeredPileKinds.has(pile.kind)) {\n        this.registeredPileKinds.add(pile.kind);\n        this.kindToPile.set(pile.kind, pile);\n        this.gameStateSvc.registerPile(pile.state);\n        // We skip the first value as we just registered the pile and state updates can only happen during a transaction\n        pile.state$.pipe(skip(1)).subscribe((pileState) => {\n          this.gameStateSvc.setPile(pileState);\n        });\n      } else {\n        throw new Error(`Pile for kind ${pile.kind} already registered.`);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Player.html":{"url":"interfaces/Player.html","title":"interface - Player","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Player\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/player.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Player {\n  id: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/engine/model/faction.model.ts\n            \n            interface\n            FactionState\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state-patch.model.ts\n            \n            interface\n            GameStatePatch\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state.model.ts\n            \n            interface\n            GameState\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state.model.ts\n            \n            interface\n            GameStateElement\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state.model.ts\n            \n            variable\n            emptyGameState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/engine/model/piece.model.ts\n            \n            interface\n            Piece\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/piece.model.ts\n            \n            function\n            defaultPieceFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/engine/model/pile.model.ts\n            \n            class\n            Pile\n            \n                33 %\n                (4/12)\n            \n        \n        \n            \n                \n                src/app/engine/model/pile.model.ts\n            \n            interface\n            PileState\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/player.model.ts\n            \n            interface\n            Player\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-management.service.ts\n            \n            injectable\n            GameManagementService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-client.service.ts\n            \n            injectable\n            GameStateClientService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-patch.service.ts\n            \n            injectable\n            GameStatePatchService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-store.service.ts\n            \n            injectable\n            GameStateStoreService\n            \n                18 %\n                (3/16)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state.service.ts\n            \n            injectable\n            GameStateService\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                src/app/engine/service/pile-registry.service.ts\n            \n            injectable\n            PileRegistryService\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/app/engine/service/pile-state.service.ts\n            \n            injectable\n            PileStateService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/engine/util.ts\n            \n            function\n            deepCompare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/game/component/draw-pool-game/draw-pool-game.component.ts\n            \n            component\n            DrawPoolGameComponent\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/game/dominant-species.constants.ts\n            \n            variable\n            baseGameState\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/game/model/animal.model.ts\n            \n            class\n            Animal\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/app/game/model/animal.model.ts\n            \n            variable\n            inherentElementKindByAnimalKind\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/game/service/element-draw-pool.service.ts\n            \n            injectable\n            ElementDrawPoolService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.2.0\n        \n            @angular/cdk : ^18.2.7\n        \n            @angular/common : ^18.2.0\n        \n            @angular/compiler : ^18.2.0\n        \n            @angular/core : ^18.2.0\n        \n            @angular/forms : ^18.2.0\n        \n            @angular/material : ^18.2.7\n        \n            @angular/platform-browser : ^18.2.0\n        \n            @angular/platform-browser-dynamic : ^18.2.0\n        \n            @angular/router : ^18.2.0\n        \n            fast-json-patch : ^3.1.1\n        \n            lodash : ^4.17.21\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.10\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dsPieceKind   (src/.../dominant-species.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/game/dominant-species.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        dsPieceKind\n                    \n                \n                        \n                            \n                                 ELEMENT\n                            \n                        \n                        \n                            \n                                Value : element\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_AMPHIBIAN\n                            \n                        \n                        \n                            \n                                Value : actionPawnAmphibian\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_ARACHNID\n                            \n                        \n                        \n                            \n                                Value : actionPawnArachnid\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_BIRD\n                            \n                        \n                        \n                            \n                                Value : actionPawnBird\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_INSECT\n                            \n                        \n                        \n                            \n                                Value : actionPawnInsect\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_MAMMAL\n                            \n                        \n                        \n                            \n                                Value : actionPawnMammal\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_REPTILE\n                            \n                        \n                        \n                            \n                                Value : actionPawnReptile\n                            \n                        \n                        \n                            \n                                 SPECIES_AMPHIBIAN\n                            \n                        \n                        \n                            \n                                Value : speciesAmphibian\n                            \n                        \n                        \n                            \n                                 SPECIES_ARACHNID\n                            \n                        \n                        \n                            \n                                Value : speciesArachnid\n                            \n                        \n                        \n                            \n                                 SPECIES_BIRD\n                            \n                        \n                        \n                            \n                                Value : speciesBird\n                            \n                        \n                        \n                            \n                                 SPECIES_INSECT\n                            \n                        \n                        \n                            \n                                Value : speciesInsect\n                            \n                        \n                        \n                            \n                                 SPECIES_MAMMAL\n                            \n                        \n                        \n                            \n                                Value : speciesMammal\n                            \n                        \n                        \n                            \n                                 SPECIES_REPTILE\n                            \n                        \n                        \n                            \n                                Value : speciesReptile\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            deepCompare   (src/.../util.ts)\n                        \n                        \n                            defaultPieceFactory   (src/.../piece.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/engine/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deepCompare\n                        \n                    \n                \n            \n            \n                \ndeepCompare(object1, object2)\n                \n            \n\n\n\n\n            \n                \n                        Used to determine if two objects are equal. Often used in distinctUntilChanged().\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                object1\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                object2\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/app/engine/model/piece.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultPieceFactory\n                        \n                    \n                \n            \n            \n                \ndefaultPieceFactory(kind: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Piece\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDominantSpecies\nThis project was generated with Angular CLI version 18.2.5.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 Joe K.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnimalKind   (src/.../animal.model.ts)\n                        \n                        \n                            AnimalState   (src/.../animal.model.ts)\n                        \n                        \n                            PieceFactory   (src/.../piece.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/game/model/animal.model.ts\n    \n    \n        \n            \n                \n                    \n                    AnimalKind\n                \n            \n            \n                \n                            \"amphibianAnimal\" | \"arachnidAnimal\" | \"birdAnimal\" | \"insectAnimal\" | \"mammalAnimal\" | \"reptileAnimal\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AnimalState\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/engine/model/piece.model.ts\n    \n    \n        \n            \n                \n                    \n                    PieceFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            baseGameState   (src/.../dominant-species.constants.ts)\n                        \n                        \n                            emptyGameState   (src/.../game-state.model.ts)\n                        \n                        \n                            inherentElementKindByAnimalKind   (src/.../animal.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideAnimationsAsync('noop'),\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/app/game/dominant-species.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        baseGameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState\n\n                    \n                \n                \n                    \n                        Default value : {\n  faction: [],\n  pile: [\n    {\n      kind: dsPieceKind.ELEMENT as string,\n      inventory: {\n        // 20 Elements each, with 2 being places on Earth, leaving 18 in the bag\n        grassElement: 18,\n        grubElement: 18,\n        meatElement: 18,\n        seedElement: 18,\n        sunElement: 18,\n        waterElement: 18,\n      },\n    },\n  ],\n}\n                    \n                \n\n            \n                \n                    GameState defining the static elements of the DS game\n\n                \n            \n\n        \n    \n\n    src/app/engine/model/game-state.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        emptyGameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState\n\n                    \n                \n                \n                    \n                        Default value : {\n  faction: [],\n  pile: [],\n}\n                    \n                \n\n\n        \n    \n\n    src/app/game/model/animal.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        inherentElementKindByAnimalKind\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map([\n  ['amphibianAnimal', 'waterElement'],\n  ['arachnidAnimal', 'grubElement'],\n  ['birdAnimal', 'seedElement'],\n  ['insectAnimal', 'grassElement'],\n  ['mammalAnimal', 'meatElement'],\n  ['reptileAnimal', 'sunElement'],\n] as const)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
