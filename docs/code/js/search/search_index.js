var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Animal.html",[0,0.731,1,1.752]],["body/classes/Animal.html",[0,0.518,1,3.182,2,1.581,3,0.378,4,0.336,5,0.336,6,1.393,7,1.49,8,2.36,9,3.306,10,2.462,11,4.386,12,3.306,13,3.306,14,4.074,15,3.954,16,0.19,17,0.699,18,3.955,19,1.334,20,1.246,21,3.306,22,3.306,23,1.856,24,1.449,25,1.384,26,3.273,27,1.011,28,2.36,29,4.074,30,1.637,31,3.306,32,1.357,33,0.037,34,0.497,35,1.357,36,3.306,37,2.261,38,2.215,39,3.306,40,1.817,41,3.109,42,3.306,43,3.306,44,3.306,45,3.273,46,2.08,47,1.537,48,1.49,49,2.215,50,2.215,51,2.215,52,2.215,53,2.215,54,2.215,55,4.386,56,2.736,57,3.306,58,3.306,59,1.833,60,2.215,61,2.215,62,2.215,63,2.736,64,0.939,65,2.215,66,2.215,67,0.837,68,2.215,69,1.37,70,2.215,71,2.215,72,0.748,73,3.273,74,2.36,75,2.36,76,2.36,77,2.36,78,2.36,79,2.36,80,1.235,81,1.581,82,1.393,83,1.833,84,1.833,85,1.833,86,1.833,87,1.833,88,1.833,89,2.215,90,2.215,91,2.215,92,2.215,93,1.505,94,2.215,95,2.215,96,2.215,97,2.215,98,1.833,99,2.215,100,2.215,101,2.215,102,2.215,103,2.215,104,2.215,105,2.215,106,1.243,107,2.215,108,1.856,109,2.736,110,1.581,111,2.215,112,2.215,113,3.306,114,2.215,115,1.856,116,2.215,117,2.215,118,0.019,119,0.019]],["title/components/AppComponent.html",[120,1.425,121,1.964]],["body/components/AppComponent.html",[0,0.82,3,0.597,4,0.532,5,0.532,16,0.3,17,0.964,25,1.176,30,1.094,33,0.037,34,0.354,41,2.558,64,0.995,67,1.071,72,0.597,118,0.027,119,0.027,120,2.312,121,3.374,122,3.253,123,2.899,124,2.899,125,2.899,126,2.899,127,2.899,128,3.829,129,4.438,130,2.081,131,3.771,132,3.253,133,3.771,134,5.064,135,3.374,136,3.771,137,4.557,138,3.771,139,4.557,140,5.064,141,1.769,142,1.452,143,3.771,144,4.557,145,3.503,146,1.32,147,2.899,148,3.503,149,2.843,150,2.501,151,3.503,152,2.899,153,3.771,154,2.899,155,3.374,156,2.899,157,2.899,158,2.204,159,1.452,160,2.899,161,2.899]],["title/components/DrawPoolGameComponent.html",[120,1.425,135,1.964]],["body/components/DrawPoolGameComponent.html",[0,0.452,3,0.329,4,0.293,5,0.293,16,0.312,17,0.63,20,1.122,24,0.549,25,1.055,27,1.36,30,1.61,32,1.022,33,0.037,34,0.413,35,1.022,40,0.8,41,2.295,47,1.458,48,1.984,64,1.382,67,1.063,72,0.329,80,1.38,93,0.662,108,1.084,118,0.017,119,0.017,120,1.661,121,1.215,122,2.127,123,1.598,124,1.598,125,1.598,127,1.598,128,2.919,129,3.383,131,2.465,132,2.127,133,2.465,135,2.572,136,2.465,138,2.465,141,1.504,142,1.234,143,1.598,146,0.727,149,3.381,150,3.759,152,1.598,153,2.465,154,1.598,155,2.572,156,1.598,157,1.598,158,3.539,159,1.694,160,1.598,161,1.598,162,4.357,163,1.598,164,3.637,165,3.637,166,2.979,167,2.979,168,4.418,169,4.418,170,3.383,171,4.089,172,2.603,173,2.979,174,3.863,175,4.089,176,1.931,177,2.572,178,3.01,179,2.295,180,3.01,181,2.064,182,2.979,183,2.979,184,1.931,185,1.931,186,1.931,187,2.979,188,1.931,189,1.931,190,1.931,191,1.084,192,1.874,193,1.931,194,2.979,195,1.931,196,1.931,197,1.931,198,1.598,199,1.931,200,1.598,201,1.598,202,1.598,203,0.975,204,1.598,205,1.931,206,1.931,207,1.931,208,1.931,209,1.378,210,2.979,211,1.931,212,1.931,213,1.931,214,1.215,215,1.931,216,1.084,217,1.931,218,1.931,219,1.931,220,1.931,221,1.931,222,3.863,223,1.931,224,1.931,225,1.931,226,1.931,227,1.931,228,1.931,229,1.931,230,1.931,231,1.931,232,1.931,233,1.931,234,1.931,235,1.084,236,1.931,237,1.931,238,2.465,239,2.465,240,4.089,241,2.979]],["title/interfaces/FactionState.html",[69,1.293,242,0.532]],["body/interfaces/FactionState.html",[3,0.737,4,0.656,5,0.656,10,3.246,16,0.37,17,1.099,26,4.786,33,0.036,34,0.437,67,1.099,69,2.154,72,0.737,118,0.031,119,0.031,159,1.792,242,0.737,243,1.792,244,3.578,245,3.711,246,2.31,247,4.324,248,2.427]],["title/injectables/GameManagementService.html",[177,1.964,249,0.806]],["body/injectables/GameManagementService.html",[0,0.89,3,0.648,4,0.577,5,0.577,16,0.326,20,1.809,25,0.981,27,1.736,30,1.5,32,1.304,33,0.037,34,0.384,35,1.304,47,1.187,48,1.809,67,1.169,72,0.648,80,1.187,118,0.028,119,0.028,130,1.736,146,1.432,170,4.575,177,3.021,180,3.974,181,2.792,201,3.146,249,1.24,250,1.736,251,2.658,252,3.146,253,3.802,254,3.802,255,3.802,256,2.714,257,3.802,258,3.802,259,1.5,260,2.391,261,1.919,262,3.146,263,3.146,264,3.802,265,3.802,266,3.802,267,3.802]],["title/interfaces/GameState.html",[242,0.532,268,1.293]],["body/interfaces/GameState.html",[1,2.002,3,0.608,4,0.541,5,0.541,7,1.344,16,0.306,17,0.975,19,1.451,24,1.013,33,0.037,34,0.546,64,1.013,67,0.975,69,2.237,72,0.871,80,1.114,118,0.027,119,0.027,242,0.786,243,1.478,246,2.116,259,1.746,268,2.317,269,2.002,270,2.244,271,3.647,272,3.031,273,3.815,274,2.328,275,3.271,276,2.237,277,2.951,278,2.951,279,2.002,280,3.815,281,2.951,282,2.9,283,2.951,284,2.244,285,2.951,286,2.546,287,2.951,288,1.629,289,2.951,290,2.951]],["title/injectables/GameStateClientService.html",[249,0.806,291,1.964]],["body/injectables/GameStateClientService.html",[0,0.905,3,0.659,4,0.587,5,0.587,16,0.331,19,1.58,20,1.828,23,2.724,25,0.998,30,1.515,32,1.326,33,0.037,34,0.391,35,1.326,47,1.207,48,1.828,67,1.122,72,0.659,93,1.326,118,0.028,119,0.028,130,1.765,146,1.456,203,1.952,216,2.724,249,1.253,250,1.765,251,2.678,261,1.952,291,3.052,292,3.199,293,4.852,294,3.499,295,4.852,296,2.809,297,3.865,298,3.865,299,3.865,300,2.432,301,2.759,302,3.865,303,3.865]],["title/interfaces/GameStateElement.html",[242,0.532,246,1.293]],["body/interfaces/GameStateElement.html",[1,2.529,3,0.587,4,0.522,5,0.522,7,1.297,16,0.295,17,0.953,19,1.612,24,1.514,33,0.037,34,0.559,64,1.427,67,0.953,69,1.867,72,0.856,80,1.075,118,0.026,119,0.026,242,0.768,243,1.426,246,2.35,259,1.407,268,2.081,269,1.932,270,2.166,271,3.585,272,3.103,273,2.849,274,1.738,275,3.184,276,1.867,277,2.849,278,2.849,279,1.932,280,4.408,281,3.728,282,3.351,283,3.728,284,2.834,285,3.728,286,3.216,287,3.728,288,2.057,289,3.728,290,3.728]],["title/interfaces/GameStatePatch.html",[242,0.532,296,1.576]],["body/interfaces/GameStatePatch.html",[3,0.731,4,0.65,5,0.65,16,0.367,17,1.093,19,1.217,33,0.036,34,0.522,67,0.906,72,0.731,118,0.03,119,0.03,191,3.116,242,0.731,243,1.775,269,2.405,296,2.61,304,3.545,305,2.98,306,4.771,307,5.765,308,2.163,309,2.163]],["title/injectables/GameStatePatchService.html",[249,0.806,310,1.964]],["body/injectables/GameStatePatchService.html",[0,0.792,3,0.577,4,0.514,5,0.514,7,1.275,16,0.29,19,1.503,20,1.678,25,1.15,30,1.391,32,1.528,33,0.037,34,0.45,35,1.528,47,1.391,67,1.119,72,0.577,93,1.528,118,0.026,119,0.026,130,1.545,146,1.275,248,1.899,249,1.15,250,1.545,251,2.514,261,1.708,268,2.52,294,3.132,296,2.85,300,2.802,301,2.416,305,2.249,306,2.8,308,1.708,309,1.708,310,2.802,311,2.8,312,2.802,313,4.454,314,4.454,315,4.454,316,4.454,317,4.454,318,3.384,319,4.454,320,2.97,321,3.384,322,3.384,323,3.384,324,3.384,325,3.384,326,3.384,327,3.384,328,3.384,329,3.384,330,3.384]],["title/injectables/GameStateService.html",[179,1.752,249,0.806]],["body/injectables/GameStateService.html",[0,0.497,3,0.362,4,0.322,5,0.322,7,0.8,16,0.182,19,1.471,20,1.207,23,1.798,25,1.19,27,1.462,30,1.713,32,1.581,33,0.037,34,0.466,35,1.581,40,1.327,47,1.617,48,2.174,67,1.095,69,1.779,72,0.362,80,1,93,1.099,108,2.411,109,2.65,118,0.019,119,0.019,130,0.969,146,0.8,159,1.598,172,2.446,179,2.411,202,1.757,203,1.072,216,2.165,242,0.546,249,0.827,250,0.969,251,2.806,259,1.204,260,1.336,261,1.072,268,1.327,274,2.168,275,2.165,276,2.084,284,2.015,286,2.286,291,2.702,294,2.702,296,2.168,300,1.336,301,1.516,310,2.702,320,2.165,331,1.757,332,2.65,333,3.203,334,3.203,335,2.65,336,3.203,337,2.65,338,3.203,339,3.203,340,3.554,341,2.65,342,4.295,343,3.554,344,2.65,345,2.65,346,3.554,347,2.123,348,3.856,349,3.856,350,2.123,351,3.203,352,2.123,353,2.123,354,2.65,355,2.123,356,2.123,357,3.814,358,3.191,359,3.203,360,2.65,361,2.65,362,3.203,363,2.123,364,2.65,365,2.123,366,2.65,367,2.123,368,2.123,369,1.757,370,2.123,371,1.516,372,2.123,373,2.123,374,2.123,375,2.123,376,1.757,377,2.123,378,2.123,379,2.123,380,2.123,381,2.123,382,2.123,383,2.123,384,3.856,385,1.757,386,1.757,387,2.123,388,2.123,389,2.123,390,2.123,391,2.123,392,2.123,393,1.336,394,2.123,395,2.123,396,2.123,397,2.123,398,2.123]],["title/injectables/GameStateStoreService.html",[249,0.806,274,1.576]],["body/injectables/GameStateStoreService.html",[0,0.25,3,0.182,4,0.162,5,0.162,7,0.91,14,1.521,15,0.764,16,0.277,17,0.389,19,1.575,20,1.08,23,1.032,24,0.815,25,1.028,27,1.103,30,1.605,32,1.428,33,0.037,34,0.462,35,1.366,40,2.078,41,1.61,47,1.391,48,1.936,63,1.521,67,0.746,69,1.188,72,0.182,80,0.895,82,0.673,93,1.294,106,1.61,108,2.235,110,2.047,115,1.61,118,0.011,119,0.011,128,0.764,130,0.489,141,0.928,142,1.188,146,0.403,172,2.694,181,0.928,203,0.54,209,1.312,216,2.336,222,1.521,235,1.032,238,1.521,246,2.258,248,0.601,249,0.475,250,0.489,251,2.623,259,1.178,260,0.673,261,0.54,268,2.467,272,2.629,274,2.011,275,1.356,276,1.563,279,0.601,282,1.156,284,1.156,288,1.309,294,1.156,300,0.673,305,0.54,308,0.54,309,0.54,312,1.156,320,2.336,332,1.521,340,2.917,341,1.521,343,2.917,344,1.521,345,2.373,346,2.917,354,1.521,357,3.786,358,2.373,360,0.885,364,1.521,366,1.521,369,0.885,371,0.764,376,0.885,385,1.521,386,0.885,393,1.804,399,0.885,400,1.838,401,1.838,402,1.838,403,1.838,404,1.838,405,1.312,406,1.838,407,1.521,408,1.521,409,3.444,410,3.296,411,1.838,412,1.838,413,2.373,414,1.838,415,1.838,416,1.838,417,1.838,418,2.867,419,2.917,420,1.521,421,1.838,422,1.521,423,3.006,424,1.838,425,1.838,426,4.683,427,1.838,428,1.521,429,2.305,430,1.156,431,1.838,432,3.296,433,2.867,434,1.838,435,1.838,436,1.838,437,1.838,438,2.867,439,1.804,440,2.867,441,1.979,442,1.838,443,1.312,444,1.838,445,1.838,446,1.838,447,2.416,448,2.867,449,1.838,450,2.867,451,1.804,452,1.52,453,1.838,454,1.521,455,1.312,456,2.416,457,2.416,458,2.416,459,1.838,460,1.838,461,2.416,462,2.416,463,2.416,464,1.838,465,1.838,466,1.07,467,1.07,468,1.838,469,1.07,470,1.838,471,0.54,472,1.07,473,1.07,474,4.455,475,1.07,476,1.838,477,1.521,478,2.867,479,1.07,480,1.07,481,1.838,482,1.07,483,1.07,484,1.07,485,1.07,486,3.229,487,2.373,488,1.838,489,1.838,490,1.838,491,1.07,492,1.838,493,1.07,494,2.505,495,1.07,496,2,497,1.07,498,1.07,499,1.07,500,1.07,501,1.07,502,1.07,503,0.764,504,1.07,505,1.07,506,1.07,507,1.07,508,1.07,509,1.838,510,4.162,511,1.07,512,1.07,513,1.838,514,1.07,515,1.838,516,1.838,517,1.838,518,1.838,519,1.07,520,1.838,521,1.838,522,1.07,523,1.07,524,1.07,525,1.07,526,1.838,527,1.07,528,1.07,529,1.07,530,1.07,531,1.07,532,1.07,533,1.07,534,1.07,535,0.885,536,1.07,537,1.07,538,1.07,539,1.838,540,1.07,541,1.07,542,1.07,543,1.07,544,1.07]],["title/interfaces/Piece.html",[37,1.293,242,0.532]],["body/interfaces/Piece.html",[3,0.726,4,0.646,5,0.646,16,0.365,17,1.089,24,1.721,33,0.037,34,0.52,37,2.384,64,1.674,72,0.944,93,1.46,118,0.03,119,0.03,242,0.726,243,1.764,471,2.15,545,2.678,546,2.678,547,3.523]],["title/classes/Pile.html",[0,0.731,259,0.975]],["body/classes/Pile.html",[0,0.393,2,1.199,3,0.287,4,0.255,5,0.255,7,1.428,8,2.705,16,0.144,17,0.565,19,1.251,20,1.007,23,1.5,24,1.493,25,0.978,27,0.767,28,1.907,30,1.613,32,1.3,33,0.037,34,0.546,35,1.3,37,2.36,46,1.681,47,1.442,48,1.253,59,1.39,64,0.477,67,0.703,72,0.456,80,1.375,93,1.51,106,2.127,115,2.127,118,0.016,119,0.016,141,0.848,142,1.107,149,2.127,155,2.384,158,2.384,159,0.696,172,2.223,191,2.69,192,3.014,214,2.092,235,1.867,242,0.287,245,1.199,246,1.107,248,0.943,259,1.832,272,1.5,276,2.178,288,1.888,305,0.848,308,0.848,309,0.848,312,1.681,320,1.5,405,1.907,423,2.384,429,1.907,430,1.681,439,2.092,441,2.472,451,1.681,452,2.77,455,1.199,471,1.349,494,2.384,503,1.199,546,3.4,548,1.199,549,3.136,550,4.135,551,2.211,552,2.211,553,1.907,554,3.136,555,2.752,556,2.211,557,2.211,558,2.752,559,2.752,560,2.211,561,2.211,562,2.671,563,2.671,564,2.374,565,3.144,566,2.211,567,2.211,568,2.211,569,1.5,570,1.907,571,2.211,572,1.68,573,2.211,574,1.68,575,2.752,576,3.422,577,2.705,578,2.211,579,2.211,580,1.68,581,2.211,582,1.68,583,1.68,584,1.68,585,2.211,586,1.68,587,1.68,588,1.68,589,1.681,590,1.39,591,1.39,592,1.39,593,1.39,594,1.39,595,1.39,596,1.907,597,1.39,598,2.211,599,1.39,600,1.39,601,2.211,602,2.211,603,1.39,604,1.39,605,1.39,606,1.39,607,1.39,608,1.39,609,1.39,610,2.211,611,2.211,612,1.39,613,2.211,614,2.211,615,1.39,616,1.39,617,1.39,618,2.211,619,2.211]],["title/injectables/PileService.html",[181,1.576,249,0.806]],["body/injectables/PileService.html",[0,0.334,3,0.243,4,0.217,5,0.217,7,0.882,16,0.122,17,0.495,19,0.846,20,0.882,24,1.53,25,1.055,27,0.652,30,1.644,32,1.402,33,0.037,34,0.497,35,1.402,37,1.576,40,2.152,47,1.537,48,1.893,64,1.326,67,0.805,72,0.243,80,1.458,82,3.267,93,0.803,106,1.934,108,1.671,110,1.019,115,1.934,118,0.014,119,0.014,120,0.652,130,0.652,141,2.18,142,1.934,146,0.538,159,1.576,172,2.906,174,2.851,178,1.938,179,1.934,181,1.74,191,2.294,198,1.181,203,0.721,204,1.181,209,2.46,214,1.873,216,2.53,235,1.314,249,0.605,250,0.652,259,1.886,260,0.898,261,0.721,262,1.181,263,2.464,288,1.069,335,1.181,337,1.181,361,1.181,371,1.672,408,1.181,409,2.464,410,1.181,413,2.851,419,1.938,420,1.938,422,2.464,423,1.473,439,1.473,441,1.671,452,2.571,454,1.181,477,2.464,487,3.975,494,1.873,496,1.181,535,1.938,550,3.977,553,1.019,560,3.573,561,3.573,565,2.46,569,1.314,577,1.672,620,1.181,621,3.804,622,2.977,623,2.977,624,2.977,625,3.445,626,2.977,627,2.342,628,3.445,629,3.445,630,1.427,631,2.342,632,2.342,633,1.427,634,2.342,635,1.427,636,1.427,637,2.342,638,1.427,639,2.342,640,3.445,641,3.445,642,2.342,643,2.342,644,2.342,645,1.427,646,2.342,647,2.342,648,1.427,649,1.427,650,1.427,651,1.938,652,2.342,653,2.342,654,1.427,655,1.427,656,1.427,657,2.342,658,1.427,659,1.938,660,2.342,661,2.342,662,2.342,663,2.342,664,1.427,665,1.427,666,1.181,667,2.342,668,1.427,669,1.427,670,1.427,671,1.427,672,1.427,673,1.427,674,1.427,675,1.427,676,1.427,677,1.427,678,1.427,679,1.427,680,2.977,681,3.804,682,1.427,683,1.427,684,1.427,685,1.427,686,2.977,687,2.342,688,1.427,689,1.427,690,1.427,691,2.342,692,1.427,693,1.427,694,1.427,695,1.427,696,1.427,697,1.427,698,1.427,699,1.427,700,1.427,701,1.427,702,2.342,703,2.342,704,1.427,705,2.342,706,1.427]],["title/interfaces/PileState.html",[242,0.532,276,1.293]],["body/interfaces/PileState.html",[0,0.517,3,0.376,4,0.335,5,0.335,7,0.832,8,2.355,16,0.189,17,0.698,19,1.122,24,1.332,28,1.576,30,0.689,33,0.037,34,0.474,37,2.293,46,1.389,47,1.03,48,0.832,64,0.627,67,0.835,72,0.562,80,1.535,93,1.687,106,2.458,115,2.216,118,0.019,119,0.019,142,0.915,149,1.851,155,2.075,158,2.075,159,0.915,172,1.665,191,2.216,192,3.295,214,1.389,235,1.239,242,0.376,243,0.915,245,2.355,246,1.636,248,1.239,259,1.769,272,1.239,276,2.219,288,1.506,305,1.115,308,1.115,309,1.115,312,1.389,320,1.239,405,1.576,423,2.075,429,1.576,430,1.389,439,1.389,441,2.216,451,1.389,452,2.484,455,1.576,471,1.115,494,2.484,503,1.576,546,3.205,548,1.576,549,2.729,550,4.083,551,1.827,552,1.827,553,1.576,554,2.729,555,3.267,556,1.827,557,1.827,558,1.827,559,1.827,564,1.576,565,2.819,566,1.827,567,1.827,568,1.827,569,1.239,570,1.576,571,1.827,573,1.827,575,1.827,576,2.729,577,2.355,578,1.827,579,1.827,581,1.827,585,1.827,589,2.075,590,1.827,591,2.729,592,2.729,593,2.729,594,2.729,595,2.729,596,3.346,597,3.267,598,2.729,599,1.827,600,1.827,601,2.729,602,2.729,603,1.827,604,1.827,605,1.827,606,1.827,607,1.827,608,1.827,609,1.827,610,2.729,611,2.729,612,1.827,613,2.729,614,2.729,615,1.827,616,1.827,617,1.827,618,2.729,619,2.729]],["title/interfaces/Player.html",[10,1.752,242,0.532]],["body/interfaces/Player.html",[3,0.751,4,0.669,5,0.669,10,2.951,16,0.378,17,1.112,25,1.502,33,0.035,34,0.531,64,1.715,72,0.751,118,0.031,119,0.031,242,0.751,243,1.826,707,3.646,708,5.819]],["title/coverage.html",[709,3.493]],["body/coverage.html",[0,0.982,1,1.738,5,0.47,6,2.641,10,1.738,19,1.451,33,0.037,34,0.313,37,1.283,40,1.283,69,1.283,81,2.21,118,0.025,119,0.025,120,1.917,121,1.948,126,2.562,135,1.948,149,2.356,150,2.21,162,2.562,163,2.562,177,1.948,179,1.738,181,1.563,192,3.754,242,0.96,244,2.562,246,1.283,249,1.421,251,2.695,252,2.562,256,2.21,259,0.967,268,1.283,269,2.866,270,2.996,274,1.563,276,1.283,279,1.738,291,1.948,292,2.562,296,1.563,304,2.562,310,1.948,311,2.562,331,2.562,399,2.562,471,2.12,545,2.641,548,2.997,589,1.948,620,2.562,707,2.562,709,2.562,710,2.562,711,3.096,712,3.096,713,5.106,714,2.562,715,5.106,716,2.562,717,5.106,718,4.763,719,4.198,720,4.198,721,4.198,722,4.198,723,3.096,724,3.096,725,2.562,726,3.096,727,2.562,728,3.096,729,3.096,730,3.096,731,2.562,732,2.562,733,4.198,734,4.198,735,3.096,736,2.21,737,2.21,738,3.096,739,3.096,740,3.096,741,3.096]],["title/dependencies.html",[742,1.875,743,3.098]],["body/dependencies.html",[33,0.037,118,0.03,119,0.03,146,1.566,147,3.439,203,2.098,305,2.098,308,2.098,309,2.098,743,3.439,744,4.155,745,6.084,746,4.155,747,5.074,748,4.155,749,4.155,750,4.155,751,4.155,752,5.074,753,5.074,754,4.155,755,4.155,756,4.155,757,4.155,758,4.155,759,4.155,760,4.155,761,4.155,762,4.155]],["title/miscellaneous/enumerations.html",[763,1.088,764,3.098]],["body/miscellaneous/enumerations.html",[16,0.346,33,0.037,41,2.797,118,0.029,119,0.029,142,2.578,200,4.124,736,2.88,737,3.558,763,1.672,764,3.338,765,3.338,766,4.034,767,4.034,768,4.034,769,4.034,770,4.034,771,4.034,772,4.034,773,4.034,774,4.034,775,4.034,776,4.034,777,4.034,778,4.034,779,4.034,780,4.034,781,4.034,782,4.034,783,4.034,784,4.034,785,4.034,786,4.034,787,4.034,788,4.034,789,4.034]],["title/miscellaneous/functions.html",[763,1.088,790,3.098]],["body/miscellaneous/functions.html",[16,0.367,24,1.217,25,1.334,32,1.773,33,0.035,34,0.433,35,1.773,37,1.775,47,1.614,64,1.469,118,0.03,119,0.03,282,2.695,430,2.695,441,2.902,545,2.695,547,3.545,589,3.252,659,3.545,666,3.545,731,3.545,732,4.278,763,1.775,790,3.545,791,4.284,792,3.545,793,4.284,794,5.169,795,4.284,796,4.284,797,4.284]],["title/index.html",[16,0.225,393,1.652,798,2.173]],["body/index.html",[4,0.547,25,0.93,33,0.027,40,1.493,46,2.267,118,0.027,119,0.027,120,2.344,239,4.752,407,2.982,432,3.84,451,2.267,569,2.881,570,3.87,742,2.573,799,3.604,800,4.641,801,3.604,802,5.133,803,5.133,804,2.982,805,3.604,806,3.604,807,4.641,808,5.609,809,5.842,810,3.604,811,3.604,812,3.604,813,3.604,814,3.604,815,3.604,816,3.604,817,3.604,818,2.982,819,3.604,820,3.604,821,5.133,822,3.604,823,3.604,824,3.604,825,3.604,826,3.604,827,4.641,828,4.641,829,5.421,830,3.604,831,4.641,832,3.604,833,3.604,834,3.604,835,3.604,836,4.641,837,3.604,838,3.604,839,3.604,840,3.604,841,3.604,842,5.133,843,3.604,844,3.604,845,2.982,846,2.573,847,3.604,848,3.604]],["title/license.html",[393,1.652,798,2.173,849,2.173]],["body/license.html",[24,1.049,33,0.028,56,3.899,98,4.296,118,0.028,119,0.028,428,3.054,564,2.634,569,2.645,710,3.054,818,3.054,845,3.054,849,3.054,850,3.69,851,5.191,852,3.69,853,3.69,854,3.69,855,3.69,856,4.712,857,3.69,858,3.69,859,3.69,860,3.69,861,3.69,862,3.69,863,4.712,864,6.005,865,3.69,866,3.69,867,3.69,868,3.69,869,3.69,870,3.69,871,3.69,872,3.69,873,3.69,874,3.69,875,3.69,876,3.69,877,4.712,878,3.69,879,3.69,880,3.69,881,3.69,882,3.69,883,3.69,884,3.69,885,4.712,886,4.712,887,3.69,888,3.69,889,3.69,890,3.69,891,3.69,892,3.69,893,3.69,894,3.69,895,3.69,896,3.69,897,3.69,898,3.69,899,3.69,900,3.69,901,3.69,902,3.69,903,3.69,904,3.69,905,3.69,906,3.69,907,3.69,908,3.69,909,3.69,910,3.69,911,3.69,912,3.69,913,3.69]],["title/modules.html",[914,3.493]],["body/modules.html",[33,0.033,118,0.033,119,0.033,914,4.045]],["title/overview.html",[846,3.013]],["body/overview.html",[2,3.394,33,0.032,45,3.934,118,0.032,119,0.032,122,3.394,243,1.97,250,2.171,443,3.925,846,3.394,915,4.754]],["title/properties.html",[17,0.792,742,1.875]],["body/properties.html",[17,1.023,33,0.034,118,0.033,119,0.033,804,4.003,916,4.837]],["title/miscellaneous/typealiases.html",[763,1.088,917,3.743]],["body/miscellaneous/typealiases.html",[6,2.817,16,0.384,29,4.392,33,0.036,34,0.452,73,4.392,74,3.197,75,3.197,76,3.197,77,3.197,78,3.197,79,3.197,118,0.031,119,0.031,471,2.261,545,2.817,546,3.339,763,1.855,792,3.705,918,4.478,919,4.392]],["title/miscellaneous/variables.html",[763,1.088,920,3.098]],["body/miscellaneous/variables.html",[6,2.16,15,3.211,16,0.294,24,0.976,33,0.037,34,0.507,40,1.423,64,0.976,74,2.452,75,2.452,76,2.452,77,2.452,78,2.452,79,2.452,80,1.072,81,3.211,82,2.16,83,3.722,84,3.722,85,3.722,86,3.722,87,3.722,88,3.722,118,0.026,119,0.026,132,2.452,141,2.687,142,2.205,159,1.423,256,3.211,259,1.405,268,2.078,269,1.928,270,2.829,271,2.452,275,2.525,279,2.525,288,1.568,443,2.452,596,2.452,651,2.842,714,2.842,716,3.722,725,4.779,727,2.842,736,2.452,737,3.211,763,1.423,765,2.842,919,2.842,920,2.842,921,3.434,922,3.434,923,3.434,924,3.434,925,3.434,926,3.434,927,3.434,928,3.434,929,3.434,930,3.434,931,3.434,932,3.434,933,3.434,934,3.434,935,3.434]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":192,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["0.0.0",{"_index":916,"title":{},"body":{"properties.html":{}}}],["0.14.10",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":115,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["1/1",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":725,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["18.2.0",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["18.2.5",{"_index":805,"title":{},"body":{"index.html":{}}}],["18.2.7",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":443,"title":{},"body":{"injectables/GameStateStoreService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.3.0",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["2/10",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":727,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["2024",{"_index":853,"title":{},"body":{"license.html":{}}}],["25",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["3.1.1",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["3/16",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["4.17.21",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["4/16",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":45,"title":{},"body":{"classes/Animal.html":{},"overview.html":{}}}],["60",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":915,"title":{},"body":{"overview.html":{}}}],["7.8.0",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["_gamestate",{"_index":456,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_setgamestate",{"_index":459,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_setgamestate(newstate",{"_index":465,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_state",{"_index":558,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["_transactionstate",{"_index":457,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["above",{"_index":884,"title":{},"body":{"license.html":{}}}],["accessible",{"_index":403,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["accessors",{"_index":23,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["action",{"_index":907,"title":{},"body":{"license.html":{}}}],["action_pawn_amphibian",{"_index":766,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_arachnid",{"_index":768,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_bird",{"_index":770,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_insect",{"_index":772,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_mammal",{"_index":774,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_reptile",{"_index":776,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnamphibian",{"_index":767,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnarachnid",{"_index":769,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnbird",{"_index":771,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawninsect",{"_index":773,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnmammal",{"_index":775,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnreptile",{"_index":777,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actions",{"_index":445,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["acts",{"_index":566,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["actual_component",{"_index":161,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["add",{"_index":46,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"index.html":{}}}],["added",{"_index":14,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{}}}],["addedelement.kind",{"_index":112,"title":{},"body":{"classes/Animal.html":{}}}],["addedelements",{"_index":90,"title":{},"body":{"classes/Animal.html":{}}}],["addelement",{"_index":21,"title":{},"body":{"classes/Animal.html":{}}}],["addelement(element",{"_index":36,"title":{},"body":{"classes/Animal.html":{}}}],["adds",{"_index":39,"title":{},"body":{"classes/Animal.html":{}}}],["aliases",{"_index":918,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":110,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["always",{"_index":606,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["amphibiananimal",{"_index":74,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":875,"title":{},"body":{"license.html":{}}}],["angular",{"_index":802,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":146,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":196,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["angular/material/tooltip",{"_index":197,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["angular/platform",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":147,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["animal",{"_index":1,"title":{"classes/Animal.html":{}},"body":{"classes/Animal.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"coverage.html":{}}}],["animalkind",{"_index":73,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{}}}],["animalmodel",{"_index":99,"title":{},"body":{"classes/Animal.html":{}}}],["animalname",{"_index":101,"title":{},"body":{"classes/Animal.html":{}}}],["animalname.charat(0).touppercase",{"_index":103,"title":{},"body":{"classes/Animal.html":{}}}],["animalname.slice(1",{"_index":104,"title":{},"body":{"classes/Animal.html":{}}}],["animalstate",{"_index":29,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{}}}],["app",{"_index":129,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["app.component.html",{"_index":137,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":139,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":121,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":716,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":814,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applies",{"_index":313,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["apply",{"_index":315,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["apply(gamestate",{"_index":317,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["applygsp",{"_index":339,"title":{},"body":{"injectables/GameStateService.html":{}}}],["applygsp(gsp",{"_index":351,"title":{},"body":{"injectables/GameStateService.html":{}}}],["applypatch",{"_index":323,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["applypatch(gamestate",{"_index":327,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["arachnidanimal",{"_index":75,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["areaservice",{"_index":414,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["arising",{"_index":911,"title":{},"body":{"license.html":{}}}],["array",{"_index":577,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["artifacts",{"_index":823,"title":{},"body":{"index.html":{}}}],["associated",{"_index":865,"title":{},"body":{"license.html":{}}}],["assume",{"_index":617,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["authors",{"_index":900,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":815,"title":{},"body":{"index.html":{}}}],["available",{"_index":662,"title":{},"body":{"injectables/PileService.html":{}}}],["bag",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":281,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["based",{"_index":63,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{}}}],["basegamestate",{"_index":256,"title":{},"body":{"injectables/GameManagementService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["basegamestate.pile.foreach((pilestate",{"_index":264,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["before",{"_index":360,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["behaviorsubject",{"_index":496,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["behaviorsubject(pile.length",{"_index":696,"title":{},"body":{"injectables/PileService.html":{}}}],["behaviorsubject(this._gamestate",{"_index":505,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["behaviorsubject>(new",{"_index":663,"title":{},"body":{"injectables/PileService.html":{}}}],["being",{"_index":651,"title":{},"body":{"injectables/PileService.html":{},"miscellaneous/variables.html":{}}}],["birdanimal",{"_index":76,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":797,"title":{},"body":{"miscellaneous/functions.html":{}}}],["both",{"_index":57,"title":{},"body":{"classes/Animal.html":{}}}],["browser",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":570,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"index.html":{}}}],["c",{"_index":852,"title":{},"body":{"license.html":{}}}],["call",{"_index":359,"title":{},"body":{"injectables/GameStateService.html":{}}}],["called",{"_index":449,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["callers",{"_index":670,"title":{},"body":{"injectables/PileService.html":{}}}],["calling",{"_index":450,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["calls",{"_index":674,"title":{},"body":{"injectables/PileService.html":{}}}],["capabilities",{"_index":840,"title":{},"body":{"index.html":{}}}],["capitalized",{"_index":97,"title":{},"body":{"classes/Animal.html":{}}}],["card",{"_index":13,"title":{},"body":{"classes/Animal.html":{}}}],["case",{"_index":448,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["change",{"_index":817,"title":{},"body":{"index.html":{}}}],["charge",{"_index":860,"title":{},"body":{"license.html":{}}}],["check",{"_index":844,"title":{},"body":{"index.html":{}}}],["choice",{"_index":835,"title":{},"body":{"index.html":{}}}],["claim",{"_index":903,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Animal.html":{},"classes/Pile.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"overview.html":{}}}],["cli",{"_index":803,"title":{},"body":{"index.html":{}}}],["client.service",{"_index":375,"title":{},"body":{"injectables/GameStateService.html":{}}}],["client.service.ts",{"_index":292,"title":{},"body":{"injectables/GameStateClientService.html":{},"coverage.html":{}}}],["client.service.ts:13",{"_index":299,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["client.service.ts:9",{"_index":297,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["code",{"_index":819,"title":{},"body":{"index.html":{}}}],["command",{"_index":836,"title":{},"body":{"index.html":{}}}],["commit",{"_index":386,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["committransaction",{"_index":340,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["compare",{"_index":324,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["compare(oldstate",{"_index":326,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["complains",{"_index":608,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["component",{"_index":120,"title":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/PileService.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":156,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["components",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"overview.html":{}}}],["conditions",{"_index":883,"title":{},"body":{"license.html":{}}}],["connection",{"_index":912,"title":{},"body":{"license.html":{}}}],["console.log('create",{"_index":219,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log('end",{"_index":236,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log('start",{"_index":221,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log(json.stringify(gsp",{"_index":302,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["const",{"_index":80,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":27,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{}}}],["constructor(gamemanagementsvc",{"_index":176,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["constructor(gamestatestore",{"_index":347,"title":{},"body":{"injectables/GameStateService.html":{}}}],["constructor(gamestatesvc",{"_index":630,"title":{},"body":{"injectables/PileService.html":{}}}],["constructor(pilesvc",{"_index":253,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["constructor(private",{"_index":262,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/PileService.html":{}}}],["constructor(state",{"_index":28,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["contain",{"_index":557,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["contract",{"_index":908,"title":{},"body":{"license.html":{}}}],["copies",{"_index":877,"title":{},"body":{"license.html":{}}}],["copy",{"_index":863,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":851,"title":{},"body":{"license.html":{}}}],["count",{"_index":565,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["coverage",{"_index":709,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":316,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["create(oldstate",{"_index":319,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["creategame",{"_index":170,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{}}}],["creates",{"_index":312,"title":{},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["current",{"_index":455,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["currentcount",{"_index":613,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["currentitemcount",{"_index":618,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["damages",{"_index":904,"title":{},"body":{"license.html":{}}}],["date.now",{"_index":325,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["deal",{"_index":866,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":913,"title":{},"body":{"license.html":{}}}],["deepclone",{"_index":503,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["deepclone(emptygamestate",{"_index":492,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["deepclone(this._gamestate",{"_index":526,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["deepclone(this._state",{"_index":603,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["deepclone(this._transactionstate",{"_index":527,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["deepcompare",{"_index":732,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deepcompare(object1",{"_index":793,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"miscellaneous/variables.html":{}}}],["defaultpiecefactory",{"_index":589,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["defaultpiecefactory(kind",{"_index":547,"title":{},"body":{"interfaces/Piece.html":{},"miscellaneous/functions.html":{}}}],["defaults",{"_index":642,"title":{},"body":{"injectables/PileService.html":{}}}],["defined",{"_index":30,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["defines",{"_index":280,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["defining",{"_index":271,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"miscellaneous/variables.html":{}}}],["definition",{"_index":567,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["dependencies",{"_index":743,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Animal.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["detect",{"_index":536,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["determine",{"_index":659,"title":{},"body":{"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["dev",{"_index":811,"title":{},"body":{"index.html":{}}}],["development",{"_index":806,"title":{},"body":{"index.html":{}}}],["directive",{"_index":154,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["directives",{"_index":160,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":822,"title":{},"body":{"index.html":{}}}],["directory",{"_index":826,"title":{},"body":{"index.html":{}}}],["dist",{"_index":825,"title":{},"body":{"index.html":{}}}],["distinctuntilchanged",{"_index":666,"title":{},"body":{"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["distribute",{"_index":873,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":283,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["documentation",{"_index":710,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["dom",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["dominant",{"_index":143,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["dominantspecies",{"_index":799,"title":{},"body":{"index.html":{}}}],["done",{"_index":444,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["draw",{"_index":158,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["drawn",{"_index":576,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["drawpoolgamecomponent",{"_index":135,"title":{"components/DrawPoolGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["drawpoollength",{"_index":168,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["drew",{"_index":233,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["ds",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dspiecekind",{"_index":200,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"miscellaneous/enumerations.html":{}}}],["dspiecekind.element",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["during",{"_index":447,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["dynamic",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":290,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["e2e",{"_index":833,"title":{},"body":{"index.html":{}}}],["each",{"_index":288,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["earth",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":41,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/enumerations.html":{}}}],["element.kind",{"_index":113,"title":{},"body":{"classes/Animal.html":{}}}],["elementindex",{"_index":114,"title":{},"body":{"classes/Animal.html":{}}}],["elementname",{"_index":224,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elementname.charat(0).touppercase",{"_index":226,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elementname.slice(1",{"_index":227,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elements",{"_index":15,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/variables.html":{}}}],["emit",{"_index":438,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["emitlength",{"_index":627,"title":{},"body":{"injectables/PileService.html":{}}}],["emitlength(pile",{"_index":632,"title":{},"body":{"injectables/PileService.html":{}}}],["emitted",{"_index":424,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["emitting",{"_index":652,"title":{},"body":{"injectables/PileService.html":{}}}],["empty",{"_index":235,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["emptygamestate",{"_index":279,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":239,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"index.html":{}}}],["endturn",{"_index":171,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["engine/model/faction.model",{"_index":70,"title":{},"body":{"classes/Animal.html":{}}}],["engine/model/piece.model",{"_index":71,"title":{},"body":{"classes/Animal.html":{}}}],["engine/model/player.model",{"_index":68,"title":{},"body":{"classes/Animal.html":{}}}],["engine/service/game",{"_index":194,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["engine/service/pile.service",{"_index":199,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["ensure",{"_index":453,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ensures",{"_index":534,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ensuring",{"_index":42,"title":{},"body":{"classes/Animal.html":{}}}],["entire",{"_index":435,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["enumerations",{"_index":764,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":795,"title":{},"body":{"miscellaneous/functions.html":{}}}],["error",{"_index":109,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateService.html":{}}}],["error(\"can't",{"_index":532,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('can",{"_index":523,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('gamestate",{"_index":530,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('length",{"_index":215,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["error('must",{"_index":511,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('no",{"_index":385,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["error('transaction",{"_index":392,"title":{},"body":{"injectables/GameStateService.html":{}}}],["error(`pile",{"_index":691,"title":{},"body":{"injectables/PileService.html":{}}}],["error(`state",{"_index":520,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error(`unable",{"_index":684,"title":{},"body":{"injectables/PileService.html":{}}}],["event",{"_index":899,"title":{},"body":{"license.html":{}}}],["eventcoalescing",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":287,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["exceed",{"_index":43,"title":{},"body":{"classes/Animal.html":{}}}],["execute",{"_index":831,"title":{},"body":{"index.html":{}}}],["existing",{"_index":488,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["export",{"_index":72,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{}}}],["express",{"_index":891,"title":{},"body":{"license.html":{}}}],["extends",{"_index":245,"title":{},"body":{"interfaces/FactionState.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["faction",{"_index":275,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/variables.html":{}}}],["faction.model",{"_index":277,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["factionstate",{"_index":69,"title":{"interfaces/FactionState.html":{}},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["factory",{"_index":568,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["false).newdocument",{"_index":330,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["fast",{"_index":308,"title":{},"body":{"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["files",{"_index":818,"title":{},"body":{"index.html":{},"license.html":{}}}],["filter",{"_index":202,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateService.html":{}}}],["find",{"_index":685,"title":{},"body":{"injectables/PileService.html":{}}}],["first",{"_index":837,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":896,"title":{},"body":{"license.html":{}}}],["following",{"_index":882,"title":{},"body":{"license.html":{}}}],["formatelementname",{"_index":173,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["formatelementname(kind",{"_index":187,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["found",{"_index":217,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["free",{"_index":859,"title":{},"body":{"license.html":{}}}],["from/to",{"_index":675,"title":{},"body":{"injectables/PileService.html":{}}}],["function",{"_index":471,"title":{},"body":{"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":790,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":880,"title":{},"body":{"license.html":{}}}],["further",{"_index":841,"title":{},"body":{"index.html":{}}}],["game",{"_index":159,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameStateService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["game.component",{"_index":151,"title":{},"body":{"components/AppComponent.html":{}}}],["game.component.html",{"_index":166,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.scss",{"_index":167,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts",{"_index":163,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["game.component.ts:18",{"_index":193,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:19",{"_index":182,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:28",{"_index":189,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:44",{"_index":184,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:49",{"_index":190,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:54",{"_index":188,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:59",{"_index":185,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:69",{"_index":186,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game/component/draw",{"_index":148,"title":{},"body":{"components/AppComponent.html":{}}}],["game/dominant",{"_index":257,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["game/draw",{"_index":150,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["gamemanagementservice",{"_index":177,"title":{"injectables/GameManagementService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"coverage.html":{}}}],["gamemanagementsvc",{"_index":183,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["gamestate",{"_index":268,"title":{"interfaces/GameState.html":{}},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gamestate.faction",{"_index":540,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestate.pile",{"_index":542,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestateclient",{"_index":349,"title":{},"body":{"injectables/GameStateService.html":{}}}],["gamestateclientservice",{"_index":291,"title":{"injectables/GameStateClientService.html":{}},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestateelement",{"_index":246,"title":{"interfaces/GameStateElement.html":{}},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["gamestateelements",{"_index":406,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestatepatch",{"_index":296,"title":{"interfaces/GameStatePatch.html":{}},"body":{"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestatepatches",{"_index":314,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["gamestatepatchservice",{"_index":310,"title":{"injectables/GameStatePatchService.html":{}},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestateservice",{"_index":179,"title":{"injectables/GameStateService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateService.html":{},"injectables/PileService.html":{},"coverage.html":{}}}],["gamestatestore",{"_index":286,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{}}}],["gamestatestoreservice",{"_index":274,"title":{"injectables/GameStateStoreService.html":{}},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["gamestatesubject",{"_index":458,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestatesvc",{"_index":178,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/PileService.html":{}}}],["generate",{"_index":821,"title":{},"body":{"index.html":{}}}],["generated",{"_index":801,"title":{},"body":{"index.html":{}}}],["getelements",{"_index":53,"title":{},"body":{"classes/Animal.html":{}}}],["getfaction",{"_index":369,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["getgamestate",{"_index":497,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getgsp",{"_index":298,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["getkind",{"_index":59,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{}}}],["getlength",{"_index":583,"title":{},"body":{"classes/Pile.html":{}}}],["getname",{"_index":61,"title":{},"body":{"classes/Animal.html":{}}}],["getobservableforkey",{"_index":460,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getobservableforkey(selector",{"_index":468,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getowner",{"_index":65,"title":{},"body":{"classes/Animal.html":{}}}],["getpile",{"_index":371,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["getpile(kind",{"_index":634,"title":{},"body":{"injectables/PileService.html":{}}}],["gets",{"_index":55,"title":{},"body":{"classes/Animal.html":{}}}],["getstate",{"_index":586,"title":{},"body":{"classes/Pile.html":{}}}],["getting",{"_index":798,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettransactionstate",{"_index":499,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["given",{"_index":641,"title":{},"body":{"injectables/PileService.html":{}}}],["go",{"_index":843,"title":{},"body":{"index.html":{}}}],["granted",{"_index":858,"title":{},"body":{"license.html":{}}}],["grasselement",{"_index":86,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["grubelement",{"_index":84,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["gsp",{"_index":294,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["gsp.patch",{"_index":328,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["gspservice",{"_index":348,"title":{},"body":{"injectables/GameStateService.html":{}}}],["help",{"_index":842,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":857,"title":{},"body":{"license.html":{}}}],["holders",{"_index":901,"title":{},"body":{"license.html":{}}}],["html",{"_index":153,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["http://localhost:4200",{"_index":813,"title":{},"body":{"index.html":{}}}],["id",{"_index":708,"title":{},"body":{"interfaces/Player.html":{}}}],["identifier",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":838,"title":{},"body":{"index.html":{}}}],["implied",{"_index":892,"title":{},"body":{"license.html":{}}}],["import",{"_index":67,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["imports",{"_index":133,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["included",{"_index":564,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"license.html":{}}}],["including",{"_index":56,"title":{},"body":{"classes/Animal.html":{},"license.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{}}}],["inherent",{"_index":11,"title":{},"body":{"classes/Animal.html":{}}}],["inherentelementkindbyanimalkind",{"_index":81,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inherentelements",{"_index":89,"title":{},"body":{"classes/Animal.html":{}}}],["initialize",{"_index":174,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/PileService.html":{}}}],["initialized",{"_index":669,"title":{},"body":{"injectables/PileService.html":{}}}],["injectable",{"_index":249,"title":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"coverage.html":{}}}],["injectables",{"_index":250,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"overview.html":{}}}],["insectanimal",{"_index":77,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["instantiated",{"_index":405,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["interact",{"_index":335,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileService.html":{}}}],["interested",{"_index":422,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["interface",{"_index":242,"title":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"interfaces/Piece.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{}},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStateService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["interfaces",{"_index":243,"title":{},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"interfaces/Piece.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"overview.html":{}}}],["inventory",{"_index":596,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":553,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["item",{"_index":228,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["item.kind",{"_index":517,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["item[0",{"_index":230,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["joe",{"_index":854,"title":{},"body":{"license.html":{}}}],["json",{"_index":309,"title":{},"body":{"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["json.stringify(newgamestateelement",{"_index":521,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["k",{"_index":855,"title":{},"body":{"license.html":{}}}],["karma",{"_index":832,"title":{},"body":{"index.html":{}}}],["keeps",{"_index":593,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["key",{"_index":423,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["keyof",{"_index":509,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["keys",{"_index":418,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["kind",{"_index":24,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["kind.replace('element",{"_index":225,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["kinds",{"_index":555,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["kindtolengthobservables",{"_index":621,"title":{},"body":{"injectables/PileService.html":{}}}],["kindtolengthsubjects",{"_index":622,"title":{},"body":{"injectables/PileService.html":{}}}],["kindtopile",{"_index":623,"title":{},"body":{"injectables/PileService.html":{}}}],["leaving",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":152,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["length",{"_index":214,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["lengthobservable",{"_index":210,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["lengthobservable.subscribe((length",{"_index":212,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["lengthsubject",{"_index":681,"title":{},"body":{"injectables/PileService.html":{}}}],["lengthsubject.asobservable().pipe(distinctuntilchanged",{"_index":699,"title":{},"body":{"injectables/PileService.html":{}}}],["lengthsubject.next(pile.length",{"_index":683,"title":{},"body":{"injectables/PileService.html":{}}}],["level",{"_index":417,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["liability",{"_index":905,"title":{},"body":{"license.html":{}}}],["liable",{"_index":902,"title":{},"body":{"license.html":{}}}],["license",{"_index":849,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":44,"title":{},"body":{"classes/Animal.html":{}}}],["limitation",{"_index":868,"title":{},"body":{"license.html":{}}}],["limited",{"_index":893,"title":{},"body":{"license.html":{}}}],["line",{"_index":240,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["list",{"_index":92,"title":{},"body":{"classes/Animal.html":{}}}],["local",{"_index":454,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["lodash",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":169,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["made",{"_index":661,"title":{},"body":{"injectables/PileService.html":{}}}],["maintain",{"_index":401,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["make",{"_index":673,"title":{},"body":{"injectables/PileService.html":{}}}],["making",{"_index":402,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["mammalanimal",{"_index":78,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":273,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["management",{"_index":411,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["management.service",{"_index":195,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["management.service.ts",{"_index":252,"title":{},"body":{"injectables/GameManagementService.html":{},"coverage.html":{}}}],["management.service.ts:12",{"_index":255,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["management.service.ts:9",{"_index":254,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["manages",{"_index":668,"title":{},"body":{"injectables/PileService.html":{}}}],["many",{"_index":595,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["map",{"_index":82,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"miscellaneous/variables.html":{}}}],["map((gamestate",{"_index":507,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["matbutton",{"_index":164,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["matches",{"_index":489,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["matching",{"_index":119,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mattooltip",{"_index":165,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["meatelement",{"_index":87,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["member",{"_index":578,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["merchantability",{"_index":895,"title":{},"body":{"license.html":{}}}],["merge",{"_index":871,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["method",{"_index":410,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{}}}],["miscellaneous",{"_index":763,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":850,"title":{},"body":{"license.html":{}}}],["model/faction.model",{"_index":376,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["model/game",{"_index":300,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["model/piece.model",{"_index":665,"title":{},"body":{"injectables/PileService.html":{}}}],["model/pile.model",{"_index":260,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["modify",{"_index":870,"title":{},"body":{"license.html":{}}}],["modules",{"_index":914,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":451,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"index.html":{}}}],["name",{"_index":25,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/Player.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["navigate",{"_index":812,"title":{},"body":{"index.html":{}}}],["need",{"_index":407,"title":{},"body":{"injectables/GameStateStoreService.html":{},"index.html":{}}}],["needed",{"_index":552,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["new",{"_index":40,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newgamestateelement",{"_index":474,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["newgamestateelement.kind",{"_index":518,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["newstate",{"_index":320,"title":{},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["ng",{"_index":809,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":898,"title":{},"body":{"license.html":{}}}],["notice",{"_index":885,"title":{},"body":{"license.html":{}}}],["null",{"_index":494,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["number",{"_index":191,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"interfaces/GameStatePatch.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["object",{"_index":272,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["object.keys(this._state.inventory).reduce",{"_index":600,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["object1",{"_index":796,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object2",{"_index":794,"title":{},"body":{"miscellaneous/functions.html":{}}}],["objects",{"_index":282,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/functions.html":{}}}],["observable",{"_index":216,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["observables",{"_index":419,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["obtaining",{"_index":862,"title":{},"body":{"license.html":{}}}],["of(undefined",{"_index":303,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["oldstate",{"_index":322,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["once",{"_index":477,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["one",{"_index":429,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["ones",{"_index":58,"title":{},"body":{"classes/Animal.html":{}}}],["operation",{"_index":307,"title":{},"body":{"interfaces/GameStatePatch.html":{}}}],["optional",{"_index":35,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["orchestrating",{"_index":336,"title":{},"body":{"injectables/GameStateService.html":{}}}],["others",{"_index":404,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["otherwise",{"_index":910,"title":{},"body":{"license.html":{}}}],["out",{"_index":845,"title":{},"body":{"index.html":{},"license.html":{}}}],["outside",{"_index":285,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["overview",{"_index":846,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrites",{"_index":436,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["owned",{"_index":9,"title":{},"body":{"classes/Animal.html":{}}}],["owner",{"_index":26,"title":{},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{}}}],["package",{"_index":742,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":848,"title":{},"body":{"index.html":{}}}],["param",{"_index":106,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":428,"title":{},"body":{"injectables/GameStateStoreService.html":{},"license.html":{}}}],["passed",{"_index":490,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["patch",{"_index":305,"title":{},"body":{"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["patch.model",{"_index":301,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{}}}],["patch.model.ts",{"_index":304,"title":{},"body":{"interfaces/GameStatePatch.html":{},"coverage.html":{}}}],["patch.service",{"_index":374,"title":{},"body":{"injectables/GameStateService.html":{}}}],["patch.service.ts",{"_index":311,"title":{},"body":{"injectables/GameStatePatchService.html":{},"coverage.html":{}}}],["patch.service.ts:13",{"_index":321,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["patch.service.ts:20",{"_index":318,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["permission",{"_index":856,"title":{},"body":{"license.html":{}}}],["permit",{"_index":878,"title":{},"body":{"license.html":{}}}],["person",{"_index":861,"title":{},"body":{"license.html":{}}}],["persons",{"_index":879,"title":{},"body":{"license.html":{}}}],["piece",{"_index":37,"title":{"interfaces/Piece.html":{}},"body":{"classes/Animal.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["piece.model",{"_index":590,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["piececount",{"_index":610,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["piecefactory",{"_index":546,"title":{},"body":{"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/typealiases.html":{}}}],["pieces",{"_index":550,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["pieces.push(null",{"_index":616,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieces.push(this.piecefactory(kind",{"_index":615,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieceswithcount.length",{"_index":611,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieceswithcount[math.floor(math.random",{"_index":612,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pile",{"_index":259,"title":{"classes/Pile.html":{}},"body":{"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pile(pilestate",{"_index":266,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["pile.kind",{"_index":686,"title":{},"body":{"injectables/PileService.html":{}}}],["pile.model",{"_index":278,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["pile.pull(count",{"_index":704,"title":{},"body":{"injectables/PileService.html":{}}}],["pile.put(pieces",{"_index":706,"title":{},"body":{"injectables/PileService.html":{}}}],["pile.service",{"_index":258,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["pile.setstate(pilestate",{"_index":679,"title":{},"body":{"injectables/PileService.html":{}}}],["piles",{"_index":263,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/PileService.html":{}}}],["piles.foreach((pile",{"_index":692,"title":{},"body":{"injectables/PileService.html":{}}}],["piles.push(new",{"_index":265,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["pileservice",{"_index":181,"title":{"injectables/PileService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"coverage.html":{}}}],["pilestate",{"_index":276,"title":{"interfaces/PileState.html":{}},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["pilestates.foreach((pilestate",{"_index":677,"title":{},"body":{"injectables/PileService.html":{}}}],["pilesvc",{"_index":180,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{}}}],["pipe",{"_index":556,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pipe(filter((registeredpiles",{"_index":207,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["places",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platform",{"_index":834,"title":{},"body":{"index.html":{}}}],["player",{"_index":10,"title":{"interfaces/Player.html":{}},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["player.model",{"_index":247,"title":{},"body":{"interfaces/FactionState.html":{}}}],["pool",{"_index":149,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["portions",{"_index":888,"title":{},"body":{"license.html":{}}}],["pretty",{"_index":591,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["previous",{"_index":437,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["printed",{"_index":12,"title":{},"body":{"classes/Animal.html":{}}}],["private",{"_index":172,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["progress",{"_index":358,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["project",{"_index":800,"title":{},"body":{"index.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"properties.html":{}}}],["provideanimationsasync('noop",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":889,"title":{},"body":{"license.html":{}}}],["providedin",{"_index":261,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["providerouter(routes",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provides",{"_index":332,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["providezonechangedetection",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":18,"title":{},"body":{"classes/Animal.html":{}}}],["publish",{"_index":872,"title":{},"body":{"license.html":{}}}],["pull",{"_index":560,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{}}}],["pull(count",{"_index":573,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pull(kind",{"_index":637,"title":{},"body":{"injectables/PileService.html":{}}}],["pulled",{"_index":643,"title":{},"body":{"injectables/PileService.html":{}}}],["pulls",{"_index":639,"title":{},"body":{"injectables/PileService.html":{}}}],["purpose",{"_index":897,"title":{},"body":{"license.html":{}}}],["put",{"_index":561,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{}}}],["put(kind",{"_index":644,"title":{},"body":{"injectables/PileService.html":{}}}],["put(pieces",{"_index":579,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["puts",{"_index":646,"title":{},"body":{"injectables/PileService.html":{}}}],["random",{"_index":549,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["readonly",{"_index":559,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["received",{"_index":442,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["record",{"_index":597,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["reference",{"_index":847,"title":{},"body":{"index.html":{}}}],["regardless",{"_index":427,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["register",{"_index":409,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["register(piles",{"_index":647,"title":{},"body":{"injectables/PileService.html":{}}}],["registered",{"_index":487,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["registeredpilekinds",{"_index":624,"title":{},"body":{"injectables/PileService.html":{}}}],["registeredpiles",{"_index":625,"title":{},"body":{"injectables/PileService.html":{}}}],["registeredpiles.has(dspiecekind.element",{"_index":208,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["registeredpilessubject",{"_index":626,"title":{},"body":{"injectables/PileService.html":{}}}],["registeredpilessubscription",{"_index":205,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["registeredpilessubscription.unsubscribe",{"_index":218,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["registerpile",{"_index":341,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["registerpile(newstate",{"_index":354,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["registerpiles",{"_index":628,"title":{},"body":{"injectables/PileService.html":{}}}],["registertransactionstateelement",{"_index":461,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["registertransactionstateelement(key",{"_index":473,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["related",{"_index":337,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileService.html":{}}}],["reload",{"_index":816,"title":{},"body":{"index.html":{}}}],["remove",{"_index":52,"title":{},"body":{"classes/Animal.html":{}}}],["removeelement",{"_index":22,"title":{},"body":{"classes/Animal.html":{}}}],["removeelement(element",{"_index":49,"title":{},"body":{"classes/Animal.html":{}}}],["removes",{"_index":51,"title":{},"body":{"classes/Animal.html":{}}}],["representing",{"_index":289,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["represents",{"_index":8,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["reptileanimal",{"_index":79,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":362,"title":{},"body":{"injectables/GameStateService.html":{}}}],["requiretransaction",{"_index":342,"title":{},"body":{"injectables/GameStateService.html":{}}}],["respective",{"_index":653,"title":{},"body":{"injectables/PileService.html":{}}}],["responsible",{"_index":400,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["rest",{"_index":333,"title":{},"body":{"injectables/GameStateService.html":{}}}],["restriction",{"_index":867,"title":{},"body":{"license.html":{}}}],["results",{"_index":118,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":93,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["returned",{"_index":575,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["returns",{"_index":47,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":869,"title":{},"body":{"license.html":{}}}],["rollback",{"_index":538,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["rollbacktransaction",{"_index":343,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["root",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["root'},{'name",{"_index":157,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["routeroutlet",{"_index":134,"title":{},"body":{"components/AppComponent.html":{}}}],["run",{"_index":808,"title":{},"body":{"index.html":{}}}],["running",{"_index":827,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":203,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"dependencies.html":{}}}],["same",{"_index":476,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["scaffolding",{"_index":820,"title":{},"body":{"index.html":{}}}],["seedelement",{"_index":85,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["selected",{"_index":571,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["selector",{"_index":128,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["selector(gamestate",{"_index":508,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["sell",{"_index":876,"title":{},"body":{"license.html":{}}}],["sendgsptobackend",{"_index":293,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["sendgsptobackend(gsp",{"_index":295,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["serve",{"_index":810,"title":{},"body":{"index.html":{}}}],["server",{"_index":807,"title":{},"body":{"index.html":{}}}],["service",{"_index":412,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["services",{"_index":338,"title":{},"body":{"injectables/GameStateService.html":{}}}],["set",{"_index":452,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["setfaction",{"_index":344,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setfaction(newstate",{"_index":364,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setgamestate",{"_index":433,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["setgamestate(newstate",{"_index":481,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["setpile",{"_index":345,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setpile(newstate",{"_index":366,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setstate",{"_index":562,"title":{},"body":{"classes/Pile.html":{}}}],["setstate(newstate",{"_index":581,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["settransactionstateelement",{"_index":462,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["settransactionstateelement(key",{"_index":484,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["several",{"_index":415,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["shall",{"_index":886,"title":{},"body":{"license.html":{}}}],["simple",{"_index":592,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["software",{"_index":864,"title":{},"body":{"license.html":{}}}],["someone",{"_index":421,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"index.html":{}}}],["species",{"_index":144,"title":{},"body":{"components/AppComponent.html":{}}}],["species.constants",{"_index":201,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{}}}],["species.constants.ts",{"_index":737,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["species_amphibian",{"_index":778,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_arachnid",{"_index":780,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_bird",{"_index":782,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_insect",{"_index":784,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_mammal",{"_index":786,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_reptile",{"_index":788,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesamphibian",{"_index":779,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesarachnid",{"_index":781,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesbird",{"_index":783,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesinsect",{"_index":785,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesmammal",{"_index":787,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesreptile",{"_index":789,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["specified",{"_index":640,"title":{},"body":{"injectables/PileService.html":{}}}],["src/.../animal.model.ts",{"_index":919,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dominant",{"_index":765,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../game",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../piece.model.ts",{"_index":792,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../util.ts",{"_index":791,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.component.ts",{"_index":126,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:13",{"_index":145,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":714,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/engine/model/faction.model.ts",{"_index":244,"title":{},"body":{"interfaces/FactionState.html":{},"coverage.html":{}}}],["src/app/engine/model/game",{"_index":269,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/engine/model/piece.model.ts",{"_index":545,"title":{},"body":{"interfaces/Piece.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/engine/model/pile.model.ts",{"_index":548,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["src/app/engine/model/pile.model.ts:22",{"_index":572,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:23",{"_index":563,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:39",{"_index":584,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:46",{"_index":587,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:50",{"_index":588,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:54",{"_index":582,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:63",{"_index":574,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:87",{"_index":580,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/player.model.ts",{"_index":707,"title":{},"body":{"interfaces/Player.html":{},"coverage.html":{}}}],["src/app/engine/service/game",{"_index":251,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["src/app/engine/service/pile.service.ts",{"_index":620,"title":{},"body":{"injectables/PileService.html":{},"coverage.html":{}}}],["src/app/engine/service/pile.service.ts:106",{"_index":638,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:119",{"_index":645,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:18",{"_index":655,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:19",{"_index":656,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:20",{"_index":664,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:21",{"_index":654,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:29",{"_index":658,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:33",{"_index":631,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:39",{"_index":636,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:49",{"_index":633,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:58",{"_index":650,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:65",{"_index":649,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:72",{"_index":635,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:81",{"_index":648,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/util.ts",{"_index":731,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/game/component/draw",{"_index":162,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["src/app/game/dominant",{"_index":736,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app/game/model/animal.model.ts",{"_index":6,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/game/model/animal.model.ts:32",{"_index":31,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:42",{"_index":54,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:46",{"_index":60,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:54",{"_index":62,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:59",{"_index":66,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:68",{"_index":38,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:81",{"_index":50,"title":{},"body":{"classes/Animal.html":{}}}],["standalone",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["start",{"_index":238,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["started",{"_index":393,"title":{"index.html":{},"license.html":{}},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["starttransaction",{"_index":346,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["startturn",{"_index":175,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["state",{"_index":19,"title":{},"body":{"classes/Animal.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["state.model",{"_index":248,"title":{},"body":{"interfaces/FactionState.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["state.model.ts",{"_index":270,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["state.service",{"_index":198,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/PileService.html":{}}}],["state.service.ts",{"_index":331,"title":{},"body":{"injectables/GameStateService.html":{},"coverage.html":{}}}],["state.service.ts:17",{"_index":350,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:28",{"_index":352,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:33",{"_index":368,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:37",{"_index":353,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:50",{"_index":363,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:57",{"_index":356,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:63",{"_index":370,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:67",{"_index":365,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:71",{"_index":372,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:75",{"_index":367,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:79",{"_index":355,"title":{},"body":{"injectables/GameStateService.html":{}}}],["statements",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store.service",{"_index":373,"title":{},"body":{"injectables/GameStateService.html":{}}}],["store.service.ts",{"_index":399,"title":{},"body":{"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["store.service.ts:101",{"_index":500,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:109",{"_index":466,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:114",{"_index":482,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:122",{"_index":491,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:130",{"_index":467,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:139",{"_index":479,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:149",{"_index":501,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:153",{"_index":480,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:157",{"_index":502,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:161",{"_index":483,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:165",{"_index":472,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:32",{"_index":493,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:33",{"_index":495,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:34",{"_index":464,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:40",{"_index":469,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:56",{"_index":485,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:80",{"_index":475,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:97",{"_index":498,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["stored",{"_index":824,"title":{},"body":{"index.html":{}}}],["stores",{"_index":478,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["string",{"_index":64,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":138,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["subject",{"_index":881,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":874,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":209,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["subscriber",{"_index":660,"title":{},"body":{"injectables/PileService.html":{}}}],["subscribers",{"_index":535,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["substantial",{"_index":887,"title":{},"body":{"license.html":{}}}],["substatearray",{"_index":513,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray.findindex((item",{"_index":516,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray.push(newgamestateelement",{"_index":525,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray[index",{"_index":519,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["such",{"_index":413,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["suffix",{"_index":100,"title":{},"body":{"classes/Animal.html":{}}}],["sum",{"_index":601,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["sunelement",{"_index":88,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":334,"title":{},"body":{"injectables/GameStateService.html":{}}}],["t",{"_index":470,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["table",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":446,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["takes",{"_index":434,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["template",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["templateurl",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["test",{"_index":830,"title":{},"body":{"index.html":{}}}],["testing",{"_index":839,"title":{},"body":{"index.html":{}}}],["tests",{"_index":829,"title":{},"body":{"index.html":{}}}],["this._gamestate",{"_index":528,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._gamestate[key",{"_index":524,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(deepclone(this._gamestate",{"_index":537,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(newstate",{"_index":531,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(this._transactionstate",{"_index":533,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._state",{"_index":598,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[key",{"_index":602,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[kind",{"_index":614,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[piece.kind",{"_index":619,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.kind",{"_index":604,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._transactionstate",{"_index":510,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._transactionstate[key",{"_index":514,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.applygsp(gsp",{"_index":379,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.drawpoollength",{"_index":213,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.elements.length",{"_index":111,"title":{},"body":{"classes/Animal.html":{}}}],["this.emitlength(pile",{"_index":680,"title":{},"body":{"injectables/PileService.html":{}}}],["this.formatelementname(item[0].kind",{"_index":231,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamemanagementsvc.creategame",{"_index":220,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamestateclient.gsp$.pipe(filter((gsp",{"_index":377,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestateclient.sendgsptobackend(gsp",{"_index":390,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.committransaction",{"_index":389,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.faction",{"_index":394,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.gamestate",{"_index":388,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.pile",{"_index":396,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.registerpile(newstate",{"_index":398,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.rollbacktransaction",{"_index":391,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setfaction(newstate",{"_index":395,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setgamestate(updatedstate",{"_index":382,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setpile(newstate",{"_index":397,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.starttransaction",{"_index":383,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.transactionstate",{"_index":384,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatesubject",{"_index":504,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesubject.asobservable().pipe",{"_index":506,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesubject.next(this.gamestate",{"_index":529,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesvc.committransaction",{"_index":237,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamestatesvc.pile$.subscribe((pilestates",{"_index":676,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gamestatesvc.registerpile(pile.state",{"_index":689,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gamestatesvc.requiretransaction",{"_index":702,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gamestatesvc.setpile(pile.state",{"_index":688,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gamestatesvc.starttransaction",{"_index":223,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.getobservableforkey((gamestate",{"_index":539,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.getpile(kind",{"_index":703,"title":{},"body":{"injectables/PileService.html":{}}}],["this.getpile(pilestate.kind",{"_index":678,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gspservice.apply(this.gamestatestore.gamestate",{"_index":381,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gspservice.create",{"_index":387,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.initialize",{"_index":204,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/PileService.html":{}}}],["this.kind.replace('animal",{"_index":102,"title":{},"body":{"classes/Animal.html":{}}}],["this.kindtolengthobservables.set",{"_index":698,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtolengthsubjects.get(pile.kind",{"_index":682,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtolengthsubjects.set(pile.kind",{"_index":697,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtopile.get(kind",{"_index":690,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtopile.set(pile.kind",{"_index":694,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtopile.values",{"_index":687,"title":{},"body":{"injectables/PileService.html":{}}}],["this.log.push('pile",{"_index":234,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.log.push(`you",{"_index":232,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.name",{"_index":117,"title":{},"body":{"classes/Animal.html":{}}}],["this.piececounts.get(key",{"_index":605,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.piecefactory",{"_index":599,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.pilesvc.kindtolengthobservables.get(dspiecekind.element",{"_index":211,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.pilesvc.pull(dspiecekind.element",{"_index":229,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.pilesvc.register(piles",{"_index":267,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["this.pilesvc.registeredpiles",{"_index":206,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.registeredpilekinds.add(pile.kind",{"_index":695,"title":{},"body":{"injectables/PileService.html":{}}}],["this.registeredpilekinds.has(pile.kind",{"_index":693,"title":{},"body":{"injectables/PileService.html":{}}}],["this.registeredpilessubject.asobservable",{"_index":657,"title":{},"body":{"injectables/PileService.html":{}}}],["this.registeredpilessubject.next(this.registeredpilekinds",{"_index":700,"title":{},"body":{"injectables/PileService.html":{}}}],["this.registerpiles",{"_index":701,"title":{},"body":{"injectables/PileService.html":{}}}],["this.registertransactionstateelement('pile",{"_index":544,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.settransactionstateelement('faction",{"_index":541,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.settransactionstateelement('pile",{"_index":543,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.state",{"_index":91,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.addedelements",{"_index":95,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.addedelements.splice(elementindex",{"_index":116,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.inherentelements",{"_index":94,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.kind",{"_index":96,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.owner",{"_index":105,"title":{},"body":{"classes/Animal.html":{}}}],["this.transactionstate",{"_index":522,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.updategamestate",{"_index":705,"title":{},"body":{"injectables/PileService.html":{}}}],["those",{"_index":420,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["throw",{"_index":108,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["throws",{"_index":107,"title":{},"body":{"classes/Animal.html":{}}}],["timestamp",{"_index":306,"title":{},"body":{"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{}}}],["title",{"_index":140,"title":{},"body":{"components/AppComponent.html":{}}}],["top",{"_index":416,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["tort",{"_index":909,"title":{},"body":{"license.html":{}}}],["total",{"_index":585,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["tpiece",{"_index":554,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["track",{"_index":241,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["tracks",{"_index":594,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["transaction",{"_index":357,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["transactionstate",{"_index":463,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["tree",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["true",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"miscellaneous/variables.html":{}}}],["tsc",{"_index":607,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["tslib",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":222,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["two",{"_index":430,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":34,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":917,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":515,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["typically",{"_index":440,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["undefined",{"_index":329,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["undefined)).subscribe((gsp",{"_index":378,"title":{},"body":{"injectables/GameStateService.html":{}}}],["unit",{"_index":828,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":609,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["update",{"_index":486,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["updated",{"_index":426,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["updatedstate",{"_index":380,"title":{},"body":{"injectables/GameStateService.html":{}}}],["updategamestate",{"_index":629,"title":{},"body":{"injectables/PileService.html":{}}}],["updates",{"_index":361,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileService.html":{}}}],["updating",{"_index":512,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["use",{"_index":569,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":441,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["using",{"_index":408,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["validate",{"_index":671,"title":{},"body":{"injectables/PileService.html":{}}}],["validated",{"_index":672,"title":{},"body":{"injectables/PileService.html":{}}}],["value",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":439,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["var",{"_index":155,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["variable",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":920,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":284,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["vars",{"_index":551,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["version",{"_index":804,"title":{},"body":{"index.html":{},"properties.html":{}}}],["via",{"_index":432,"title":{},"body":{"injectables/GameStateStoreService.html":{},"index.html":{}}}],["void",{"_index":48,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["warranties",{"_index":894,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":890,"title":{},"body":{"license.html":{}}}],["waterelement",{"_index":83,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["ways",{"_index":431,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["whenever",{"_index":425,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["whether",{"_index":906,"title":{},"body":{"license.html":{}}}],["within",{"_index":667,"title":{},"body":{"injectables/PileService.html":{}}}],["without",{"_index":98,"title":{},"body":{"classes/Animal.html":{},"license.html":{}}}],["zone.js",{"_index":761,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Animal.html":{"url":"classes/Animal.html","title":"class - Animal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Animal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/game/model/animal.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an animal owned by a player with inherent (printed on the card) and added elements.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addElement\n                            \n                            \n                                removeElement\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elements\n                                \n                                \n                                    kind\n                                \n                                \n                                    name\n                                \n                                \n                                    owner\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: AnimalState)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/model/animal.model.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        AnimalState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnimalState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/game/model/animal.model.ts:32\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addElement\n                        \n                    \n                \n            \n            \n                \naddElement(element: Piece)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/model/animal.model.ts:68\n                        \n                    \n\n\n            \n                \n                        Adds a new element to the animal, ensuring it does not exceed the limit of 6 elements.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            Piece\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to add.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeElement\n                        \n                    \n                \n            \n            \n                \nremoveElement(element: Piece)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/model/animal.model.ts:81\n                        \n                    \n\n\n            \n                \n                        Removes an added element from the animal.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            Piece\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to remove.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elements\n                    \n                \n\n                \n                    \n                        getelements()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:42\n                                \n                            \n                    \n                        \n                                Gets all elements of the animal, including both inherent and added ones.\n\n\n                                \n                                \n                                \n                                    Returns :         Piece[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        kind\n                    \n                \n\n                \n                    \n                        getkind()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:46\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:54\n                                \n                            \n                    \n                        \n                                Gets the name of the animal, based on its kind.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        owner\n                    \n                \n\n                \n                    \n                        getowner()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Player } from '../../engine/model/player.model';\nimport { FactionState } from '../../engine/model/faction.model';\nimport { Piece } from '../../engine/model/piece.model';\n\nexport type AnimalKind =\n  | 'amphibianAnimal'\n  | 'arachnidAnimal'\n  | 'birdAnimal'\n  | 'insectAnimal'\n  | 'mammalAnimal'\n  | 'reptileAnimal';\n\nexport const inherentElementKindByAnimalKind = new Map([\n  ['amphibianAnimal', 'waterElement'],\n  ['arachnidAnimal', 'grubElement'],\n  ['birdAnimal', 'seedElement'],\n  ['insectAnimal', 'grassElement'],\n  ['mammalAnimal', 'meatElement'],\n  ['reptileAnimal', 'sunElement'],\n] as const);\n\nexport type AnimalState = FactionState & {\n  kind: AnimalKind;\n  inherentElements: Piece[];\n  addedElements: Piece[];\n};\n\n/**\n * Represents an animal owned by a player with inherent (printed on the card) and added elements.\n */\nexport class Animal {\n  public state: AnimalState;\n\n  constructor(state: AnimalState) {\n    this.state = state;\n  }\n\n  /**\n   * Gets all elements of the animal, including both inherent and added ones.\n   * @returns A list of all elements.\n   */\n  get elements(): Piece[] {\n    return [...this.state.inherentElements, ...this.state.addedElements];\n  }\n\n  get kind(): AnimalKind {\n    return this.state.kind;\n  }\n\n  /**\n   * Gets the name of the animal, based on its kind.\n   * @returns The capitalized name of the animal without the \"AnimalModel\" suffix.\n   */\n  get name(): string {\n    const animalName = this.kind.replace('Animal', '');\n    return animalName.charAt(0).toUpperCase() + animalName.slice(1);\n  }\n\n  get owner(): Player {\n    return this.state.owner;\n  }\n\n  /**\n   * Adds a new element to the animal, ensuring it does not exceed the limit of 6 elements.\n   * @param element The element to add.\n   * @throws Will throw an error if the animal already has 6 elements.\n   */\n  addElement(element: Piece): void {\n    if (this.elements.length  addedElement.kind === element.kind,\n    );\n    if (elementIndex !== -1) {\n      this.state.addedElements.splice(elementIndex, 1);\n    } else {\n      throw new Error(\n        `${this.name} does not have element kind ${element.kind} as an added element.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                DrawPoolGameComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'dominant-species'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { DrawPoolGameComponent } from './game/component/draw-pool-game/draw-pool-game.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, DrawPoolGameComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'dominant-species';\n}\n\n    \n\n    \n        \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DrawPoolGameComponent', 'selector': 'app-draw-pool-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DrawPoolGameComponent.html":{"url":"components/DrawPoolGameComponent.html","title":"component - DrawPoolGameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DrawPoolGameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/component/draw-pool-game/draw-pool-game.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-draw-pool-game\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatButton\n                            MatTooltip\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./draw-pool-game.component.html\n            \n\n\n\n            \n                styleUrl\n                ./draw-pool-game.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                drawPoolLength\n                            \n                            \n                                log\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createGame\n                            \n                            \n                                draw\n                            \n                            \n                                endTurn\n                            \n                            \n                                    Private\n                                formatElementName\n                            \n                            \n                                    Private\n                                initialize\n                            \n                            \n                                startTurn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gameManagementSvc: GameManagementService, gameStateSvc: GameStateService, pileSvc: PileService)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameManagementSvc\n                                                  \n                                                        \n                                                                        GameManagementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gameStateSvc\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pileSvc\n                                                  \n                                                        \n                                                                        PileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createGame\n                        \n                    \n                \n            \n            \n                \ncreateGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draw\n                        \n                    \n                \n            \n            \n                \ndraw()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endTurn\n                        \n                    \n                \n            \n            \n                \nendTurn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatElementName\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatElementName(kind: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTurn\n                        \n                    \n                \n            \n            \n                \nstartTurn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        drawPoolLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { GameManagementService } from '../../../engine/service/game-management.service';\nimport { MatButton } from '@angular/material/button';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { GameStateService } from '../../../engine/service/game-state.service';\nimport { PileService } from '../../../engine/service/pile.service';\nimport { dsPieceKind } from '../../dominant-species.constants';\nimport { filter } from 'rxjs';\n\n@Component({\n  selector: 'app-draw-pool-game',\n  standalone: true,\n  imports: [MatButton, MatTooltip],\n  templateUrl: './draw-pool-game.component.html',\n  styleUrl: './draw-pool-game.component.scss',\n})\nexport class DrawPoolGameComponent {\n  drawPoolLength = 0;\n  log: string[] = [];\n  constructor(\n    private gameManagementSvc: GameManagementService,\n    private gameStateSvc: GameStateService,\n    private pileSvc: PileService,\n  ) {\n    this.initialize();\n  }\n\n  private initialize(): void {\n    const registeredPilesSubscription = this.pileSvc.registeredPiles$\n      .pipe(filter((registeredPiles) => registeredPiles.has(dsPieceKind.ELEMENT)))\n      .subscribe(() => {\n        const lengthObservable = this.pileSvc.kindToLengthObservables.get(dsPieceKind.ELEMENT);\n        if (lengthObservable) {\n          lengthObservable.subscribe((length) => {\n            this.drawPoolLength = length;\n          });\n        } else {\n          throw new Error('Length observable for not found');\n        }\n        registeredPilesSubscription.unsubscribe();\n      });\n  }\n\n  createGame(): void {\n    console.log('Create Game');\n    this.gameManagementSvc.createGame();\n  }\n\n  startTurn(): void {\n    console.log('Start Turn');\n    this.gameStateSvc.startTransaction();\n  }\n\n  private formatElementName(kind: string): string {\n    const elementName = kind.replace('Element', '');\n    return elementName.charAt(0).toUpperCase() + elementName.slice(1);\n  }\n\n  draw(): void {\n    const item = this.pileSvc.pull(dsPieceKind.ELEMENT);\n    if (item[0]) {\n      const element = this.formatElementName(item[0].kind);\n      this.log.push(`You drew a ${element}`);\n    } else {\n      this.log.push('Pile is empty!');\n    }\n  }\n\n  endTurn(): void {\n    console.log('End Turn');\n    this.gameStateSvc.commitTransaction();\n  }\n}\n\n    \n\n    \n        \n  \n    Initialize\n    Start Turn\n    Draw!\n    End Turn\n  \n  \n    Draw Pool: {{ drawPoolLength }}\n    \n      \n        @for (line of log; track $index) {\n          {{ line }}\n        }\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Initialize    Start Turn    Draw!    End Turn        Draw Pool: {{ drawPoolLength }}                  @for (line of log; track $index) {          {{ line }}        }            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DrawPoolGameComponent', 'selector': 'app-draw-pool-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DrawPoolGameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FactionState.html":{"url":"interfaces/FactionState.html","title":"interface - FactionState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FactionState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/faction.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            GameStateElement\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            owner\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        owner\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        owner:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Player } from './player.model';\nimport { GameStateElement } from './game-state.model';\n\nexport interface FactionState extends GameStateElement {\n  owner: Player;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameManagementService.html":{"url":"injectables/GameManagementService.html","title":"injectable - GameManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-management.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pileSvc: PileService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-management.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pileSvc\n                                                  \n                                                        \n                                                                        PileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createGame\n                        \n                    \n                \n            \n            \n                \ncreateGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-management.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { baseGameState } from '../../game/dominant-species.constants';\nimport { PileService } from './pile.service';\nimport { Pile } from '../model/pile.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameManagementService {\n  constructor(private pileSvc: PileService) {}\n\n  createGame(): void {\n    const piles: Pile[] = [];\n    baseGameState.pile.forEach((pileState) => {\n      piles.push(new Pile(pileState));\n    });\n    this.pileSvc.register(piles);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameState.html":{"url":"interfaces/GameState.html","title":"interface - GameState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining the GameState object managed by GameStateStoreService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            faction\n                                        \n                                \n                                \n                                        \n                                            pile\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        faction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        faction:         FactionState[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FactionState[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pile:         PileState[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PileState[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FactionState } from './faction.model';\nimport { PileState } from './pile.model';\n\n/**\n * Defining the GameState object managed by GameStateStoreService\n */\nexport interface GameState {\n  faction: FactionState[];\n  pile: PileState[];\n}\n\nexport const emptyGameState: GameState = {\n  faction: [],\n  pile: [],\n};\n\n/**\n * GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\n * An example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\n * This object defining the state would be of type GameStateElement.\n */\nexport interface GameStateElement {\n  kind: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateClientService.html":{"url":"injectables/GameStateClientService.html","title":"injectable - GameStateClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendGspToBackend\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gsp$\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendGspToBackend\n                        \n                    \n                \n            \n            \n                \nsendGspToBackend(gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-client.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gsp$\n                    \n                \n\n                \n                    \n                        getgsp$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-client.service.ts:13\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { of, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateClientService {\n  sendGspToBackend(gsp: GameStatePatch): void {\n    console.log(JSON.stringify(gsp));\n  }\n\n  get gsp$(): Observable {\n    return of(undefined);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameStateElement.html":{"url":"interfaces/GameStateElement.html","title":"interface - GameStateElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameStateElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state.model.ts\n        \n\n\n            \n                Description\n            \n            \n                GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\nAn example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\nThis object defining the state would be of type GameStateElement.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            kind\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        kind\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        kind:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FactionState } from './faction.model';\nimport { PileState } from './pile.model';\n\n/**\n * Defining the GameState object managed by GameStateStoreService\n */\nexport interface GameState {\n  faction: FactionState[];\n  pile: PileState[];\n}\n\nexport const emptyGameState: GameState = {\n  faction: [],\n  pile: [],\n};\n\n/**\n * GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\n * An example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\n * This object defining the state would be of type GameStateElement.\n */\nexport interface GameStateElement {\n  kind: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameStatePatch.html":{"url":"interfaces/GameStatePatch.html","title":"interface - GameStatePatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameStatePatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state-patch.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            patch\n                                        \n                                \n                                \n                                        \n                                            timeStamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        patch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        patch:     Operation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Operation[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeStamp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Operation } from 'fast-json-patch';\n\nexport interface GameStatePatch {\n  timeStamp: number;\n  patch: Operation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStatePatchService.html":{"url":"injectables/GameStatePatchService.html","title":"injectable - GameStatePatchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStatePatchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-patch.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Creates and applies GameStatePatches\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                apply\n                            \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        apply\n                        \n                    \n                \n            \n            \n                \napply(gameState: GameState, gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-patch.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gameState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GameState\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(oldState: GameState, newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-patch.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GameStatePatch\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameState } from '../model/game-state.model';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { applyPatch, compare } from 'fast-json-patch';\n\n/**\n * Creates and applies GameStatePatches\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStatePatchService {\n  create(oldState: GameState, newState: GameState): GameStatePatch {\n    return {\n      timeStamp: Date.now(),\n      patch: compare(oldState, newState),\n    };\n  }\n\n  apply(gameState: GameState, gsp: GameStatePatch): GameState {\n    return applyPatch(gameState, gsp.patch, undefined, false).newDocument;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateService.html":{"url":"injectables/GameStateService.html","title":"injectable - GameStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The GameStateService provides an interface for the rest of the system to interact with state.\nIt does this by orchestrating the various other GameState related services.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyGsp\n                            \n                            \n                                commitTransaction\n                            \n                            \n                                registerPile\n                            \n                            \n                                requireTransaction\n                            \n                            \n                                rollbackTransaction\n                            \n                            \n                                setFaction\n                            \n                            \n                                setPile\n                            \n                            \n                                startTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    faction$\n                                \n                                \n                                    pile$\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateStore: GameStateStoreService, gspService: GameStatePatchService, gameStateClient: GameStateClientService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-state.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateStore\n                                                  \n                                                        \n                                                                        GameStateStoreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gspService\n                                                  \n                                                        \n                                                                        GameStatePatchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gameStateClient\n                                                  \n                                                        \n                                                                        GameStateClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyGsp\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyGsp(gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \ncommitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerPile\n                        \n                    \n                \n            \n            \n                \nregisterPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requireTransaction\n                        \n                    \n                \n            \n            \n                \nrequireTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Will throw error if there is not a transaction in progress. Call before state updates that require a transaction.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \nrollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFaction\n                        \n                    \n                \n            \n            \n                \nsetFaction(newState: FactionState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            FactionState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPile\n                        \n                    \n                \n            \n            \n                \nsetPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTransaction\n                        \n                    \n                \n            \n            \n                \nstartTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        faction$\n                    \n                \n\n                \n                    \n                        getfaction$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state.service.ts:63\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pile$\n                    \n                \n\n                \n                    \n                        getpile$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state.service.ts:71\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateStoreService } from './game-state-store.service';\nimport { GameStatePatchService } from './game-state-patch.service';\nimport { GameStateClientService } from './game-state-client.service';\nimport { filter, Observable } from 'rxjs';\nimport { FactionState } from '../model/faction.model';\nimport { PileState } from '../model/pile.model';\nimport { GameStatePatch } from '../model/game-state-patch.model';\n\n/**\n * The GameStateService provides an interface for the rest of the system to interact with state.\n * It does this by orchestrating the various other GameState related services.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateService {\n  constructor(\n    private gameStateStore: GameStateStoreService,\n    private gspService: GameStatePatchService,\n    private gameStateClient: GameStateClientService,\n  ) {\n    this.gameStateClient.gsp$.pipe(filter((gsp) => gsp != undefined)).subscribe((gsp) => {\n      this.applyGsp(gsp);\n    });\n  }\n\n  private applyGsp(gsp: GameStatePatch): void {\n    const updatedState = this.gspService.apply(this.gameStateStore.gameState, gsp);\n    this.gameStateStore.setGameState(updatedState);\n  }\n\n  startTransaction(): void {\n    this.gameStateStore.startTransaction();\n  }\n\n  commitTransaction(): void {\n    if (!this.gameStateStore.transactionState) {\n      throw new Error('No transaction in progress to commit');\n    } else {\n      const gsp = this.gspService.create(\n        this.gameStateStore.gameState,\n        this.gameStateStore.transactionState,\n      );\n      this.gameStateStore.commitTransaction();\n      this.gameStateClient.sendGspToBackend(gsp);\n    }\n  }\n\n  rollbackTransaction(): void {\n    this.gameStateStore.rollbackTransaction();\n  }\n\n  /**\n   * Will throw error if there is not a transaction in progress. Call before state updates that require a transaction.\n   */\n  requireTransaction(): void {\n    if (!this.gameStateStore.transactionState) {\n      throw new Error('Transaction has not been started.');\n    }\n  }\n\n  get faction$(): Observable {\n    return this.gameStateStore.faction$;\n  }\n\n  setFaction(newState: FactionState): void {\n    this.gameStateStore.setFaction(newState);\n  }\n\n  get pile$(): Observable {\n    return this.gameStateStore.pile$;\n  }\n\n  setPile(newState: PileState): void {\n    this.gameStateStore.setPile(newState);\n  }\n\n  registerPile(newState: PileState): void {\n    this.gameStateStore.registerPile(newState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateStoreService.html":{"url":"injectables/GameStateStoreService.html","title":"injectable - GameStateStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-store.service.ts\n        \n\n\n            \n                Description\n            \n            \n                GameStateStoreService is responsible for maintain the GameState and making it accessible to others.\nWhen a GameStateStoreService is instantiated, it creates an empty GameState and the various GameStateElements will need to be added by\nusing the register method of the state element management service such as PileService or AreaService.\nThe GameState has several top level keys, and GameStateStoreService provides observables for each of those keys.\nSo if someone was interested in the pile key, then they could subscribe to the pile$ observable.\nA value will be emitted on each observable whenever the GameState is updated, regardless of if the particular key has been updated.\nThe GameState can be updated in one of two ways:\n1.) Via the setGameState method which will takes an entire GameState object and overwrites the previous GameState object. All observables\nwill then emit the values from the new GameState object. This method is typically used when the GameState is updated based on a received GSP.\n2.) Via a transaction, which is typically done via actions taken during a turn. In this case, the startTransaction method is called and\nthe state is updated via calling one or more set methods (such as setPile) and then calling commitTransaction or rollbackTransaction.\nIn Either case, all observables will then emit the values from the new GameState object. This is to ensure that all local objects have the\ncurrent GameState.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _gameState\n                            \n                            \n                                    Private\n                                _transactionState\n                            \n                            \n                                    Private\n                                gameStateSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _setGameState\n                            \n                            \n                                commitTransaction\n                            \n                            \n                                    Private\n                                getObservableForKey\n                            \n                            \n                                registerPile\n                            \n                            \n                                    Private\n                                registerTransactionStateElement\n                            \n                            \n                                rollbackTransaction\n                            \n                            \n                                setFaction\n                            \n                            \n                                setGameState\n                            \n                            \n                                setPile\n                            \n                            \n                                    Private\n                                setTransactionStateElement\n                            \n                            \n                                startTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gameState\n                                \n                                \n                                    transactionState\n                                \n                                \n                                    faction$\n                                \n                                \n                                    pile$\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-state-store.service.ts:34\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _setGameState\n                        \n                    \n                \n            \n            \n                \n                        \n                    _setGameState(newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \ncommitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getObservableForKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getObservableForKey(selector: (state: GameState) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:40\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerPile\n                        \n                    \n                \n            \n            \n                \nregisterPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registerTransactionStateElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerTransactionStateElement(key, newGameStateElement: GameStateElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Used to register a new GameStateElement.\nA transaction must NOT be started. Cannot register the same GameStateElement more than once.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    key of the GameState object that stores this kind of GameStateElement\n\n                                            \n                                        \n                                        \n                                                newGameStateElement\n                                            \n                                                            GameStateElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the GameStateElement to register.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \nrollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFaction\n                        \n                    \n                \n            \n            \n                \nsetFaction(newState: FactionState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            FactionState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGameState\n                        \n                    \n                \n            \n            \n                \nsetGameState(newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPile\n                        \n                    \n                \n            \n            \n                \nsetPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setTransactionStateElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    setTransactionStateElement(key, newGameStateElement: GameStateElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Used to update the state of an already registered GameStateElement.\nA transaction must be started.\nGameStateElement will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    key of the GameState object that stores this kind of GameStateElement\n\n                                            \n                                        \n                                        \n                                                newGameStateElement\n                                            \n                                                            GameStateElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the GameStateElement to update. An existing GameStateElement that matches this passed in\nGameStateElement will be updated.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTransaction\n                        \n                    \n                \n            \n            \n                \nstartTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _gameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState\n\n                    \n                \n                \n                    \n                        Default value : deepClone(emptyGameState) as GameState\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _transactionState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        gameStateSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:34\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gameState\n                    \n                \n\n                \n                    \n                        getgameState()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:97\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        transactionState\n                    \n                \n\n                \n                    \n                        gettransactionState()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:101\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        faction$\n                    \n                \n\n                \n                    \n                        getfaction$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:149\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pile$\n                    \n                \n\n                \n                    \n                        getpile$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:157\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PileState } from '../model/pile.model';\nimport { BehaviorSubject, map, Observable } from 'rxjs';\nimport { FactionState } from '../model/faction.model';\nimport { emptyGameState, GameState, GameStateElement } from '../model/game-state.model';\nimport { Injectable } from '@angular/core';\nimport { deepClone } from 'fast-json-patch';\n\n/**\n * GameStateStoreService is responsible for maintain the GameState and making it accessible to others.\n *\n * When a GameStateStoreService is instantiated, it creates an empty GameState and the various GameStateElements will need to be added by\n * using the register method of the state element management service such as PileService or AreaService.\n *\n * The GameState has several top level keys, and GameStateStoreService provides observables for each of those keys.\n * So if someone was interested in the pile key, then they could subscribe to the pile$ observable.\n * A value will be emitted on each observable whenever the GameState is updated, regardless of if the particular key has been updated.\n *\n * The GameState can be updated in one of two ways:\n *\n * 1.) Via the setGameState method which will takes an entire GameState object and overwrites the previous GameState object. All observables\n * will then emit the values from the new GameState object. This method is typically used when the GameState is updated based on a received GSP.\n *\n * 2.) Via a transaction, which is typically done via actions taken during a turn. In this case, the startTransaction method is called and\n * the state is updated via calling one or more set methods (such as setPile) and then calling commitTransaction or rollbackTransaction.\n * In Either case, all observables will then emit the values from the new GameState object. This is to ensure that all local objects have the\n * current GameState.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateStoreService {\n  private _gameState: GameState = deepClone(emptyGameState) as GameState;\n  private _transactionState: GameState | null = null;\n  private gameStateSubject: BehaviorSubject;\n\n  constructor() {\n    this.gameStateSubject = new BehaviorSubject(this._gameState);\n  }\n\n  private getObservableForKey(selector: (state: GameState) => T): Observable {\n    return this.gameStateSubject.asObservable().pipe(\n      map((gameState) => {\n        return selector(gameState);\n      }),\n    );\n  }\n\n  /**\n   * Used to update the state of an already registered GameStateElement.\n   * A transaction must be started.\n   * @param key key of the GameState object that stores this kind of GameStateElement\n   * @param newGameStateElement the GameStateElement to update. An existing GameStateElement that matches this passed in\n   * GameStateElement will be updated.\n   * @private\n   */\n  private setTransactionStateElement(\n    key: keyof GameState,\n    newGameStateElement: GameStateElement,\n  ): void {\n    if (!this._transactionState) {\n      throw new Error('Must start transaction before updating GameState.');\n    }\n    const subStateArray = this._transactionState[key] as (typeof newGameStateElement)[];\n    const index = subStateArray.findIndex((item) => item.kind === newGameStateElement.kind);\n\n    if (index > -1) {\n      subStateArray[index] = newGameStateElement;\n    } else {\n      throw new Error(`State Element ${JSON.stringify(newGameStateElement)} not registered`);\n    }\n  }\n\n  /**\n   * Used to register a new GameStateElement.\n   * A transaction must NOT be started. Cannot register the same GameStateElement more than once.\n   * @param key key of the GameState object that stores this kind of GameStateElement\n   * @param newGameStateElement the GameStateElement to register.\n   * @private\n   */\n  private registerTransactionStateElement(\n    key: keyof GameState,\n    newGameStateElement: GameStateElement,\n  ): void {\n    if (this.transactionState) {\n      throw new Error('Can not register new State Elements while a transaction is in progress.');\n    }\n    const subStateArray = this._gameState[key] as (typeof newGameStateElement)[];\n    const index = subStateArray.findIndex((item) => item.kind === newGameStateElement.kind);\n\n    if (index > -1) {\n      throw new Error(`State Element ${JSON.stringify(newGameStateElement)} already registered`);\n    } else {\n      subStateArray.push(newGameStateElement);\n    }\n  }\n\n  get gameState(): GameState {\n    return deepClone(this._gameState) as GameState;\n  }\n\n  get transactionState(): GameState | null {\n    if (this._transactionState) {\n      return deepClone(this._transactionState) as GameState;\n    } else {\n      return null;\n    }\n  }\n\n  private _setGameState(newState: GameState) {\n    this._gameState = newState;\n    this.gameStateSubject.next(this.gameState);\n  }\n\n  setGameState(newState: GameState) {\n    if (this._transactionState) {\n      throw new Error('GameState can not be set during a transaction.');\n    } else {\n      this._setGameState(newState);\n    }\n  }\n\n  startTransaction(): void {\n    if (!this._transactionState) {\n      this._transactionState = deepClone(this._gameState) as GameState;\n    } else {\n      throw new Error(\"Can't start transaction as one already in progress.\");\n    }\n  }\n\n  commitTransaction(): void {\n    if (this._transactionState) {\n      this._setGameState(this._transactionState);\n      this._transactionState = null;\n    } else {\n      throw new Error('No transaction in progress to commit');\n    }\n  }\n\n  rollbackTransaction(): void {\n    if (this._transactionState) {\n      this._transactionState = null;\n      // Ensures gameState is a new object so that subscribers can detect the update\n      this._setGameState(deepClone(this._gameState) as GameState);\n    } else {\n      throw new Error('No transaction in progress to rollback');\n    }\n  }\n\n  get faction$(): Observable {\n    return this.getObservableForKey((gameState) => gameState.faction);\n  }\n\n  setFaction(newState: FactionState): void {\n    this.setTransactionStateElement('faction', newState);\n  }\n\n  get pile$(): Observable {\n    return this.getObservableForKey((gameState) => gameState.pile);\n  }\n\n  setPile(newState: PileState): void {\n    this.setTransactionStateElement('pile', newState);\n  }\n\n  registerPile(newState: PileState): void {\n    this.registerTransactionStateElement('pile', newState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Piece.html":{"url":"interfaces/Piece.html","title":"interface - Piece","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Piece\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/piece.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            kind\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        kind\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        kind:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Piece {\n  kind: string;\n}\n\nexport type PieceFactory = (kind: string) => Piece;\n\nexport function defaultPieceFactory(kind: string): Piece {\n  return { kind: kind };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Pile.html":{"url":"classes/Pile.html","title":"class - Pile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Pile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/pile.model.ts\n        \n\n\n            \n                Description\n            \n            \n                A Pile is used to draw one or more random pieces for a defined pool of pieces.\nA Pile has two Type Vars needed to be set when it's instantiated:\nTpiece Kind A type var used to set the kinds of Pieces the Pipe can contain and\nTpiece A type var used to set the type of Piece the Pile creates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _state\n                            \n                            \n                                    Private\n                                    Readonly\n                                pieceFactory\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                pull\n                            \n                            \n                                put\n                            \n                            \n                                setState\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                                \n                                    state\n                                \n                                \n                                    kind\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: PileState, pieceFactory: PieceFactory)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/model/pile.model.ts:23\n                            \n                        \n\n                \n                    \n                            Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\nthe pile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        PileState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An object that acts as the definition for the pool of pieces the Pile represents.\nEach key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\nthe pile.\n\n                                                        \n                                                \n                                                \n                                                        pieceFactory\n                                                  \n                                                        \n                                                                        PieceFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A factory function use to build the random selected piece.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PileState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        pieceFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PieceFactory\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        pull\n                        \n                    \n                \n            \n            \n                \npull(count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:63\n                        \n                    \n\n\n            \n                \n                        will be returned for any piece drawn while the pile is empty.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                            \n                                                    The number of pieces to draw from the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     []\n\n                        \n                            \n                                An array where each member represents the piece that was drawn. A null\nwill be returned for any piece drawn while the pile is empty.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(pieces: Piece[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pieces\n                                            \n                                                            Piece[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An array of pieces to add to the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setState\n                        \n                    \n                \n            \n            \n                \nsetState(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:39\n                                \n                            \n                    \n                        \n                                Returns the total number of pieces in the pile.\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:46\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        kind\n                    \n                \n\n                \n                    \n                        getkind()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:50\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { defaultPieceFactory, Piece, PieceFactory } from './piece.model';\nimport { GameStateElement } from './game-state.model';\nimport { deepClone } from 'fast-json-patch';\n\n/**\n * PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n */\nexport interface PileState extends GameStateElement {\n  inventory: Record;\n}\n\n/**\n * A Pile is used to draw one or more random pieces for a defined pool of pieces.\n * A Pile has two Type Vars needed to be set when it's instantiated:\n *\n * **Tpiece** Kind A type var used to set the kinds of Pieces the Pipe can contain and\n *\n * **Tpiece** A type var used to set the type of Piece the Pile creates\n *\n */\nexport class Pile {\n  private readonly pieceFactory: PieceFactory;\n  private _state: PileState;\n\n  /**\n   * @param state An object that acts as the definition for the pool of pieces the Pile represents.\n   * Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\n   * the pile.\n   * @param pieceFactory A factory function use to build the random selected piece.\n   */\n  constructor(state: PileState, pieceFactory: PieceFactory = defaultPieceFactory) {\n    this._state = state;\n    this.pieceFactory = pieceFactory;\n  }\n\n  /**\n   * Returns the total number of pieces in the pile.\n   */\n  get length(): number {\n    return Object.keys(this._state.inventory).reduce(\n      (sum, key) => sum + (this._state.inventory[key] ?? 0),\n      0,\n    );\n  }\n\n  get state(): PileState {\n    return deepClone(this._state) as PileState;\n  }\n\n  get kind(): string {\n    return this._state.kind;\n  }\n\n  setState(newState: PileState) {\n    this._state = newState;\n  }\n\n  /**\n   * @param count The number of pieces to draw from the pile.\n   * @returns An array where each member represents the piece that was drawn. A `null`\n   * will be returned for any piece drawn while the pile is empty.\n   */\n  pull(count = 1): (Piece | null)[] {\n    const pieces: (Piece | null)[] = [];\n    for (let i = 0; i  {\n        /** this.pieceCounts.get(key) will always return a value, but TSC complains it could be unknown. */\n        const pieceCount = this._state.inventory[key] ?? 0;\n        return pieceCount > 0;\n      });\n\n      if (piecesWithCount.length) {\n        const kind = piecesWithCount[Math.floor(Math.random() * piecesWithCount.length)];\n        const currentCount = this._state.inventory[kind] ?? 0;\n        pieces.push(this.pieceFactory(kind));\n        this._state.inventory[kind] = currentCount - 1;\n      } else {\n        pieces.push(null);\n      }\n    }\n    return pieces;\n  }\n\n  /**\n   * @param pieces An array of pieces to add to the pile.\n   */\n  put(pieces: Piece[]): void {\n    for (const piece of pieces) {\n      // Assume the current count is 0 if the piece is not yet in the inventory\n      const currentItemCount = this._state.inventory[piece.kind] || 0;\n      this._state.inventory[piece.kind] = currentItemCount + 1;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PileService.html":{"url":"injectables/PileService.html","title":"injectable - PileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/pile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                kindToLengthObservables\n                            \n                            \n                                    Private\n                                kindToLengthSubjects\n                            \n                            \n                                    Private\n                                kindToPile\n                            \n                            \n                                    Private\n                                registeredPileKinds\n                            \n                            \n                                registeredPiles$\n                            \n                            \n                                    Private\n                                registeredPilesSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitLength\n                            \n                            \n                                    Private\n                                getPile\n                            \n                            \n                                    Private\n                                initialize\n                            \n                            \n                                pull\n                            \n                            \n                                put\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                registerPiles\n                            \n                            \n                                    Private\n                                updateGameState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateSvc: GameStateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/pile.service.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateSvc\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emitLength\n                        \n                    \n                \n            \n            \n                \n                        \n                    emitLength(pile: Pile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pile\n                                            \n                                                            Pile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPile(kind: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Pile\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pull\n                        \n                    \n                \n            \n            \n                \npull(kind: string, count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Pulls a specified number of pieces from the pile of the given kind.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The kind of pile to pull pieces from.\n\n                                            \n                                        \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                            \n                                                    The number of pieces to pull. Defaults to 1.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     []\n\n                        \n                            \n                                An array of pieces pulled from the pile, or null values if the pile is empty.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(kind: string, pieces: Piece[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:119\n                        \n                    \n\n\n            \n                \n                        Puts the specified pieces into the pile of the given kind.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The kind of pile to put pieces into.\n\n                                            \n                                        \n                                        \n                                                pieces\n                                            \n                                                            Piece[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The pieces to put into the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(piles: Pile[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                piles\n                                            \n                                                            Pile[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registerPiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerPiles()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateGameState\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateGameState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        kindToLengthObservables\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map>()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:33\n                        \n                    \n\n            \n                \n                    Returns a map with a key for each registered pile and the value being an Observable emitting the length of the respective pile.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kindToLengthSubjects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map\n  >()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kindToPile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registeredPileKinds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Set\n\n                    \n                \n                \n                    \n                        Default value : new Set()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registeredPiles$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.registeredPilesSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:29\n                        \n                    \n\n            \n                \n                    Subscribers can use this Observable to determine if the pile they have been interested has been registered. Once the pile is registered,\nthen the subscriber can subscribe to other Observables, such as those made available in kindToLengthObservables\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registeredPilesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject>(new Set())\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateService } from './game-state.service';\nimport { Pile } from '../model/pile.model';\nimport { Piece } from '../model/piece.model';\nimport { BehaviorSubject, distinctUntilChanged, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\n/**\n * PileService is used to interact with the Piles used within the game. It manages their local state and related game state.\n * When the game is initialized, all the Piles to be used within the game would be registered with the PileService using the register method.\n * Callers that are interested in the state of a pile, such as a Component, can subscribe to the registeredPiles$ observable to validate the\n * Pile is registered. Once that is validated, they can make calls such as to pull or put pieces from/to the pile and subscribe to updates in\n * it's length.\n */\nexport class PileService {\n  private kindToPile: Map = new Map();\n  private registeredPileKinds: Set = new Set();\n  private registeredPilesSubject = new BehaviorSubject>(new Set());\n  private kindToLengthSubjects: Map> = new Map\n  >();\n  /**\n   * Subscribers can use this Observable to determine if the pile they have been interested has been registered. Once the pile is registered,\n   * then the subscriber can subscribe to other Observables, such as those made available in kindToLengthObservables\n   */\n  registeredPiles$: Observable> = this.registeredPilesSubject.asObservable();\n  /**\n   * Returns a map with a key for each registered pile and the value being an Observable emitting the length of the respective pile.\n   */\n  kindToLengthObservables: Map> = new Map>();\n\n  constructor(private gameStateSvc: GameStateService) {\n    this.initialize();\n  }\n\n  private initialize(): void {\n    this.gameStateSvc.pile$.subscribe((pileStates) => {\n      pileStates.forEach((pileState) => {\n        const pile = this.getPile(pileState.kind);\n        pile.setState(pileState);\n        this.emitLength(pile);\n      });\n    });\n  }\n\n  private emitLength(pile: Pile): void {\n    const lengthSubject = this.kindToLengthSubjects.get(pile.kind);\n    if (lengthSubject) {\n      lengthSubject.next(pile.length);\n    } else {\n      throw new Error(`Unable to find lengthSubject for pile kind ${pile.kind}`);\n    }\n  }\n\n  private updateGameState(): void {\n    for (const pile of this.kindToPile.values()) {\n      this.gameStateSvc.setPile(pile.state);\n      this.emitLength(pile);\n    }\n  }\n\n  private registerPiles(): void {\n    for (const pile of this.kindToPile.values()) {\n      this.gameStateSvc.registerPile(pile.state);\n      this.emitLength(pile);\n    }\n  }\n\n  private getPile(kind: string): Pile {\n    const pile = this.kindToPile.get(kind);\n    if (!pile) {\n      throw new Error(`Pile for kind ${kind} is not registered.`);\n    } else {\n      return pile;\n    }\n  }\n\n  register(piles: Pile[]): void {\n    piles.forEach((pile) => {\n      if (!this.registeredPileKinds.has(pile.kind)) {\n        this.kindToPile.set(pile.kind, pile);\n        this.registeredPileKinds.add(pile.kind);\n        const lengthSubject = new BehaviorSubject(pile.length);\n        this.kindToLengthSubjects.set(pile.kind, lengthSubject);\n        this.kindToLengthObservables.set(\n          pile.kind,\n          lengthSubject.asObservable().pipe(distinctUntilChanged()),\n        );\n      } else {\n        throw new Error(`Pile for kind ${pile.kind} already registered.`);\n      }\n    });\n    this.registeredPilesSubject.next(this.registeredPileKinds);\n    this.registerPiles();\n  }\n\n  /**\n   * Pulls a specified number of pieces from the pile of the given kind.\n   * @param kind The kind of pile to pull pieces from.\n   * @param count The number of pieces to pull. Defaults to 1.\n   * @returns An array of pieces pulled from the pile, or null values if the pile is empty.\n   */\n  pull(kind: string, count = 1): (Piece | null)[] {\n    this.gameStateSvc.requireTransaction();\n    const pile = this.getPile(kind);\n    const pieces = pile.pull(count);\n    this.updateGameState();\n    return pieces;\n  }\n\n  /**\n   * Puts the specified pieces into the pile of the given kind.\n   * @param kind The kind of pile to put pieces into.\n   * @param pieces The pieces to put into the pile.\n   */\n  put(kind: string, pieces: Piece[]): void {\n    this.gameStateSvc.requireTransaction();\n    const pile = this.getPile(kind);\n    pile.put(pieces);\n    this.updateGameState();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PileState.html":{"url":"interfaces/PileState.html","title":"interface - PileState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PileState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/pile.model.ts\n        \n\n\n            \n                Description\n            \n            \n                PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n\n            \n\n            \n                Extends\n            \n            \n                            GameStateElement\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            inventory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inventory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inventory:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultPieceFactory, Piece, PieceFactory } from './piece.model';\nimport { GameStateElement } from './game-state.model';\nimport { deepClone } from 'fast-json-patch';\n\n/**\n * PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n */\nexport interface PileState extends GameStateElement {\n  inventory: Record;\n}\n\n/**\n * A Pile is used to draw one or more random pieces for a defined pool of pieces.\n * A Pile has two Type Vars needed to be set when it's instantiated:\n *\n * **Tpiece** Kind A type var used to set the kinds of Pieces the Pipe can contain and\n *\n * **Tpiece** A type var used to set the type of Piece the Pile creates\n *\n */\nexport class Pile {\n  private readonly pieceFactory: PieceFactory;\n  private _state: PileState;\n\n  /**\n   * @param state An object that acts as the definition for the pool of pieces the Pile represents.\n   * Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\n   * the pile.\n   * @param pieceFactory A factory function use to build the random selected piece.\n   */\n  constructor(state: PileState, pieceFactory: PieceFactory = defaultPieceFactory) {\n    this._state = state;\n    this.pieceFactory = pieceFactory;\n  }\n\n  /**\n   * Returns the total number of pieces in the pile.\n   */\n  get length(): number {\n    return Object.keys(this._state.inventory).reduce(\n      (sum, key) => sum + (this._state.inventory[key] ?? 0),\n      0,\n    );\n  }\n\n  get state(): PileState {\n    return deepClone(this._state) as PileState;\n  }\n\n  get kind(): string {\n    return this._state.kind;\n  }\n\n  setState(newState: PileState) {\n    this._state = newState;\n  }\n\n  /**\n   * @param count The number of pieces to draw from the pile.\n   * @returns An array where each member represents the piece that was drawn. A `null`\n   * will be returned for any piece drawn while the pile is empty.\n   */\n  pull(count = 1): (Piece | null)[] {\n    const pieces: (Piece | null)[] = [];\n    for (let i = 0; i  {\n        /** this.pieceCounts.get(key) will always return a value, but TSC complains it could be unknown. */\n        const pieceCount = this._state.inventory[key] ?? 0;\n        return pieceCount > 0;\n      });\n\n      if (piecesWithCount.length) {\n        const kind = piecesWithCount[Math.floor(Math.random() * piecesWithCount.length)];\n        const currentCount = this._state.inventory[kind] ?? 0;\n        pieces.push(this.pieceFactory(kind));\n        this._state.inventory[kind] = currentCount - 1;\n      } else {\n        pieces.push(null);\n      }\n    }\n    return pieces;\n  }\n\n  /**\n   * @param pieces An array of pieces to add to the pile.\n   */\n  put(pieces: Piece[]): void {\n    for (const piece of pieces) {\n      // Assume the current count is 0 if the piece is not yet in the inventory\n      const currentItemCount = this._state.inventory[piece.kind] || 0;\n      this._state.inventory[piece.kind] = currentItemCount + 1;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Player.html":{"url":"interfaces/Player.html","title":"interface - Player","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Player\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/player.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Player {\n  id: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/engine/model/faction.model.ts\n            \n            interface\n            FactionState\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state-patch.model.ts\n            \n            interface\n            GameStatePatch\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state.model.ts\n            \n            interface\n            GameState\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state.model.ts\n            \n            interface\n            GameStateElement\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state.model.ts\n            \n            variable\n            emptyGameState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/engine/model/piece.model.ts\n            \n            interface\n            Piece\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/piece.model.ts\n            \n            function\n            defaultPieceFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/engine/model/pile.model.ts\n            \n            class\n            Pile\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/engine/model/pile.model.ts\n            \n            interface\n            PileState\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/player.model.ts\n            \n            interface\n            Player\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-management.service.ts\n            \n            injectable\n            GameManagementService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-client.service.ts\n            \n            injectable\n            GameStateClientService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-patch.service.ts\n            \n            injectable\n            GameStatePatchService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-store.service.ts\n            \n            injectable\n            GameStateStoreService\n            \n                18 %\n                (3/16)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state.service.ts\n            \n            injectable\n            GameStateService\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                src/app/engine/service/pile.service.ts\n            \n            injectable\n            PileService\n            \n                25 %\n                (4/16)\n            \n        \n        \n            \n                \n                src/app/engine/util.ts\n            \n            function\n            deepCompare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/game/component/draw-pool-game/draw-pool-game.component.ts\n            \n            component\n            DrawPoolGameComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/game/dominant-species.constants.ts\n            \n            variable\n            baseGameState\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/game/model/animal.model.ts\n            \n            class\n            Animal\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/app/game/model/animal.model.ts\n            \n            variable\n            inherentElementKindByAnimalKind\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.2.0\n        \n            @angular/cdk : ^18.2.7\n        \n            @angular/common : ^18.2.0\n        \n            @angular/compiler : ^18.2.0\n        \n            @angular/core : ^18.2.0\n        \n            @angular/forms : ^18.2.0\n        \n            @angular/material : ^18.2.7\n        \n            @angular/platform-browser : ^18.2.0\n        \n            @angular/platform-browser-dynamic : ^18.2.0\n        \n            @angular/router : ^18.2.0\n        \n            fast-json-patch : ^3.1.1\n        \n            lodash : ^4.17.21\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.10\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dsPieceKind   (src/.../dominant-species.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/game/dominant-species.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        dsPieceKind\n                    \n                \n                        \n                            \n                                 ELEMENT\n                            \n                        \n                        \n                            \n                                Value : element\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_AMPHIBIAN\n                            \n                        \n                        \n                            \n                                Value : actionPawnAmphibian\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_ARACHNID\n                            \n                        \n                        \n                            \n                                Value : actionPawnArachnid\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_BIRD\n                            \n                        \n                        \n                            \n                                Value : actionPawnBird\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_INSECT\n                            \n                        \n                        \n                            \n                                Value : actionPawnInsect\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_MAMMAL\n                            \n                        \n                        \n                            \n                                Value : actionPawnMammal\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_REPTILE\n                            \n                        \n                        \n                            \n                                Value : actionPawnReptile\n                            \n                        \n                        \n                            \n                                 SPECIES_AMPHIBIAN\n                            \n                        \n                        \n                            \n                                Value : speciesAmphibian\n                            \n                        \n                        \n                            \n                                 SPECIES_ARACHNID\n                            \n                        \n                        \n                            \n                                Value : speciesArachnid\n                            \n                        \n                        \n                            \n                                 SPECIES_BIRD\n                            \n                        \n                        \n                            \n                                Value : speciesBird\n                            \n                        \n                        \n                            \n                                 SPECIES_INSECT\n                            \n                        \n                        \n                            \n                                Value : speciesInsect\n                            \n                        \n                        \n                            \n                                 SPECIES_MAMMAL\n                            \n                        \n                        \n                            \n                                Value : speciesMammal\n                            \n                        \n                        \n                            \n                                 SPECIES_REPTILE\n                            \n                        \n                        \n                            \n                                Value : speciesReptile\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            deepCompare   (src/.../util.ts)\n                        \n                        \n                            defaultPieceFactory   (src/.../piece.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/engine/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deepCompare\n                        \n                    \n                \n            \n            \n                \ndeepCompare(object1, object2)\n                \n            \n\n\n\n\n            \n                \n                        Used to determine if two objects are equal. Often used in distinctUntilChanged().\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                object1\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                object2\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/app/engine/model/piece.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultPieceFactory\n                        \n                    \n                \n            \n            \n                \ndefaultPieceFactory(kind: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Piece\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDominantSpecies\nThis project was generated with Angular CLI version 18.2.5.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 Joe K.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnimalKind   (src/.../animal.model.ts)\n                        \n                        \n                            AnimalState   (src/.../animal.model.ts)\n                        \n                        \n                            PieceFactory   (src/.../piece.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/game/model/animal.model.ts\n    \n    \n        \n            \n                \n                    \n                    AnimalKind\n                \n            \n            \n                \n                            \"amphibianAnimal\" | \"arachnidAnimal\" | \"birdAnimal\" | \"insectAnimal\" | \"mammalAnimal\" | \"reptileAnimal\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AnimalState\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/engine/model/piece.model.ts\n    \n    \n        \n            \n                \n                    \n                    PieceFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            baseGameState   (src/.../dominant-species.constants.ts)\n                        \n                        \n                            emptyGameState   (src/.../game-state.model.ts)\n                        \n                        \n                            inherentElementKindByAnimalKind   (src/.../animal.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideAnimationsAsync('noop'),\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/app/game/dominant-species.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        baseGameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState\n\n                    \n                \n                \n                    \n                        Default value : {\n  faction: [],\n  pile: [\n    {\n      kind: dsPieceKind.ELEMENT as string,\n      inventory: {\n        // 20 Elements each, with 2 being places on Earth, leaving 18 in the bag\n        grassElement: 18,\n        grubElement: 18,\n        meatElement: 18,\n        seedElement: 18,\n        sunElement: 18,\n        waterElement: 18,\n      },\n    },\n  ],\n}\n                    \n                \n\n            \n                \n                    GameState defining the static elements of the DS game\n\n                \n            \n\n        \n    \n\n    src/app/engine/model/game-state.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        emptyGameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState\n\n                    \n                \n                \n                    \n                        Default value : {\n  faction: [],\n  pile: [],\n}\n                    \n                \n\n\n        \n    \n\n    src/app/game/model/animal.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        inherentElementKindByAnimalKind\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map([\n  ['amphibianAnimal', 'waterElement'],\n  ['arachnidAnimal', 'grubElement'],\n  ['birdAnimal', 'seedElement'],\n  ['insectAnimal', 'grassElement'],\n  ['mammalAnimal', 'meatElement'],\n  ['reptileAnimal', 'sunElement'],\n] as const)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
