var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Animal.html",[0,0.731,1,1.576]],["body/classes/Animal.html",[0,0.508,1,2.851,2,1.549,3,0.37,4,0.329,5,0.329,6,1.365,7,1.472,8,2.324,9,3.255,10,2.437,11,4.341,12,3.255,13,3.255,14,4.885,15,4.561,16,0.186,17,0.688,18,3.907,19,1.322,20,1.226,21,3.255,22,3.255,23,1.827,24,1.439,25,1.376,26,2.789,27,0.991,28,2.324,29,4.042,30,1.627,31,3.255,32,1.34,33,0.037,34,0.494,35,1.34,36,3.255,37,2.249,38,2.169,39,3.255,40,1.799,41,3.467,42,3.255,43,3.255,44,3.255,45,2.789,46,2.048,47,1.525,48,1.472,49,2.169,50,2.169,51,2.169,52,2.169,53,2.169,54,2.169,55,4.341,56,2.694,57,3.255,58,3.255,59,1.795,60,2.169,61,2.169,62,2.169,63,2.694,64,0.925,65,2.169,66,2.169,67,0.826,68,2.169,69,1.349,70,2.169,71,2.169,72,0.74,73,3.233,74,2.324,75,2.324,76,2.048,77,2.324,78,2.048,79,2.324,80,1.472,81,1.549,82,1.365,83,1.795,84,1.795,85,1.795,86,1.795,87,1.795,88,1.795,89,2.169,90,2.169,91,2.169,92,2.169,93,1.489,94,2.169,95,2.169,96,2.169,97,2.169,98,1.795,99,2.169,100,2.169,101,2.169,102,2.169,103,2.169,104,2.169,105,2.169,106,1.365,107,2.169,108,1.827,109,2.694,110,1.549,111,2.169,112,2.169,113,3.255,114,2.169,115,1.827,116,2.169,117,2.169,118,0.019,119,0.019]],["title/components/AppComponent.html",[120,1.425,121,1.964]],["body/components/AppComponent.html",[0,0.811,3,0.591,4,0.526,5,0.526,16,0.297,17,0.957,25,1.168,30,1.082,33,0.037,34,0.35,41,2.846,64,0.984,67,1.065,72,0.591,118,0.027,119,0.027,120,2.3,121,3.359,122,3.229,123,2.867,124,2.867,125,2.867,126,2.867,127,2.867,128,3.812,129,4.419,130,2.065,131,3.743,132,3.229,133,3.743,134,5.037,135,3.359,136,3.743,137,4.524,138,3.743,139,4.524,140,5.037,141,1.749,142,1.435,143,3.743,144,4.524,145,3.464,146,1.305,147,2.867,148,3.464,149,2.827,150,2.473,151,3.464,152,2.867,153,3.743,154,2.867,155,3.359,156,2.867,157,2.867,158,2.179,159,1.305,160,2.867,161,2.867]],["title/components/DrawPoolGameComponent.html",[120,1.425,135,1.964]],["body/components/DrawPoolGameComponent.html",[0,0.446,3,0.325,4,0.289,5,0.289,16,0.309,17,0.624,20,1.111,24,0.542,25,1.048,27,1.347,30,1.604,32,1.012,33,0.037,34,0.41,35,1.012,40,0.79,41,2.554,47,1.45,48,1.977,64,1.376,67,1.058,72,0.325,80,1.53,93,0.654,108,1.07,118,0.017,119,0.017,120,1.647,121,1.199,122,2.106,123,1.577,124,1.577,125,1.577,127,1.577,128,2.899,129,3.36,131,2.441,132,2.106,133,2.441,135,2.554,136,2.441,138,2.441,141,1.489,142,1.222,143,1.577,146,0.718,149,3.376,150,3.746,152,1.577,153,2.441,154,1.577,155,2.554,156,1.577,157,1.577,158,3.53,159,1.53,160,1.577,161,1.577,162,4.342,163,1.577,164,3.608,165,3.608,166,2.949,167,2.949,168,4.392,169,4.392,170,3.36,171,4.061,172,2.593,173,2.949,174,3.843,175,4.061,176,1.906,177,2.554,178,2.985,179,2.05,180,3.608,181,2.554,182,2.949,183,2.949,184,1.906,185,1.906,186,1.906,187,2.949,188,1.906,189,1.906,190,1.906,191,1.07,192,1.855,193,1.906,194,2.949,195,1.906,196,1.906,197,1.906,198,1.361,199,1.906,200,1.577,201,1.577,202,1.361,203,0.962,204,1.577,205,1.906,206,1.906,207,1.906,208,1.906,209,1.361,210,2.949,211,1.906,212,1.906,213,1.906,214,1.199,215,1.906,216,1.07,217,1.906,218,1.906,219,1.906,220,1.906,221,1.906,222,3.843,223,1.906,224,1.906,225,1.906,226,1.906,227,1.906,228,1.906,229,1.906,230,1.906,231,1.906,232,1.906,233,1.906,234,1.906,235,1.199,236,1.906,237,1.906,238,2.441,239,2.441,240,4.061,241,2.949]],["title/interfaces/FactionState.html",[69,1.293,242,0.532]],["body/interfaces/FactionState.html",[3,0.734,4,0.653,5,0.653,10,3.241,16,0.369,17,1.096,26,4.122,33,0.036,34,0.435,67,1.096,69,2.147,72,0.734,118,0.03,119,0.03,159,1.621,242,0.734,243,1.782,244,3.56,245,3.7,246,2.304,247,4.302,248,1.964]],["title/injectables/GameManagementService.html",[177,1.964,249,0.806]],["body/injectables/GameManagementService.html",[0,0.8,1,2.527,3,0.583,4,0.519,5,0.519,16,0.293,20,1.69,24,1.275,25,1.292,26,3.202,27,1.562,30,1.401,32,1.173,33,0.037,34,0.346,35,1.173,47,1.068,48,1.69,67,1.198,72,0.583,76,2.151,78,2.151,80,1.289,118,0.026,119,0.026,130,1.562,146,1.289,159,1.289,170,4.397,177,2.822,179,2.859,198,2.442,201,2.83,248,1.562,249,1.158,250,1.562,251,2.527,252,2.83,253,3.42,254,3.42,255,3.42,256,2.151,257,1.562,258,1.562,259,1.562,260,2.442,261,3.42,262,1.886,263,1.92,264,3.42,265,1.727,266,2.83,267,3.42,268,2.83,269,3.712,270,3.42,271,3.42,272,3.42,273,3.42,274,3.42]],["title/interfaces/GameState.html",[242,0.532,262,1.176]],["body/interfaces/GameState.html",[1,1.835,3,0.62,4,0.552,5,0.552,7,1.369,16,0.311,17,0.987,19,1.464,24,1.033,33,0.037,34,0.549,64,1.033,67,0.987,69,2.253,72,0.796,118,0.027,119,0.027,242,0.796,243,1.506,246,2.135,262,2.049,275,2.286,276,2.594,277,3.679,278,3.052,279,3.861,280,2.356,281,3.231,282,1.865,283,2.253,284,3.007,285,3.007,286,3.861,287,3.007,288,2.935,289,3.007,290,2.594,291,3.007,292,2.594,293,3.007,294,1.659,295,3.007,296,3.007]],["title/injectables/GameStateClientService.html",[249,0.806,297,1.964]],["body/injectables/GameStateClientService.html",[0,0.897,3,0.654,4,0.582,5,0.582,16,0.328,19,1.576,20,1.818,23,2.709,25,0.989,30,1.507,32,1.314,33,0.037,34,0.387,35,1.314,47,1.197,48,1.818,67,1.117,72,0.654,93,1.314,118,0.028,119,0.028,130,1.75,146,1.444,203,1.935,216,2.709,249,1.246,250,1.75,251,2.667,263,2.151,265,1.935,297,3.036,298,3.171,299,4.826,300,3.488,301,4.826,302,2.8,303,3.832,304,3.832,305,3.832,306,2.736,307,3.832,308,3.832]],["title/interfaces/GameStateElement.html",[242,0.532,246,1.293]],["body/interfaces/GameStateElement.html",[1,2.3,3,0.597,4,0.531,5,0.531,7,1.319,16,0.3,17,0.963,19,1.619,24,1.523,33,0.037,34,0.562,64,1.438,67,0.963,69,1.887,72,0.777,118,0.027,119,0.027,242,0.777,243,1.45,246,2.361,262,1.716,275,2.202,276,2.499,277,3.614,278,3.12,279,2.897,280,1.768,281,3.12,282,1.201,283,1.887,284,2.897,285,2.897,286,4.437,287,3.769,288,3.373,289,3.769,290,3.252,291,3.769,292,3.252,293,3.769,294,2.08,295,3.769,296,3.769]],["title/interfaces/GameStatePatch.html",[242,0.532,302,1.576]],["body/interfaces/GameStatePatch.html",[3,0.727,4,0.647,5,0.647,16,0.365,17,1.09,19,1.211,33,0.036,34,0.521,67,0.901,72,0.727,118,0.03,119,0.03,191,3.109,242,0.727,243,1.765,257,1.945,258,1.945,259,2.69,275,2.68,302,2.601,309,3.526,310,4.762,311,5.754]],["title/injectables/GameStatePatchService.html",[249,0.806,312,1.964]],["body/injectables/GameStatePatchService.html",[0,0.782,3,0.57,4,0.507,5,0.507,7,1.26,16,0.286,19,1.496,20,1.665,25,1.141,30,1.38,32,1.516,33,0.037,34,0.446,35,1.516,47,1.38,67,1.114,72,0.57,93,1.516,118,0.026,119,0.026,130,1.526,146,1.26,248,1.526,249,1.141,250,1.526,251,2.499,257,1.526,258,1.526,259,2.018,262,2.288,263,2.48,265,1.688,300,3.114,302,2.841,306,2.387,310,2.766,312,2.78,313,2.766,314,3.155,315,4.419,316,4.419,317,3.657,318,4.419,319,4.419,320,3.343,321,4.419,322,2.956,323,3.343,324,3.343,325,3.343,326,3.343,327,3.343,328,3.343,329,3.343,330,3.343,331,3.343,332,3.343]],["title/injectables/GameStateService.html",[179,1.576,249,0.806]],["body/injectables/GameStateService.html",[0,0.468,3,0.341,4,0.304,5,0.304,7,0.754,16,0.171,19,1.444,20,1.153,23,1.718,25,1.159,27,1.398,30,1.688,32,1.54,33,0.037,34,0.454,35,1.54,40,1.726,47,1.587,48,2.152,67,1.102,69,1.726,72,0.341,80,1.153,93,1.05,108,2.658,109,2.533,118,0.018,119,0.018,130,0.913,146,0.754,159,1.401,172,2.391,179,2.103,202,1.428,203,1.01,216,2.087,242,0.522,248,0.913,249,0.79,250,0.913,251,2.769,262,1.856,263,1.718,265,1.01,280,2.103,281,2.087,282,1.275,283,1.726,290,2.185,292,2.654,297,2.62,300,2.824,302,2.103,306,1.428,312,2.62,317,1.655,322,1.718,333,1.655,334,2.533,335,3.061,336,3.061,337,2.533,338,3.061,339,2.533,340,3.061,341,3.061,342,3.447,343,2.533,344,4.165,345,3.447,346,2.533,347,2.533,348,3.447,349,2,350,3.718,351,3.718,352,2,353,3.061,354,2,355,2,356,2.533,357,2,358,2,359,3.715,360,3.077,361,3.061,362,2.533,363,2.533,364,3.061,365,2,366,2.533,367,2,368,2.533,369,2,370,2,371,1.655,372,2,373,1.428,374,2,375,2,376,2,377,2,378,1.655,379,1.428,380,2,381,2,382,2,383,3.718,384,2,385,2,386,2,387,1.655,388,3.061,389,2,390,2,391,2,392,3.718,393,1.655,394,1.655,395,2,396,2,397,2,398,2,399,2,400,1.428,401,2,402,2,403,2,404,2]],["title/injectables/GameStateStoreService.html",[249,0.806,280,1.576]],["body/injectables/GameStateStoreService.html",[0,0.283,3,0.206,4,0.183,5,0.183,7,0.455,16,0.226,17,0.431,19,1.554,20,1.17,23,1.144,25,1.033,27,1.207,30,1.635,32,1.442,33,0.037,34,0.47,35,1.373,40,2.018,47,1.414,48,1.951,63,1.686,67,0.795,69,1.286,72,0.206,80,0.768,82,0.76,93,1.442,108,2.247,110,0.862,115,1.484,118,0.012,119,0.012,128,0.862,130,0.551,141,1.029,142,1.286,146,0.455,172,2.644,202,0.862,203,0.61,209,1.455,216,2.457,222,1.686,238,1.686,246,1.286,248,0.551,249,0.526,250,0.551,251,2.672,256,0.76,257,0.551,258,0.551,259,0.551,262,2.264,263,0.678,265,0.61,268,0.999,278,2.457,280,2.123,281,2.247,282,0.907,283,1.286,288,1.282,294,1.417,300,1.282,322,2.677,334,1.686,342,3.112,343,2.569,345,3.112,346,2.569,347,1.686,348,3.112,356,1.686,359,3.312,360,2.187,362,1.686,366,1.686,368,1.686,371,0.999,373,0.862,378,0.999,379,0.862,387,0.999,393,1.686,394,0.999,405,0.999,406,2.038,407,2.038,408,2.038,409,2.038,410,2.038,411,1.743,412,2.038,413,3.48,414,3.104,415,2.038,416,2.038,417,2.038,418,2.038,419,2.038,420,3.104,421,3.112,422,1.686,423,2.038,424,1.686,425,2.181,426,2.038,427,2.038,428,4.526,429,2.038,430,1.686,431,2.476,432,1.282,433,2.038,434,3.48,435,3.104,436,2.038,437,2.038,438,2.038,439,2.038,440,3.104,441,1.953,442,3.104,443,2.038,444,1.455,445,2.038,446,2.038,447,2.038,448,2.643,449,3.104,450,3.104,451,1.282,452,1.953,453,1.686,454,2.038,455,1.686,456,1.455,457,2.643,458,2.643,459,2.643,460,2.038,461,2.038,462,2.038,463,2.643,464,2.038,465,2.038,466,1.208,467,1.208,468,2.038,469,1.208,470,2.038,471,0.61,472,1.208,473,1.208,474,1.208,475,2.038,476,1.208,477,1.208,478,2.038,479,1.208,480,1.208,481,3.17,482,1.208,483,1.208,484,2.187,485,1.208,486,1.208,487,1.208,488,1.208,489,1.208,490,1.208,491,1.208,492,1.208,493,1.208,494,1.208,495,1.208,496,1.208,497,1.208,498,4.378,499,1.208,500,1.208,501,1.208,502,1.208,503,1.208,504,1.208,505,1.208,506,1.208,507,1.208,508,1.208,509,3.104,510,2.038,511,1.208,512,1.208,513,1.208,514,2.643,515,1.208,516,1.686,517,1.208,518,1.208,519,1.208,520,0.999,521,1.208,522,1.208,523,1.208,524,1.208,525,2.038,526,1.208,527,1.208,528,1.208]],["title/interfaces/Piece.html",[37,1.293,242,0.532]],["body/interfaces/Piece.html",[3,0.722,4,0.643,5,0.643,16,0.363,17,1.086,24,1.719,33,0.036,34,0.519,37,2.379,64,1.671,72,0.942,93,1.452,118,0.03,119,0.03,242,0.722,243,1.754,471,2.138,529,2.663,530,2.663,531,3.503]],["title/classes/Pile.html",[0,0.731,282,1.071]],["body/classes/Pile.html",[0,0.384,2,1.17,3,0.28,4,0.249,5,0.249,7,1.408,8,2.668,16,0.14,17,0.554,19,1.238,20,0.987,23,1.47,24,1.484,25,0.965,27,0.748,28,1.87,30,1.602,32,1.282,33,0.037,34,0.543,35,1.282,37,2.35,46,1.648,47,1.428,48,1.233,59,1.356,64,0.466,67,0.692,72,0.447,80,1.641,93,1.494,106,2.351,115,2.097,118,0.015,119,0.015,141,0.828,142,1.085,149,2.097,155,2.351,158,2.351,159,0.618,172,2.199,191,2.666,192,2.988,214,2.058,235,2.058,242,0.28,245,1.17,246,1.085,248,0.748,256,1.031,257,0.748,258,0.748,259,0.748,278,1.47,282,2.006,283,2.163,294,1.865,314,1.87,322,1.47,411,2.445,425,2.351,431,1.87,432,1.648,441,2.058,451,1.648,452,2.74,456,1.17,471,1.323,481,2.351,530,3.381,532,1.17,533,3.092,534,4.119,535,2.168,536,2.168,537,1.87,538,2.168,539,3.092,540,2.707,541,2.168,542,2.168,543,2.707,544,2.707,545,2.168,546,2.168,547,2.619,548,2.619,549,2.336,550,3.11,551,2.168,552,2.168,553,2.168,554,1.47,555,1.87,556,2.168,557,1.639,558,2.168,559,1.639,560,2.707,561,3.381,562,2.668,563,2.168,564,2.168,565,1.639,566,2.168,567,1.639,568,1.639,569,1.639,570,2.168,571,1.639,572,1.639,573,1.639,574,1.648,575,1.356,576,1.356,577,1.356,578,1.356,579,1.356,580,1.356,581,1.87,582,1.356,583,2.168,584,1.356,585,1.356,586,2.168,587,2.168,588,1.356,589,1.356,590,1.356,591,1.356,592,1.356,593,1.356,594,1.356,595,2.168,596,2.168,597,1.356,598,2.168,599,2.168,600,1.356,601,1.356,602,1.356,603,2.168,604,2.168]],["title/injectables/PileService.html",[181,1.964,249,0.806]],["body/injectables/PileService.html",[0,0.333,3,0.243,4,0.216,5,0.216,7,0.88,16,0.122,17,0.494,19,0.844,20,0.88,24,1.529,25,1.053,27,0.65,30,1.62,32,1.4,33,0.037,34,0.497,35,1.4,37,1.573,40,2.15,47,1.498,48,1.808,64,1.325,67,0.803,72,0.243,80,1.696,82,3.264,93,0.801,106,2.163,108,1.667,110,1.016,115,1.93,118,0.014,119,0.014,120,0.65,130,0.65,141,2.177,142,1.931,146,0.536,159,1.431,172,2.863,174,2.845,178,1.932,179,1.736,181,2.163,191,2.291,198,1.016,203,0.718,204,1.177,209,2.455,214,1.869,216,2.527,235,1.469,249,0.603,250,0.65,265,0.718,266,1.177,282,2.067,294,1.066,337,1.177,339,1.177,363,1.177,373,1.667,379,1.016,411,1.667,413,1.177,421,1.932,422,1.932,424,2.458,425,1.469,441,1.469,452,2.567,453,2.845,455,1.177,481,1.869,484,1.177,516,1.177,520,1.932,534,3.974,537,1.016,545,3.567,546,3.567,550,2.455,554,1.311,562,1.667,605,1.177,606,3.797,607,2.971,608,2.971,609,2.971,610,3.438,611,2.971,612,2.335,613,2.971,614,3.438,615,1.423,616,2.335,617,2.335,618,1.423,619,2.335,620,1.423,621,1.423,622,2.335,623,1.423,624,2.335,625,3.438,626,3.438,627,2.335,628,2.335,629,2.335,630,1.423,631,2.335,632,2.335,633,1.423,634,2.971,635,1.423,636,4.798,637,1.932,638,2.335,639,2.335,640,1.423,641,1.423,642,1.423,643,2.335,644,1.423,645,1.932,646,2.971,647,2.335,648,2.335,649,2.335,650,2.335,651,1.423,652,1.423,653,1.177,654,2.335,655,1.423,656,1.423,657,1.423,658,1.423,659,1.423,660,1.423,661,1.423,662,1.423,663,1.423,664,1.423,665,1.423,666,1.423,667,2.335,668,3.797,669,1.423,670,1.423,671,1.423,672,1.423,673,2.971,674,1.423,675,1.423,676,1.423,677,2.335,678,1.423,679,1.423,680,1.423,681,1.423,682,1.423,683,1.423,684,1.423,685,1.423,686,1.423,687,2.971,688,2.335,689,2.335,690,1.423,691,1.423]],["title/interfaces/PileState.html",[242,0.532,283,1.293]],["body/interfaces/PileState.html",[0,0.506,3,0.369,4,0.328,5,0.328,7,0.815,8,2.318,16,0.185,17,0.687,19,1.108,24,1.32,28,1.544,30,0.675,33,0.037,34,0.469,37,2.282,46,1.36,47,1.014,48,0.815,64,0.614,67,0.825,72,0.554,80,1.838,93,1.673,106,2.727,115,2.189,118,0.019,119,0.019,142,0.896,149,1.823,155,2.043,158,2.043,159,0.815,172,1.64,191,2.189,192,3.275,214,1.36,235,1.36,242,0.369,243,0.896,245,2.318,246,1.616,248,0.987,256,1.36,257,0.987,258,0.987,259,0.987,278,1.214,282,1.935,283,2.206,294,1.483,314,1.544,322,1.214,411,2.189,425,2.043,431,1.544,432,1.36,441,1.36,451,1.36,452,2.453,456,1.544,471,1.092,481,2.453,530,3.183,532,1.544,533,2.687,534,4.067,535,1.789,536,1.789,537,1.544,538,1.789,539,2.687,540,3.227,541,1.789,542,1.789,543,1.789,544,1.789,549,1.544,550,2.784,551,1.789,552,1.789,553,1.789,554,1.214,555,1.544,556,1.789,558,1.789,560,1.789,561,2.687,562,2.318,563,1.789,564,1.789,566,1.789,570,1.789,574,2.043,575,1.789,576,2.687,577,2.687,578,2.687,579,2.687,580,2.687,581,3.316,582,3.227,583,2.687,584,1.789,585,1.789,586,2.687,587,2.687,588,1.789,589,1.789,590,1.789,591,1.789,592,1.789,593,1.789,594,1.789,595,2.687,596,2.687,597,1.789,598,2.687,599,2.687,600,1.789,601,1.789,602,1.789,603,2.687,604,2.687]],["title/interfaces/Player.html",[10,1.752,242,0.532]],["body/interfaces/Player.html",[3,0.748,4,0.666,5,0.666,10,2.943,16,0.376,17,1.109,25,1.5,33,0.035,34,0.53,64,1.713,72,0.748,118,0.031,119,0.031,242,0.748,243,1.817,269,4.809,692,3.63]],["title/coverage.html",[693,3.493]],["body/coverage.html",[0,0.984,1,1.566,5,0.471,6,2.644,10,1.741,19,1.452,33,0.037,34,0.313,37,1.285,40,1.285,45,2.215,69,1.285,81,2.215,118,0.025,119,0.025,120,1.919,121,1.951,126,2.567,135,1.951,149,2.359,150,2.215,162,2.567,163,2.567,177,1.951,179,1.566,181,1.951,192,3.726,242,0.96,244,2.567,246,1.285,249,1.421,251,2.697,252,2.567,260,2.215,262,1.169,275,2.999,276,3.001,280,1.566,282,1.064,283,1.285,297,1.951,298,2.567,302,1.566,309,2.567,312,1.951,313,2.567,333,2.567,405,2.567,471,2.122,529,2.644,532,3.001,574,1.951,605,2.567,692,2.567,693,2.567,694,2.567,695,3.102,696,3.102,697,5.11,698,2.567,699,4.767,700,2.567,701,4.767,702,4.767,703,4.203,704,4.203,705,4.203,706,4.203,707,3.102,708,3.102,709,3.102,710,2.567,711,3.102,712,3.102,713,3.102,714,2.567,715,2.567,716,4.203,717,4.203,718,3.102,719,2.215,720,2.215,721,3.102,722,3.102,723,3.102,724,3.102]],["title/dependencies.html",[725,1.875,726,3.098]],["body/dependencies.html",[33,0.037,118,0.03,119,0.03,146,1.556,147,3.417,203,2.085,257,1.885,258,1.885,259,1.885,726,3.417,727,4.129,728,6.077,729,4.129,730,5.055,731,4.129,732,4.129,733,4.129,734,4.129,735,5.055,736,5.055,737,4.129,738,4.129,739,4.129,740,4.129,741,4.129,742,4.129,743,4.129,744,4.129,745,4.129]],["title/miscellaneous/enumerations.html",[746,1.088,747,3.098]],["body/miscellaneous/enumerations.html",[16,0.343,33,0.037,41,3.121,118,0.029,119,0.029,142,2.576,200,4.105,719,2.859,720,3.542,746,1.659,747,3.314,748,3.314,749,4.005,750,4.005,751,4.005,752,4.005,753,4.005,754,4.005,755,4.005,756,4.005,757,4.005,758,4.005,759,4.005,760,4.005,761,4.005,762,4.005,763,4.005,764,4.005,765,4.005,766,4.005,767,4.005,768,4.005,769,4.005,770,4.005,771,4.005,772,4.005]],["title/miscellaneous/functions.html",[746,1.088,773,3.098]],["body/miscellaneous/functions.html",[16,0.365,24,1.211,25,1.33,32,1.767,33,0.035,34,0.43,35,1.767,37,1.765,47,1.609,64,1.464,118,0.03,119,0.03,288,2.68,411,2.892,432,2.68,529,2.68,531,3.526,574,3.241,645,3.526,653,3.526,714,3.526,715,4.264,746,1.765,773,3.526,774,4.26,775,3.526,776,4.26,777,5.152,778,4.26,779,4.26,780,4.26]],["title/index.html",[16,0.225,400,1.875,781,2.173]],["body/index.html",[4,0.541,25,0.921,33,0.027,40,1.478,46,2.243,118,0.027,119,0.027,120,2.332,239,4.739,434,3.814,451,2.243,554,2.867,555,3.855,725,2.546,782,3.566,783,4.609,784,3.566,785,5.108,786,5.108,787,2.951,788,3.566,789,3.566,790,4.609,791,5.591,792,5.827,793,3.566,794,3.566,795,3.566,796,3.566,797,3.566,798,3.566,799,3.566,800,3.566,801,2.951,802,3.566,803,3.566,804,5.108,805,3.566,806,3.566,807,3.566,808,3.566,809,3.566,810,4.609,811,4.609,812,5.399,813,3.566,814,4.609,815,3.566,816,3.566,817,3.566,818,3.566,819,4.609,820,3.566,821,3.566,822,3.566,823,3.566,824,3.566,825,3.566,826,5.108,827,3.566,828,3.566,829,2.951,830,2.546,831,3.566,832,3.566]],["title/license.html",[400,1.875,781,2.173,833,2.173]],["body/license.html",[24,1.038,33,0.027,56,3.875,98,4.276,118,0.027,119,0.027,430,3.024,549,2.609,554,2.628,694,3.024,801,3.024,829,3.024,833,3.024,834,3.654,835,5.167,836,3.654,837,3.654,838,3.654,839,3.654,840,4.682,841,3.654,842,3.654,843,3.654,844,3.654,845,3.654,846,3.654,847,4.682,848,5.994,849,3.654,850,3.654,851,3.654,852,3.654,853,3.654,854,3.654,855,3.654,856,3.654,857,3.654,858,3.654,859,3.654,860,3.654,861,4.682,862,3.654,863,3.654,864,3.654,865,3.654,866,3.654,867,3.654,868,3.654,869,4.682,870,4.682,871,3.654,872,3.654,873,3.654,874,3.654,875,3.654,876,3.654,877,3.654,878,3.654,879,3.654,880,3.654,881,3.654,882,3.654,883,3.654,884,3.654,885,3.654,886,3.654,887,3.654,888,3.654,889,3.654,890,3.654,891,3.654,892,3.654,893,3.654,894,3.654,895,3.654,896,3.654,897,3.654]],["title/modules.html",[898,3.493]],["body/modules.html",[33,0.033,118,0.033,119,0.033,898,4.042]],["title/overview.html",[830,3.013]],["body/overview.html",[2,3.388,33,0.032,45,3.388,118,0.032,119,0.032,122,3.388,243,1.966,250,2.167,444,3.92,830,3.388,899,4.745]],["title/properties.html",[17,0.792,725,1.875]],["body/properties.html",[17,1.022,33,0.034,118,0.033,119,0.033,787,3.998,900,4.831]],["title/miscellaneous/typealiases.html",[746,1.088,901,3.743]],["body/miscellaneous/typealiases.html",[6,2.805,16,0.382,29,4.382,33,0.036,34,0.451,73,4.382,74,3.184,75,3.184,76,2.805,77,3.184,78,2.805,79,3.184,118,0.031,119,0.031,471,2.252,529,2.805,530,3.331,746,1.848,775,3.691,902,4.46,903,4.382]],["title/miscellaneous/variables.html",[746,1.088,904,3.098]],["body/miscellaneous/variables.html",[6,2.237,15,3.808,16,0.305,24,1.011,33,0.037,34,0.465,40,1.474,64,1.011,74,2.539,75,2.539,76,2.237,77,2.539,78,2.237,79,2.539,80,1.34,81,3.285,82,2.237,83,3.808,84,3.808,85,3.808,86,3.808,87,3.808,88,3.808,118,0.027,119,0.027,132,2.539,141,2.576,142,2.114,159,1.34,260,3.285,262,1.734,277,2.539,281,1.996,282,1.22,294,1.624,444,2.539,581,2.539,637,2.943,698,2.943,700,3.808,710,2.943,719,2.539,720,3.285,746,1.474,748,2.943,903,2.943,904,2.943,905,3.557,906,3.557,907,3.557,908,3.557,909,3.557,910,3.557,911,3.557,912,3.557,913,3.557,914,3.557,915,3.557,916,5.824,917,3.557,918,3.557,919,3.557]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":192,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["0.0.0",{"_index":900,"title":{},"body":{"properties.html":{}}}],["0.14.10",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":115,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["1/1",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["1/15",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["18.2.0",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["18.2.5",{"_index":788,"title":{},"body":{"index.html":{}}}],["18.2.7",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":444,"title":{},"body":{"injectables/GameStateStoreService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.3.0",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["2/10",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":710,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["2024",{"_index":837,"title":{},"body":{"license.html":{}}}],["26",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["3.1.1",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["4.17.21",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["4/15",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":45,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"overview.html":{}}}],["60",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":899,"title":{},"body":{"overview.html":{}}}],["7.8.0",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["_gamestate",{"_index":457,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_setgamestate",{"_index":460,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_setgamestate(newstate",{"_index":465,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["_state",{"_index":543,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["_transactionstate",{"_index":458,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["above",{"_index":868,"title":{},"body":{"license.html":{}}}],["accessible",{"_index":409,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["accessors",{"_index":23,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{}}}],["action",{"_index":891,"title":{},"body":{"license.html":{}}}],["action_pawn_amphibian",{"_index":749,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_arachnid",{"_index":751,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_bird",{"_index":753,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_insect",{"_index":755,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_mammal",{"_index":757,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action_pawn_reptile",{"_index":759,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnamphibian",{"_index":750,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnarachnid",{"_index":752,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnbird",{"_index":754,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawninsect",{"_index":756,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnmammal",{"_index":758,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actionpawnreptile",{"_index":760,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actions",{"_index":446,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["acts",{"_index":551,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["actual_component",{"_index":161,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["add",{"_index":46,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"index.html":{}}}],["added",{"_index":14,"title":{},"body":{"classes/Animal.html":{}}}],["addedelement.kind",{"_index":112,"title":{},"body":{"classes/Animal.html":{}}}],["addedelements",{"_index":90,"title":{},"body":{"classes/Animal.html":{}}}],["addelement",{"_index":21,"title":{},"body":{"classes/Animal.html":{}}}],["addelement(element",{"_index":36,"title":{},"body":{"classes/Animal.html":{}}}],["adds",{"_index":39,"title":{},"body":{"classes/Animal.html":{}}}],["aliases",{"_index":902,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":110,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["always",{"_index":591,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["amphibiananimal",{"_index":74,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":859,"title":{},"body":{"license.html":{}}}],["angular",{"_index":785,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":146,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":196,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["angular/material/tooltip",{"_index":197,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["angular/platform",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":147,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["animal",{"_index":1,"title":{"classes/Animal.html":{}},"body":{"classes/Animal.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"coverage.html":{}}}],["animalkind",{"_index":73,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{}}}],["animalmodel",{"_index":99,"title":{},"body":{"classes/Animal.html":{}}}],["animalname",{"_index":101,"title":{},"body":{"classes/Animal.html":{}}}],["animalname.charat(0).touppercase",{"_index":103,"title":{},"body":{"classes/Animal.html":{}}}],["animalname.slice(1",{"_index":104,"title":{},"body":{"classes/Animal.html":{}}}],["animalstate",{"_index":29,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{}}}],["app",{"_index":129,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["app.component.html",{"_index":137,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":139,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":121,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":797,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applies",{"_index":315,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["apply",{"_index":317,"title":{},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{}}}],["apply(gamestate",{"_index":319,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["applygsp",{"_index":341,"title":{},"body":{"injectables/GameStateService.html":{}}}],["applygsp(gsp",{"_index":353,"title":{},"body":{"injectables/GameStateService.html":{}}}],["applypatch",{"_index":325,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["applypatch(gamestate",{"_index":329,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["arachnidanimal",{"_index":75,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["arising",{"_index":895,"title":{},"body":{"license.html":{}}}],["array",{"_index":562,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["artifacts",{"_index":806,"title":{},"body":{"index.html":{}}}],["associated",{"_index":849,"title":{},"body":{"license.html":{}}}],["assume",{"_index":602,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["authors",{"_index":884,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":798,"title":{},"body":{"index.html":{}}}],["available",{"_index":649,"title":{},"body":{"injectables/PileService.html":{}}}],["bag",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":287,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["based",{"_index":63,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{}}}],["basegamestate",{"_index":260,"title":{},"body":{"injectables/GameManagementService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":362,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["behaviorsubject",{"_index":484,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["behaviorsubject(pile.length",{"_index":682,"title":{},"body":{"injectables/PileService.html":{}}}],["behaviorsubject(this._gamestate",{"_index":492,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["behaviorsubject>(new",{"_index":650,"title":{},"body":{"injectables/PileService.html":{}}}],["being",{"_index":637,"title":{},"body":{"injectables/PileService.html":{},"miscellaneous/variables.html":{}}}],["birdanimal",{"_index":76,"title":{},"body":{"classes/Animal.html":{},"injectables/GameManagementService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":780,"title":{},"body":{"miscellaneous/functions.html":{}}}],["both",{"_index":57,"title":{},"body":{"classes/Animal.html":{}}}],["browser",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":555,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"index.html":{}}}],["c",{"_index":836,"title":{},"body":{"license.html":{}}}],["call",{"_index":361,"title":{},"body":{"injectables/GameStateService.html":{}}}],["called",{"_index":414,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["callers",{"_index":657,"title":{},"body":{"injectables/PileService.html":{}}}],["calling",{"_index":450,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["calls",{"_index":661,"title":{},"body":{"injectables/PileService.html":{}}}],["capabilities",{"_index":824,"title":{},"body":{"index.html":{}}}],["capitalized",{"_index":97,"title":{},"body":{"classes/Animal.html":{}}}],["card",{"_index":13,"title":{},"body":{"classes/Animal.html":{}}}],["case",{"_index":449,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["change",{"_index":800,"title":{},"body":{"index.html":{}}}],["charge",{"_index":844,"title":{},"body":{"license.html":{}}}],["check",{"_index":828,"title":{},"body":{"index.html":{}}}],["choice",{"_index":818,"title":{},"body":{"index.html":{}}}],["claim",{"_index":887,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Animal.html":{},"classes/Pile.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"overview.html":{}}}],["cli",{"_index":786,"title":{},"body":{"index.html":{}}}],["client.service",{"_index":377,"title":{},"body":{"injectables/GameStateService.html":{}}}],["client.service.ts",{"_index":298,"title":{},"body":{"injectables/GameStateClientService.html":{},"coverage.html":{}}}],["client.service.ts:13",{"_index":305,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["client.service.ts:9",{"_index":303,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["code",{"_index":802,"title":{},"body":{"index.html":{}}}],["command",{"_index":819,"title":{},"body":{"index.html":{}}}],["commit",{"_index":394,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["committransaction",{"_index":342,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["compare",{"_index":326,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["compare(oldstate",{"_index":328,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["complains",{"_index":593,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["component",{"_index":120,"title":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/PileService.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":156,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["components",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"overview.html":{}}}],["conditions",{"_index":867,"title":{},"body":{"license.html":{}}}],["connection",{"_index":896,"title":{},"body":{"license.html":{}}}],["console.log('create",{"_index":219,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log('end",{"_index":236,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log('start",{"_index":221,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["console.log(json.stringify(gsp",{"_index":307,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["const",{"_index":80,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":27,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{}}}],["constructor(gamemanagementsvc",{"_index":176,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["constructor(gamestateservice",{"_index":253,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["constructor(gamestatestore",{"_index":349,"title":{},"body":{"injectables/GameStateService.html":{}}}],["constructor(gamestatesvc",{"_index":615,"title":{},"body":{"injectables/PileService.html":{}}}],["constructor(private",{"_index":266,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/PileService.html":{}}}],["constructor(state",{"_index":28,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["contain",{"_index":542,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["contract",{"_index":892,"title":{},"body":{"license.html":{}}}],["copies",{"_index":861,"title":{},"body":{"license.html":{}}}],["copy",{"_index":847,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":835,"title":{},"body":{"license.html":{}}}],["count",{"_index":550,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["coverage",{"_index":693,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":318,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["create(oldstate",{"_index":321,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["creategame",{"_index":170,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{}}}],["creates",{"_index":314,"title":{},"body":{"injectables/GameStatePatchService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["current",{"_index":456,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["currentcount",{"_index":598,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["currentitemcount",{"_index":603,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["damages",{"_index":888,"title":{},"body":{"license.html":{}}}],["date.now",{"_index":327,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["deal",{"_index":850,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":897,"title":{},"body":{"license.html":{}}}],["deepclone",{"_index":256,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["deepclone(basegamestate",{"_index":267,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["deepclone(this._gamestate",{"_index":510,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["deepclone(this._state",{"_index":588,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["deepclone(this._transactionstate",{"_index":511,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["deepcompare",{"_index":715,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deepcompare(object1",{"_index":776,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"miscellaneous/variables.html":{}}}],["defaultpiecefactory",{"_index":574,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["defaultpiecefactory(kind",{"_index":531,"title":{},"body":{"interfaces/Piece.html":{},"miscellaneous/functions.html":{}}}],["defaults",{"_index":627,"title":{},"body":{"injectables/PileService.html":{}}}],["defined",{"_index":30,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["defines",{"_index":286,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["defining",{"_index":277,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"miscellaneous/variables.html":{}}}],["definition",{"_index":552,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["dependencies",{"_index":726,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Animal.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["detect",{"_index":521,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["determine",{"_index":645,"title":{},"body":{"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["dev",{"_index":794,"title":{},"body":{"index.html":{}}}],["development",{"_index":789,"title":{},"body":{"index.html":{}}}],["directive",{"_index":154,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["directives",{"_index":160,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":805,"title":{},"body":{"index.html":{}}}],["directory",{"_index":809,"title":{},"body":{"index.html":{}}}],["dist",{"_index":808,"title":{},"body":{"index.html":{}}}],["distinctuntilchanged",{"_index":653,"title":{},"body":{"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["distribute",{"_index":857,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":289,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["documentation",{"_index":694,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["dom",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["dominant",{"_index":143,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["dominantspecies",{"_index":782,"title":{},"body":{"index.html":{}}}],["done",{"_index":445,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["draw",{"_index":158,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["drawn",{"_index":561,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["drawpoolgamecomponent",{"_index":135,"title":{"components/DrawPoolGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["drawpoollength",{"_index":168,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["drew",{"_index":233,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["ds",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dspiecekind",{"_index":200,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"miscellaneous/enumerations.html":{}}}],["dspiecekind.element",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["during",{"_index":448,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["dynamic",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":296,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["e2e",{"_index":816,"title":{},"body":{"index.html":{}}}],["each",{"_index":294,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["earth",{"_index":914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":41,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"miscellaneous/enumerations.html":{}}}],["element.kind",{"_index":113,"title":{},"body":{"classes/Animal.html":{}}}],["elementindex",{"_index":114,"title":{},"body":{"classes/Animal.html":{}}}],["elementname",{"_index":224,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elementname.charat(0).touppercase",{"_index":226,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elementname.slice(1",{"_index":227,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["elements",{"_index":15,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["emit",{"_index":440,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["emitlength",{"_index":612,"title":{},"body":{"injectables/PileService.html":{}}}],["emitlength(pile",{"_index":617,"title":{},"body":{"injectables/PileService.html":{}}}],["emitted",{"_index":426,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["emitting",{"_index":638,"title":{},"body":{"injectables/PileService.html":{}}}],["empty",{"_index":235,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["end",{"_index":239,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"index.html":{}}}],["endturn",{"_index":171,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["engine/model/faction.model",{"_index":70,"title":{},"body":{"classes/Animal.html":{}}}],["engine/model/piece.model",{"_index":71,"title":{},"body":{"classes/Animal.html":{}}}],["engine/model/player.model",{"_index":68,"title":{},"body":{"classes/Animal.html":{}}}],["engine/service/game",{"_index":194,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["engine/service/pile.service",{"_index":199,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["ensure",{"_index":454,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ensures",{"_index":519,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ensuring",{"_index":42,"title":{},"body":{"classes/Animal.html":{}}}],["entire",{"_index":437,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["enumerations",{"_index":747,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":778,"title":{},"body":{"miscellaneous/functions.html":{}}}],["error",{"_index":109,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateService.html":{}}}],["error(\"can't",{"_index":387,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["error('gamestate",{"_index":514,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('gamestatestore",{"_index":391,"title":{},"body":{"injectables/GameStateService.html":{}}}],["error('length",{"_index":215,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["error('must",{"_index":499,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["error('no",{"_index":393,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["error('transaction",{"_index":399,"title":{},"body":{"injectables/GameStateService.html":{}}}],["error(`pile",{"_index":677,"title":{},"body":{"injectables/PileService.html":{}}}],["error(`unable",{"_index":671,"title":{},"body":{"injectables/PileService.html":{}}}],["event",{"_index":883,"title":{},"body":{"license.html":{}}}],["eventcoalescing",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":293,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["exceed",{"_index":43,"title":{},"body":{"classes/Animal.html":{}}}],["execute",{"_index":814,"title":{},"body":{"index.html":{}}}],["export",{"_index":72,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{}}}],["express",{"_index":875,"title":{},"body":{"license.html":{}}}],["extends",{"_index":245,"title":{},"body":{"interfaces/FactionState.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["faction",{"_index":281,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/variables.html":{}}}],["faction.model",{"_index":284,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["factionstate",{"_index":69,"title":{"interfaces/FactionState.html":{}},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["factory",{"_index":553,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["false).newdocument",{"_index":332,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["fast",{"_index":257,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["files",{"_index":801,"title":{},"body":{"index.html":{},"license.html":{}}}],["filter",{"_index":202,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["filter((gamestate",{"_index":494,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["filter(registeredpiles",{"_index":207,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["find",{"_index":672,"title":{},"body":{"injectables/PileService.html":{}}}],["first",{"_index":821,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":880,"title":{},"body":{"license.html":{}}}],["following",{"_index":866,"title":{},"body":{"license.html":{}}}],["formatelementname",{"_index":173,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["formatelementname(kind",{"_index":187,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["found",{"_index":217,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["free",{"_index":843,"title":{},"body":{"license.html":{}}}],["from/to",{"_index":662,"title":{},"body":{"injectables/PileService.html":{}}}],["function",{"_index":471,"title":{},"body":{"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":773,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":864,"title":{},"body":{"license.html":{}}}],["further",{"_index":825,"title":{},"body":{"index.html":{}}}],["game",{"_index":159,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["game.component",{"_index":151,"title":{},"body":{"components/AppComponent.html":{}}}],["game.component.html",{"_index":166,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.scss",{"_index":167,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts",{"_index":163,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["game.component.ts:18",{"_index":193,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:19",{"_index":182,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:28",{"_index":189,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:44",{"_index":184,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:49",{"_index":190,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:54",{"_index":188,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:60",{"_index":185,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game.component.ts:70",{"_index":186,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["game/component/draw",{"_index":148,"title":{},"body":{"components/AppComponent.html":{}}}],["game/dominant",{"_index":261,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["game/draw",{"_index":150,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["game/model/animal.model",{"_index":264,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["gamemanagementservice",{"_index":177,"title":{"injectables/GameManagementService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"coverage.html":{}}}],["gamemanagementsvc",{"_index":183,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["gamestate",{"_index":262,"title":{"interfaces/GameState.html":{}},"body":{"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gamestate.faction",{"_index":268,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateStoreService.html":{}}}],["gamestate.pile",{"_index":527,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestateclient",{"_index":351,"title":{},"body":{"injectables/GameStateService.html":{}}}],["gamestateclientservice",{"_index":297,"title":{"injectables/GameStateClientService.html":{}},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestateelement",{"_index":246,"title":{"interfaces/GameStateElement.html":{}},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["gamestatepatch",{"_index":302,"title":{"interfaces/GameStatePatch.html":{}},"body":{"injectables/GameStateClientService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestatepatches",{"_index":316,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["gamestatepatchservice",{"_index":312,"title":{"injectables/GameStatePatchService.html":{}},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"coverage.html":{}}}],["gamestateservice",{"_index":179,"title":{"injectables/GameStateService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateService.html":{},"injectables/PileService.html":{},"coverage.html":{}}}],["gamestatestore",{"_index":292,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{}}}],["gamestatestoreservice",{"_index":280,"title":{"injectables/GameStateStoreService.html":{}},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["gamestatesubject",{"_index":459,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["gamestatesvc",{"_index":178,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/PileService.html":{}}}],["generate",{"_index":804,"title":{},"body":{"index.html":{}}}],["generated",{"_index":784,"title":{},"body":{"index.html":{}}}],["getelements",{"_index":53,"title":{},"body":{"classes/Animal.html":{}}}],["getfaction",{"_index":371,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["getgamestate",{"_index":485,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getgsp",{"_index":304,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["getkind",{"_index":59,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{}}}],["getlength",{"_index":568,"title":{},"body":{"classes/Pile.html":{}}}],["getname",{"_index":61,"title":{},"body":{"classes/Animal.html":{}}}],["getobservableforkey",{"_index":461,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getobservableforkey(selector",{"_index":468,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["getowner",{"_index":65,"title":{},"body":{"classes/Animal.html":{}}}],["getpile",{"_index":373,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["getpile(kind",{"_index":619,"title":{},"body":{"injectables/PileService.html":{}}}],["gets",{"_index":55,"title":{},"body":{"classes/Animal.html":{}}}],["getstate",{"_index":571,"title":{},"body":{"classes/Pile.html":{}}}],["getting",{"_index":781,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettransactionstate",{"_index":487,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["given",{"_index":626,"title":{},"body":{"injectables/PileService.html":{}}}],["go",{"_index":827,"title":{},"body":{"index.html":{}}}],["granted",{"_index":842,"title":{},"body":{"license.html":{}}}],["grasselement",{"_index":86,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["grubelement",{"_index":84,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["gsp",{"_index":300,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["gsp.patch",{"_index":330,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["gspservice",{"_index":350,"title":{},"body":{"injectables/GameStateService.html":{}}}],["help",{"_index":826,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":841,"title":{},"body":{"license.html":{}}}],["holders",{"_index":885,"title":{},"body":{"license.html":{}}}],["html",{"_index":153,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["http://localhost:4200",{"_index":796,"title":{},"body":{"index.html":{}}}],["id",{"_index":269,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/Player.html":{}}}],["identifier",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":822,"title":{},"body":{"index.html":{}}}],["implied",{"_index":876,"title":{},"body":{"license.html":{}}}],["import",{"_index":67,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["imports",{"_index":133,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["included",{"_index":549,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"license.html":{}}}],["including",{"_index":56,"title":{},"body":{"classes/Animal.html":{},"license.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{}}}],["inherent",{"_index":11,"title":{},"body":{"classes/Animal.html":{}}}],["inherentelementkindbyanimalkind",{"_index":81,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inherentelements",{"_index":89,"title":{},"body":{"classes/Animal.html":{}}}],["initial",{"_index":415,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["initialize",{"_index":174,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/PileService.html":{}}}],["initialized",{"_index":516,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["initializegamestate",{"_index":343,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["initializegamestate(gamestate",{"_index":356,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["injectable",{"_index":249,"title":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"coverage.html":{}}}],["injectables",{"_index":250,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"overview.html":{}}}],["insectanimal",{"_index":77,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["instantiated",{"_index":538,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["interact",{"_index":337,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileService.html":{}}}],["interested",{"_index":424,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["interface",{"_index":242,"title":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"interfaces/Piece.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{}},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStateService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["interfaces",{"_index":243,"title":{},"body":{"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"interfaces/Piece.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"overview.html":{}}}],["inventory",{"_index":581,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/variables.html":{}}}],["it's",{"_index":537,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["item",{"_index":228,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["item.kind",{"_index":505,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["item[0",{"_index":230,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["joe",{"_index":838,"title":{},"body":{"license.html":{}}}],["json",{"_index":258,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["k",{"_index":839,"title":{},"body":{"license.html":{}}}],["karma",{"_index":815,"title":{},"body":{"index.html":{}}}],["keeps",{"_index":578,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["key",{"_index":425,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["keyof",{"_index":497,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["keys",{"_index":420,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["kind",{"_index":24,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["kind.replace('element",{"_index":225,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["kinds",{"_index":540,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["kindtolengthobservables",{"_index":606,"title":{},"body":{"injectables/PileService.html":{}}}],["kindtolengthsubjects",{"_index":607,"title":{},"body":{"injectables/PileService.html":{}}}],["kindtopile",{"_index":608,"title":{},"body":{"injectables/PileService.html":{}}}],["leaving",{"_index":915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":152,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["length",{"_index":214,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["lengthobservable",{"_index":210,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["lengthobservable.subscribe((length",{"_index":212,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["lengthsubject",{"_index":668,"title":{},"body":{"injectables/PileService.html":{}}}],["lengthsubject.asobservable().pipe(distinctuntilchanged",{"_index":685,"title":{},"body":{"injectables/PileService.html":{}}}],["lengthsubject.next(pile.length",{"_index":670,"title":{},"body":{"injectables/PileService.html":{}}}],["level",{"_index":419,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["liability",{"_index":889,"title":{},"body":{"license.html":{}}}],["liable",{"_index":886,"title":{},"body":{"license.html":{}}}],["license",{"_index":833,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":44,"title":{},"body":{"classes/Animal.html":{}}}],["limitation",{"_index":852,"title":{},"body":{"license.html":{}}}],["limited",{"_index":877,"title":{},"body":{"license.html":{}}}],["line",{"_index":240,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["list",{"_index":92,"title":{},"body":{"classes/Animal.html":{}}}],["local",{"_index":455,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["lodash",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":169,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["made",{"_index":648,"title":{},"body":{"injectables/PileService.html":{}}}],["maintain",{"_index":407,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["make",{"_index":660,"title":{},"body":{"injectables/PileService.html":{}}}],["making",{"_index":408,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["mammalanimal",{"_index":78,"title":{},"body":{"classes/Animal.html":{},"injectables/GameManagementService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["managed",{"_index":279,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["management.service",{"_index":195,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["management.service.ts",{"_index":252,"title":{},"body":{"injectables/GameManagementService.html":{},"coverage.html":{}}}],["management.service.ts:11",{"_index":254,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["management.service.ts:14",{"_index":255,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["manages",{"_index":655,"title":{},"body":{"injectables/PileService.html":{}}}],["many",{"_index":580,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["map",{"_index":82,"title":{},"body":{"classes/Animal.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"miscellaneous/variables.html":{}}}],["map((gamestate",{"_index":495,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["matbutton",{"_index":164,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["matching",{"_index":119,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mattooltip",{"_index":165,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["meatelement",{"_index":87,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["member",{"_index":563,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["merchantability",{"_index":879,"title":{},"body":{"license.html":{}}}],["merge",{"_index":855,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["method",{"_index":413,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{}}}],["miscellaneous",{"_index":746,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":834,"title":{},"body":{"license.html":{}}}],["model/faction.model",{"_index":378,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["model/game",{"_index":263,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["model/piece.model",{"_index":652,"title":{},"body":{"injectables/PileService.html":{}}}],["model/pile.model",{"_index":379,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["modify",{"_index":854,"title":{},"body":{"license.html":{}}}],["modules",{"_index":898,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":451,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"index.html":{}}}],["name",{"_index":25,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/Player.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["navigate",{"_index":795,"title":{},"body":{"index.html":{}}}],["need",{"_index":820,"title":{},"body":{"index.html":{}}}],["needed",{"_index":536,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["new",{"_index":40,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newstate",{"_index":322,"title":{},"body":{"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["newstate.kind",{"_index":506,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["ng",{"_index":792,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":882,"title":{},"body":{"license.html":{}}}],["notice",{"_index":869,"title":{},"body":{"license.html":{}}}],["null",{"_index":481,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["number",{"_index":191,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"interfaces/GameStatePatch.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["object",{"_index":278,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["object.keys(this._state.inventory).reduce",{"_index":585,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["object1",{"_index":779,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object2",{"_index":777,"title":{},"body":{"miscellaneous/functions.html":{}}}],["objects",{"_index":288,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateStoreService.html":{},"miscellaneous/functions.html":{}}}],["observable",{"_index":216,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["observables",{"_index":421,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["obtaining",{"_index":846,"title":{},"body":{"license.html":{}}}],["of(undefined",{"_index":308,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["oldstate",{"_index":324,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["once",{"_index":646,"title":{},"body":{"injectables/PileService.html":{}}}],["one",{"_index":431,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["ones",{"_index":58,"title":{},"body":{"classes/Animal.html":{}}}],["operation",{"_index":311,"title":{},"body":{"interfaces/GameStatePatch.html":{}}}],["optional",{"_index":35,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["orchestrating",{"_index":338,"title":{},"body":{"injectables/GameStateService.html":{}}}],["others",{"_index":410,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["otherwise",{"_index":894,"title":{},"body":{"license.html":{}}}],["out",{"_index":829,"title":{},"body":{"index.html":{},"license.html":{}}}],["outside",{"_index":291,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["overview",{"_index":830,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrites",{"_index":438,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["owned",{"_index":9,"title":{},"body":{"classes/Animal.html":{}}}],["owner",{"_index":26,"title":{},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{}}}],["package",{"_index":725,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":832,"title":{},"body":{"index.html":{}}}],["param",{"_index":106,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":430,"title":{},"body":{"injectables/GameStateStoreService.html":{},"license.html":{}}}],["passed",{"_index":416,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["patch",{"_index":259,"title":{},"body":{"injectables/GameManagementService.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"dependencies.html":{}}}],["patch.model",{"_index":306,"title":{},"body":{"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{}}}],["patch.model.ts",{"_index":309,"title":{},"body":{"interfaces/GameStatePatch.html":{},"coverage.html":{}}}],["patch.service",{"_index":376,"title":{},"body":{"injectables/GameStateService.html":{}}}],["patch.service.ts",{"_index":313,"title":{},"body":{"injectables/GameStatePatchService.html":{},"coverage.html":{}}}],["patch.service.ts:13",{"_index":323,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["patch.service.ts:20",{"_index":320,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["permission",{"_index":840,"title":{},"body":{"license.html":{}}}],["permit",{"_index":862,"title":{},"body":{"license.html":{}}}],["person",{"_index":845,"title":{},"body":{"license.html":{}}}],["persons",{"_index":863,"title":{},"body":{"license.html":{}}}],["piece",{"_index":37,"title":{"interfaces/Piece.html":{}},"body":{"classes/Animal.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["piece.model",{"_index":575,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["piececount",{"_index":595,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["piecefactory",{"_index":530,"title":{},"body":{"interfaces/Piece.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/typealiases.html":{}}}],["pieces",{"_index":534,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["pieces.push(null",{"_index":601,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieces.push(this.piecefactory(kind",{"_index":600,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieceswithcount.length",{"_index":596,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pieceswithcount[math.floor(math.random",{"_index":597,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pile",{"_index":282,"title":{"classes/Pile.html":{}},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pile.kind",{"_index":673,"title":{},"body":{"injectables/PileService.html":{}}}],["pile.model",{"_index":285,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["pile.pull(count",{"_index":690,"title":{},"body":{"injectables/PileService.html":{}}}],["pile.put(pieces",{"_index":691,"title":{},"body":{"injectables/PileService.html":{}}}],["pile.setstate(pilestate",{"_index":666,"title":{},"body":{"injectables/PileService.html":{}}}],["piles",{"_index":634,"title":{},"body":{"injectables/PileService.html":{}}}],["piles.foreach((pile",{"_index":678,"title":{},"body":{"injectables/PileService.html":{}}}],["pileservice",{"_index":181,"title":{"injectables/PileService.html":{}},"body":{"components/DrawPoolGameComponent.html":{},"injectables/PileService.html":{},"coverage.html":{}}}],["pilestate",{"_index":283,"title":{"interfaces/PileState.html":{}},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["pilestates.foreach((pilestate",{"_index":664,"title":{},"body":{"injectables/PileService.html":{}}}],["pilesvc",{"_index":180,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["pipe",{"_index":541,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["places",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platform",{"_index":817,"title":{},"body":{"index.html":{}}}],["player",{"_index":10,"title":{"interfaces/Player.html":{}},"body":{"classes/Animal.html":{},"interfaces/FactionState.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["player.model",{"_index":247,"title":{},"body":{"interfaces/FactionState.html":{}}}],["pool",{"_index":149,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["portions",{"_index":872,"title":{},"body":{"license.html":{}}}],["pretty",{"_index":576,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["previous",{"_index":439,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["printed",{"_index":12,"title":{},"body":{"classes/Animal.html":{}}}],["private",{"_index":172,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["progress",{"_index":360,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["project",{"_index":783,"title":{},"body":{"index.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"properties.html":{}}}],["provideanimationsasync('noop",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":873,"title":{},"body":{"license.html":{}}}],["providedin",{"_index":265,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["providerouter(routes",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provides",{"_index":334,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["providezonechangedetection",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":18,"title":{},"body":{"classes/Animal.html":{}}}],["publish",{"_index":856,"title":{},"body":{"license.html":{}}}],["pull",{"_index":545,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{}}}],["pull(count",{"_index":558,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["pull(kind",{"_index":622,"title":{},"body":{"injectables/PileService.html":{}}}],["pulled",{"_index":628,"title":{},"body":{"injectables/PileService.html":{}}}],["pulls",{"_index":624,"title":{},"body":{"injectables/PileService.html":{}}}],["purpose",{"_index":881,"title":{},"body":{"license.html":{}}}],["put",{"_index":546,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{}}}],["put(kind",{"_index":629,"title":{},"body":{"injectables/PileService.html":{}}}],["put(pieces",{"_index":564,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["puts",{"_index":631,"title":{},"body":{"injectables/PileService.html":{}}}],["random",{"_index":533,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["readonly",{"_index":544,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["ready",{"_index":515,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["received",{"_index":443,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["record",{"_index":582,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["reference",{"_index":831,"title":{},"body":{"index.html":{}}}],["regardless",{"_index":429,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["register",{"_index":613,"title":{},"body":{"injectables/PileService.html":{}}}],["register(piles",{"_index":632,"title":{},"body":{"injectables/PileService.html":{}}}],["registered",{"_index":636,"title":{},"body":{"injectables/PileService.html":{}}}],["registeredpilekinds",{"_index":609,"title":{},"body":{"injectables/PileService.html":{}}}],["registeredpiles",{"_index":610,"title":{},"body":{"injectables/PileService.html":{}}}],["registeredpiles.has(dspiecekind.element",{"_index":208,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["registeredpilessubject",{"_index":611,"title":{},"body":{"injectables/PileService.html":{}}}],["registeredpilessubscription",{"_index":205,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["registeredpilessubscription.unsubscribe",{"_index":218,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["related",{"_index":339,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileService.html":{}}}],["reload",{"_index":799,"title":{},"body":{"index.html":{}}}],["remove",{"_index":52,"title":{},"body":{"classes/Animal.html":{}}}],["removeelement",{"_index":22,"title":{},"body":{"classes/Animal.html":{}}}],["removeelement(element",{"_index":49,"title":{},"body":{"classes/Animal.html":{}}}],["removes",{"_index":51,"title":{},"body":{"classes/Animal.html":{}}}],["representing",{"_index":295,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{}}}],["represents",{"_index":8,"title":{},"body":{"classes/Animal.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["reptileanimal",{"_index":79,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":364,"title":{},"body":{"injectables/GameStateService.html":{}}}],["requiretransaction",{"_index":344,"title":{},"body":{"injectables/GameStateService.html":{}}}],["respective",{"_index":639,"title":{},"body":{"injectables/PileService.html":{}}}],["responsible",{"_index":406,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["rest",{"_index":335,"title":{},"body":{"injectables/GameStateService.html":{}}}],["restriction",{"_index":851,"title":{},"body":{"license.html":{}}}],["results",{"_index":118,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":93,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["returned",{"_index":560,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["returns",{"_index":47,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":853,"title":{},"body":{"license.html":{}}}],["rollback",{"_index":524,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["rollbacktransaction",{"_index":345,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["root",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["root'},{'name",{"_index":157,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["routeroutlet",{"_index":134,"title":{},"body":{"components/AppComponent.html":{}}}],["run",{"_index":791,"title":{},"body":{"index.html":{}}}],["running",{"_index":810,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":203,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{},"dependencies.html":{}}}],["scaffolding",{"_index":803,"title":{},"body":{"index.html":{}}}],["seedelement",{"_index":85,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["selected",{"_index":556,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["selector",{"_index":128,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["selector(gamestate",{"_index":496,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["sell",{"_index":860,"title":{},"body":{"license.html":{}}}],["sendgsptobackend",{"_index":299,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["sendgsptobackend(gsp",{"_index":301,"title":{},"body":{"injectables/GameStateClientService.html":{}}}],["serve",{"_index":793,"title":{},"body":{"index.html":{}}}],["server",{"_index":790,"title":{},"body":{"index.html":{}}}],["services",{"_index":340,"title":{},"body":{"injectables/GameStateService.html":{}}}],["set",{"_index":452,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["setfaction",{"_index":346,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setfaction(newstate",{"_index":366,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setgamestate",{"_index":435,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["setgamestate(newstate",{"_index":475,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["setpile",{"_index":347,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setpile(newstate",{"_index":368,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["setstate",{"_index":547,"title":{},"body":{"classes/Pile.html":{}}}],["setstate(newstate",{"_index":566,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["settransactionstateelement",{"_index":462,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["settransactionstateelement(key",{"_index":478,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["several",{"_index":417,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["shall",{"_index":870,"title":{},"body":{"license.html":{}}}],["simple",{"_index":577,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["software",{"_index":848,"title":{},"body":{"license.html":{}}}],["someone",{"_index":423,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"index.html":{}}}],["species",{"_index":144,"title":{},"body":{"components/AppComponent.html":{}}}],["species.constants",{"_index":201,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{}}}],["species.constants.ts",{"_index":720,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["species_amphibian",{"_index":761,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_arachnid",{"_index":763,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_bird",{"_index":765,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_insect",{"_index":767,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_mammal",{"_index":769,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["species_reptile",{"_index":771,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesamphibian",{"_index":762,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesarachnid",{"_index":764,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesbird",{"_index":766,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesinsect",{"_index":768,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesmammal",{"_index":770,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["speciesreptile",{"_index":772,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["specified",{"_index":625,"title":{},"body":{"injectables/PileService.html":{}}}],["src/.../animal.model.ts",{"_index":903,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dominant",{"_index":748,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../piece.model.ts",{"_index":775,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../util.ts",{"_index":774,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.component.ts",{"_index":126,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:13",{"_index":145,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":698,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/engine/model/faction.model.ts",{"_index":244,"title":{},"body":{"interfaces/FactionState.html":{},"coverage.html":{}}}],["src/app/engine/model/game",{"_index":275,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"coverage.html":{}}}],["src/app/engine/model/piece.model.ts",{"_index":529,"title":{},"body":{"interfaces/Piece.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/engine/model/pile.model.ts",{"_index":532,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["src/app/engine/model/pile.model.ts:22",{"_index":557,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:23",{"_index":548,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:39",{"_index":569,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:46",{"_index":572,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:50",{"_index":573,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:54",{"_index":567,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:63",{"_index":559,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/pile.model.ts:87",{"_index":565,"title":{},"body":{"classes/Pile.html":{}}}],["src/app/engine/model/player.model.ts",{"_index":692,"title":{},"body":{"interfaces/Player.html":{},"coverage.html":{}}}],["src/app/engine/service/game",{"_index":251,"title":{},"body":{"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["src/app/engine/service/pile.service.ts",{"_index":605,"title":{},"body":{"injectables/PileService.html":{},"coverage.html":{}}}],["src/app/engine/service/pile.service.ts:112",{"_index":630,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:18",{"_index":641,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:19",{"_index":642,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:20",{"_index":651,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:21",{"_index":640,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:29",{"_index":644,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:33",{"_index":616,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:39",{"_index":621,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:49",{"_index":618,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:58",{"_index":635,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:65",{"_index":620,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:74",{"_index":633,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/service/pile.service.ts:99",{"_index":623,"title":{},"body":{"injectables/PileService.html":{}}}],["src/app/engine/util.ts",{"_index":714,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/game/component/draw",{"_index":162,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"coverage.html":{}}}],["src/app/game/dominant",{"_index":719,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app/game/model/animal.model.ts",{"_index":6,"title":{},"body":{"classes/Animal.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/game/model/animal.model.ts:32",{"_index":31,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:42",{"_index":54,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:46",{"_index":60,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:54",{"_index":62,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:59",{"_index":66,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:68",{"_index":38,"title":{},"body":{"classes/Animal.html":{}}}],["src/app/game/model/animal.model.ts:81",{"_index":50,"title":{},"body":{"classes/Animal.html":{}}}],["standalone",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["start",{"_index":238,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["started",{"_index":400,"title":{"index.html":{},"license.html":{}},"body":{"injectables/GameStateService.html":{}}}],["starttransaction",{"_index":348,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["startturn",{"_index":175,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["state",{"_index":19,"title":{},"body":{"classes/Animal.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"coverage.html":{}}}],["state.model",{"_index":248,"title":{},"body":{"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["state.model.ts",{"_index":276,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"coverage.html":{}}}],["state.service",{"_index":198,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/PileService.html":{}}}],["state.service.ts",{"_index":333,"title":{},"body":{"injectables/GameStateService.html":{},"coverage.html":{}}}],["state.service.ts:18",{"_index":352,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:29",{"_index":354,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:38",{"_index":357,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:42",{"_index":370,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:46",{"_index":355,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:61",{"_index":365,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:68",{"_index":358,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:74",{"_index":372,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:78",{"_index":367,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:82",{"_index":374,"title":{},"body":{"injectables/GameStateService.html":{}}}],["state.service.ts:86",{"_index":369,"title":{},"body":{"injectables/GameStateService.html":{}}}],["statements",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store.service",{"_index":375,"title":{},"body":{"injectables/GameStateService.html":{}}}],["store.service.ts",{"_index":405,"title":{},"body":{"injectables/GameStateStoreService.html":{},"coverage.html":{}}}],["store.service.ts:101",{"_index":480,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:109",{"_index":467,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:118",{"_index":473,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:128",{"_index":489,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:132",{"_index":474,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:136",{"_index":490,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:140",{"_index":477,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:31",{"_index":482,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:32",{"_index":483,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:33",{"_index":464,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:39",{"_index":469,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:48",{"_index":479,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:62",{"_index":486,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:70",{"_index":488,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:78",{"_index":466,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:83",{"_index":472,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["store.service.ts:91",{"_index":476,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["stored",{"_index":807,"title":{},"body":{"index.html":{}}}],["string",{"_index":64,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":138,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["subject",{"_index":865,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":858,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":209,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["subscriber",{"_index":647,"title":{},"body":{"injectables/PileService.html":{}}}],["subscribers",{"_index":520,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["substantial",{"_index":871,"title":{},"body":{"license.html":{}}}],["substatearray",{"_index":501,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray.findindex((item",{"_index":504,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray.push(newstate",{"_index":508,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["substatearray[index",{"_index":507,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["such",{"_index":453,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["suffix",{"_index":100,"title":{},"body":{"classes/Animal.html":{}}}],["sum",{"_index":586,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["sunelement",{"_index":88,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":336,"title":{},"body":{"injectables/GameStateService.html":{}}}],["t",{"_index":470,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["table",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":447,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["takes",{"_index":436,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["template",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["templateurl",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["test",{"_index":813,"title":{},"body":{"index.html":{}}}],["test1",{"_index":270,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["test2",{"_index":272,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["tester1",{"_index":271,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["tester2",{"_index":273,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["testing",{"_index":823,"title":{},"body":{"index.html":{}}}],["tests",{"_index":812,"title":{},"body":{"index.html":{}}}],["this._gamestate",{"_index":509,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(deepclone(this._gamestate",{"_index":523,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(gamestate",{"_index":513,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(newstate",{"_index":517,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._setgamestate(this._transactionstate",{"_index":518,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._state",{"_index":583,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[key",{"_index":587,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[kind",{"_index":599,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.inventory[piece.kind",{"_index":604,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._state.kind",{"_index":589,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this._transactionstate",{"_index":498,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this._transactionstate[key",{"_index":502,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.applygsp(gsp",{"_index":382,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.drawpoollength",{"_index":213,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.elements.length",{"_index":111,"title":{},"body":{"classes/Animal.html":{}}}],["this.emitlength(pile",{"_index":667,"title":{},"body":{"injectables/PileService.html":{}}}],["this.formatelementname(item[0].kind",{"_index":231,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamemanagementsvc.creategame",{"_index":220,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamestateclient.gsp$.pipe(filter((gsp",{"_index":380,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestateclient.sendgsptobackend(gsp",{"_index":397,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestateservice.initializegamestate(gamestate",{"_index":274,"title":{},"body":{"injectables/GameManagementService.html":{}}}],["this.gamestatestore.committransaction",{"_index":396,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.faction",{"_index":401,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.gamestate",{"_index":383,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.initializegamestate(gamestate",{"_index":389,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.pile",{"_index":403,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.rollbacktransaction",{"_index":398,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setfaction(newstate",{"_index":402,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setgamestate(updatedstate",{"_index":386,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.setpile(newstate",{"_index":404,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.starttransaction",{"_index":390,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatestore.transactionstate",{"_index":392,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gamestatesubject",{"_index":491,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesubject.asobservable().pipe",{"_index":493,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesubject.next(this.gamestate",{"_index":512,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.gamestatesvc.committransaction",{"_index":237,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.gamestatesvc.pile$.subscribe((pilestates",{"_index":663,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gamestatesvc.requiretransaction",{"_index":688,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gamestatesvc.setpile(pile.state",{"_index":675,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gamestatesvc.starttransaction",{"_index":223,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.getobservableforkey((gamestate",{"_index":525,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.getpile(kind",{"_index":689,"title":{},"body":{"injectables/PileService.html":{}}}],["this.getpile(pilestate.kind",{"_index":665,"title":{},"body":{"injectables/PileService.html":{}}}],["this.gspservice.apply(this.gamestatestore.gamestate",{"_index":385,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.gspservice.create",{"_index":395,"title":{},"body":{"injectables/GameStateService.html":{}}}],["this.initialize",{"_index":204,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/PileService.html":{}}}],["this.kind.replace('animal",{"_index":102,"title":{},"body":{"classes/Animal.html":{}}}],["this.kindtolengthobservables.set",{"_index":684,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtolengthsubjects.get(pile.kind",{"_index":669,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtolengthsubjects.set(pile.kind",{"_index":683,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtopile.get(kind",{"_index":676,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtopile.set(pile.kind",{"_index":680,"title":{},"body":{"injectables/PileService.html":{}}}],["this.kindtopile.values",{"_index":674,"title":{},"body":{"injectables/PileService.html":{}}}],["this.log.push('pile",{"_index":234,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.log.push(`you",{"_index":232,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.name",{"_index":117,"title":{},"body":{"classes/Animal.html":{}}}],["this.piececounts.get(key",{"_index":590,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.piecefactory",{"_index":584,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["this.pilesvc.kindtolengthobservables.get(dspiecekind.element",{"_index":211,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.pilesvc.pull(dspiecekind.element",{"_index":229,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.pilesvc.registeredpiles$.pipe",{"_index":206,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["this.registeredpilekinds.add(pile.kind",{"_index":681,"title":{},"body":{"injectables/PileService.html":{}}}],["this.registeredpilekinds.has(pile.kind",{"_index":679,"title":{},"body":{"injectables/PileService.html":{}}}],["this.registeredpilessubject.asobservable",{"_index":643,"title":{},"body":{"injectables/PileService.html":{}}}],["this.registeredpilessubject.next(this.registeredpilekinds",{"_index":686,"title":{},"body":{"injectables/PileService.html":{}}}],["this.settransactionstateelement('faction",{"_index":526,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.settransactionstateelement('pile",{"_index":528,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["this.state",{"_index":91,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.addedelements",{"_index":95,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.addedelements.splice(elementindex",{"_index":116,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.inherentelements",{"_index":94,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.kind",{"_index":96,"title":{},"body":{"classes/Animal.html":{}}}],["this.state.owner",{"_index":105,"title":{},"body":{"classes/Animal.html":{}}}],["this.updategamestate",{"_index":687,"title":{},"body":{"injectables/PileService.html":{}}}],["those",{"_index":422,"title":{},"body":{"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["throw",{"_index":108,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"injectables/PileService.html":{}}}],["throws",{"_index":107,"title":{},"body":{"classes/Animal.html":{}}}],["timestamp",{"_index":310,"title":{},"body":{"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{}}}],["title",{"_index":140,"title":{},"body":{"components/AppComponent.html":{}}}],["top",{"_index":418,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["tort",{"_index":893,"title":{},"body":{"license.html":{}}}],["total",{"_index":570,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["tpiece",{"_index":539,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["track",{"_index":241,"title":{},"body":{"components/DrawPoolGameComponent.html":{}}}],["tracks",{"_index":579,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["transaction",{"_index":359,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{}}}],["transactionstate",{"_index":463,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["tree",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{}}}],["true",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"miscellaneous/variables.html":{}}}],["tsc",{"_index":592,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["tslib",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":222,"title":{},"body":{"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{}}}],["two",{"_index":432,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":34,"title":{},"body":{"classes/Animal.html":{},"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"interfaces/FactionState.html":{},"injectables/GameManagementService.html":{},"interfaces/GameState.html":{},"injectables/GameStateClientService.html":{},"interfaces/GameStateElement.html":{},"interfaces/GameStatePatch.html":{},"injectables/GameStatePatchService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"interfaces/Piece.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"interfaces/Player.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":901,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":503,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["typically",{"_index":442,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["undefined",{"_index":331,"title":{},"body":{"injectables/GameStatePatchService.html":{}}}],["undefined)).subscribe((gsp",{"_index":381,"title":{},"body":{"injectables/GameStateService.html":{}}}],["uninitialized",{"_index":388,"title":{},"body":{"injectables/GameStateService.html":{}}}],["unit",{"_index":811,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":594,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["until",{"_index":412,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["update",{"_index":522,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["updated",{"_index":428,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["updatedstate",{"_index":384,"title":{},"body":{"injectables/GameStateService.html":{}}}],["updategamestate",{"_index":614,"title":{},"body":{"injectables/PileService.html":{}}}],["updates",{"_index":363,"title":{},"body":{"injectables/GameStateService.html":{},"injectables/PileService.html":{}}}],["updating",{"_index":500,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["use",{"_index":554,"title":{},"body":{"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":411,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/functions.html":{}}}],["using",{"_index":656,"title":{},"body":{"injectables/PileService.html":{}}}],["validate",{"_index":658,"title":{},"body":{"injectables/PileService.html":{}}}],["validated",{"_index":659,"title":{},"body":{"injectables/PileService.html":{}}}],["value",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":441,"title":{},"body":{"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["var",{"_index":155,"title":{},"body":{"components/AppComponent.html":{},"components/DrawPoolGameComponent.html":{},"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["variable",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":904,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":290,"title":{},"body":{"interfaces/GameState.html":{},"interfaces/GameStateElement.html":{},"injectables/GameStateService.html":{}}}],["vars",{"_index":535,"title":{},"body":{"classes/Pile.html":{},"interfaces/PileState.html":{}}}],["version",{"_index":787,"title":{},"body":{"index.html":{},"properties.html":{}}}],["via",{"_index":434,"title":{},"body":{"injectables/GameStateStoreService.html":{},"index.html":{}}}],["void",{"_index":48,"title":{},"body":{"classes/Animal.html":{},"components/DrawPoolGameComponent.html":{},"injectables/GameManagementService.html":{},"injectables/GameStateClientService.html":{},"injectables/GameStateService.html":{},"injectables/GameStateStoreService.html":{},"classes/Pile.html":{},"injectables/PileService.html":{},"interfaces/PileState.html":{}}}],["warranties",{"_index":878,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":874,"title":{},"body":{"license.html":{}}}],["waterelement",{"_index":83,"title":{},"body":{"classes/Animal.html":{},"miscellaneous/variables.html":{}}}],["ways",{"_index":433,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["whenever",{"_index":427,"title":{},"body":{"injectables/GameStateStoreService.html":{}}}],["whether",{"_index":890,"title":{},"body":{"license.html":{}}}],["within",{"_index":654,"title":{},"body":{"injectables/PileService.html":{}}}],["without",{"_index":98,"title":{},"body":{"classes/Animal.html":{},"license.html":{}}}],["zone.js",{"_index":744,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Animal.html":{"url":"classes/Animal.html","title":"class - Animal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Animal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/game/model/animal.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an animal owned by a player with inherent (printed on the card) and added elements.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addElement\n                            \n                            \n                                removeElement\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elements\n                                \n                                \n                                    kind\n                                \n                                \n                                    name\n                                \n                                \n                                    owner\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: AnimalState)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/model/animal.model.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        AnimalState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnimalState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/game/model/animal.model.ts:32\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addElement\n                        \n                    \n                \n            \n            \n                \naddElement(element: Piece)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/model/animal.model.ts:68\n                        \n                    \n\n\n            \n                \n                        Adds a new element to the animal, ensuring it does not exceed the limit of 6 elements.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            Piece\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to add.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeElement\n                        \n                    \n                \n            \n            \n                \nremoveElement(element: Piece)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/model/animal.model.ts:81\n                        \n                    \n\n\n            \n                \n                        Removes an added element from the animal.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            Piece\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to remove.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elements\n                    \n                \n\n                \n                    \n                        getelements()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:42\n                                \n                            \n                    \n                        \n                                Gets all elements of the animal, including both inherent and added ones.\n\n\n                                \n                                \n                                \n                                    Returns :         Piece[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        kind\n                    \n                \n\n                \n                    \n                        getkind()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:46\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:54\n                                \n                            \n                    \n                        \n                                Gets the name of the animal, based on its kind.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        owner\n                    \n                \n\n                \n                    \n                        getowner()\n                    \n                \n                            \n                                \n                                    Defined in src/app/game/model/animal.model.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Player } from '../../engine/model/player.model';\nimport { FactionState } from '../../engine/model/faction.model';\nimport { Piece } from '../../engine/model/piece.model';\n\nexport type AnimalKind =\n  | 'amphibianAnimal'\n  | 'arachnidAnimal'\n  | 'birdAnimal'\n  | 'insectAnimal'\n  | 'mammalAnimal'\n  | 'reptileAnimal';\n\nexport const inherentElementKindByAnimalKind = new Map([\n  ['amphibianAnimal', 'waterElement'],\n  ['arachnidAnimal', 'grubElement'],\n  ['birdAnimal', 'seedElement'],\n  ['insectAnimal', 'grassElement'],\n  ['mammalAnimal', 'meatElement'],\n  ['reptileAnimal', 'sunElement'],\n] as const);\n\nexport type AnimalState = FactionState & {\n  kind: AnimalKind;\n  inherentElements: Piece[];\n  addedElements: Piece[];\n};\n\n/**\n * Represents an animal owned by a player with inherent (printed on the card) and added elements.\n */\nexport class Animal {\n  public state: AnimalState;\n\n  constructor(state: AnimalState) {\n    this.state = state;\n  }\n\n  /**\n   * Gets all elements of the animal, including both inherent and added ones.\n   * @returns A list of all elements.\n   */\n  get elements(): Piece[] {\n    return [...this.state.inherentElements, ...this.state.addedElements];\n  }\n\n  get kind(): AnimalKind {\n    return this.state.kind;\n  }\n\n  /**\n   * Gets the name of the animal, based on its kind.\n   * @returns The capitalized name of the animal without the \"AnimalModel\" suffix.\n   */\n  get name(): string {\n    const animalName = this.kind.replace('Animal', '');\n    return animalName.charAt(0).toUpperCase() + animalName.slice(1);\n  }\n\n  get owner(): Player {\n    return this.state.owner;\n  }\n\n  /**\n   * Adds a new element to the animal, ensuring it does not exceed the limit of 6 elements.\n   * @param element The element to add.\n   * @throws Will throw an error if the animal already has 6 elements.\n   */\n  addElement(element: Piece): void {\n    if (this.elements.length  addedElement.kind === element.kind,\n    );\n    if (elementIndex !== -1) {\n      this.state.addedElements.splice(elementIndex, 1);\n    } else {\n      throw new Error(\n        `${this.name} does not have element kind ${element.kind} as an added element.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                DrawPoolGameComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'dominant-species'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { DrawPoolGameComponent } from './game/component/draw-pool-game/draw-pool-game.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, DrawPoolGameComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'dominant-species';\n}\n\n    \n\n    \n        \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DrawPoolGameComponent', 'selector': 'app-draw-pool-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DrawPoolGameComponent.html":{"url":"components/DrawPoolGameComponent.html","title":"component - DrawPoolGameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DrawPoolGameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/component/draw-pool-game/draw-pool-game.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-draw-pool-game\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatButton\n                            MatTooltip\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./draw-pool-game.component.html\n            \n\n\n\n            \n                styleUrl\n                ./draw-pool-game.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                drawPoolLength\n                            \n                            \n                                log\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createGame\n                            \n                            \n                                draw\n                            \n                            \n                                endTurn\n                            \n                            \n                                    Private\n                                formatElementName\n                            \n                            \n                                    Private\n                                initialize\n                            \n                            \n                                startTurn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gameManagementSvc: GameManagementService, gameStateSvc: GameStateService, pileSvc: PileService)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameManagementSvc\n                                                  \n                                                        \n                                                                        GameManagementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gameStateSvc\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pileSvc\n                                                  \n                                                        \n                                                                        PileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createGame\n                        \n                    \n                \n            \n            \n                \ncreateGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        draw\n                        \n                    \n                \n            \n            \n                \ndraw()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:60\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endTurn\n                        \n                    \n                \n            \n            \n                \nendTurn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatElementName\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatElementName(kind: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTurn\n                        \n                    \n                \n            \n            \n                \nstartTurn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        drawPoolLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/game/component/draw-pool-game/draw-pool-game.component.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { GameManagementService } from '../../../engine/service/game-management.service';\nimport { MatButton } from '@angular/material/button';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { GameStateService } from '../../../engine/service/game-state.service';\nimport {PileService} from \"../../../engine/service/pile.service\";\nimport {dsPieceKind} from \"../../dominant-species.constants\";\nimport {filter} from \"rxjs\";\n\n@Component({\n  selector: 'app-draw-pool-game',\n  standalone: true,\n  imports: [MatButton, MatTooltip],\n  templateUrl: './draw-pool-game.component.html',\n  styleUrl: './draw-pool-game.component.scss',\n})\nexport class DrawPoolGameComponent {\n  drawPoolLength = 0;\n  log: string[] = [];\n  constructor(\n    private gameManagementSvc: GameManagementService,\n    private gameStateSvc: GameStateService,\n    private pileSvc: PileService\n  ) {\n    this.initialize()\n  }\n\n  private initialize(): void {\n    const registeredPilesSubscription = this.pileSvc.registeredPiles$.pipe(\n      filter(registeredPiles => registeredPiles.has(dsPieceKind.ELEMENT))\n    ).subscribe(() => {\n      const lengthObservable = this.pileSvc.kindToLengthObservables.get(dsPieceKind.ELEMENT)\n      if (lengthObservable) {\n        lengthObservable.subscribe((length) => {\n          this.drawPoolLength = length\n        })\n      } else {\n        throw new Error('Length observable for not found')\n      }\n      registeredPilesSubscription.unsubscribe()\n    })\n  }\n\n  createGame(): void {\n    console.log('Create Game');\n    this.gameManagementSvc.createGame();\n  }\n\n  startTurn(): void {\n    console.log('Start Turn');\n    this.gameStateSvc.startTransaction();\n  }\n\n  private formatElementName(kind: string): string {\n      let elementName = kind.replace('Element', '');\n      return elementName.charAt(0).toUpperCase() + elementName.slice(1);\n  }\n\n\n  draw(): void {\n    const item = this.pileSvc.pull(dsPieceKind.ELEMENT);\n    if (item[0]) {\n      const element = this.formatElementName(item[0].kind)\n      this.log.push(`You drew a ${element}`);\n    } else {\n      this.log.push('Pile is empty!');\n    }\n  }\n\n  endTurn(): void {\n    console.log('End Turn');\n    this.gameStateSvc.commitTransaction();\n  }\n}\n\n    \n\n    \n        \n  \n    Initialize\n    Start Turn\n    Draw!\n    End Turn\n  \n  \n    Draw Pool: {{ drawPoolLength }}\n    \n      \n        @for (line of log; track $index) {\n          {{ line }}\n        }\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Initialize    Start Turn    Draw!    End Turn        Draw Pool: {{ drawPoolLength }}                  @for (line of log; track $index) {          {{ line }}        }            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DrawPoolGameComponent', 'selector': 'app-draw-pool-game'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DrawPoolGameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FactionState.html":{"url":"interfaces/FactionState.html","title":"interface - FactionState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FactionState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/faction.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            GameStateElement\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            owner\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        owner\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        owner:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Player } from './player.model';\nimport { GameStateElement } from './game-state.model';\n\nexport interface FactionState extends GameStateElement {\n  owner: Player;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameManagementService.html":{"url":"injectables/GameManagementService.html","title":"injectable - GameManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-management.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateService: GameStateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-management.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateService\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createGame\n                        \n                    \n                \n            \n            \n                \ncreateGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-management.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateService } from './game-state.service';\nimport { deepClone } from 'fast-json-patch';\nimport { baseGameState } from '../../game/dominant-species.constants';\nimport { GameState } from '../model/game-state.model';\nimport { Animal } from '../../game/model/animal.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameManagementService {\n  constructor(private gameStateService: GameStateService) {}\n\n  createGame(): void {\n    const gameState = deepClone(baseGameState) as GameState;\n    gameState.faction = [\n      {\n        owner: {\n          id: 'test1',\n          name: 'Tester1',\n        },\n        kind: 'birdAnimal',\n      } as Animal,\n      {\n        owner: {\n          id: 'test2',\n          name: 'Tester2',\n        },\n        kind: 'mammalAnimal',\n      } as Animal,\n    ];\n    this.gameStateService.initializeGameState(gameState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameState.html":{"url":"interfaces/GameState.html","title":"interface - GameState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining the GameState object managed by GameStateStoreService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            faction\n                                        \n                                \n                                \n                                        \n                                            pile\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        faction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        faction:         FactionState[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FactionState[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pile:         PileState[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PileState[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FactionState } from './faction.model';\nimport { PileState } from './pile.model';\n\n/**\n * Defining the GameState object managed by GameStateStoreService\n */\nexport interface GameState {\n  faction: FactionState[];\n  pile: PileState[];\n}\n\n/**\n * GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\n * An example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\n * This object defining the state would be of type GameStateElement.\n */\nexport interface GameStateElement {\n  kind: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateClientService.html":{"url":"injectables/GameStateClientService.html","title":"injectable - GameStateClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendGspToBackend\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gsp$\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendGspToBackend\n                        \n                    \n                \n            \n            \n                \nsendGspToBackend(gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-client.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gsp$\n                    \n                \n\n                \n                    \n                        getgsp$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-client.service.ts:13\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { of, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateClientService {\n  sendGspToBackend(gsp: GameStatePatch): void {\n    console.log(JSON.stringify(gsp));\n  }\n\n  get gsp$(): Observable {\n    return of(undefined);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameStateElement.html":{"url":"interfaces/GameStateElement.html","title":"interface - GameStateElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameStateElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state.model.ts\n        \n\n\n            \n                Description\n            \n            \n                GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\nAn example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\nThis object defining the state would be of type GameStateElement.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            kind\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        kind\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        kind:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FactionState } from './faction.model';\nimport { PileState } from './pile.model';\n\n/**\n * Defining the GameState object managed by GameStateStoreService\n */\nexport interface GameState {\n  faction: FactionState[];\n  pile: PileState[];\n}\n\n/**\n * GameStateElement defines the base type of state objects distributed to the various objects outside the GameStateStore.\n * An example would be each object representing a faction (e.g., animal) would have a state that defines that faction.\n * This object defining the state would be of type GameStateElement.\n */\nexport interface GameStateElement {\n  kind: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameStatePatch.html":{"url":"interfaces/GameStatePatch.html","title":"interface - GameStatePatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GameStatePatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/game-state-patch.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            patch\n                                        \n                                \n                                \n                                        \n                                            timeStamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        patch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        patch:     Operation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Operation[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeStamp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Operation } from 'fast-json-patch';\n\nexport interface GameStatePatch {\n  timeStamp: number;\n  patch: Operation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStatePatchService.html":{"url":"injectables/GameStatePatchService.html","title":"injectable - GameStatePatchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStatePatchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-patch.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Creates and applies GameStatePatches\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                apply\n                            \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        apply\n                        \n                    \n                \n            \n            \n                \napply(gameState: GameState, gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-patch.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gameState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GameState\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(oldState: GameState, newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-patch.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GameStatePatch\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameState } from '../model/game-state.model';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { applyPatch, compare } from 'fast-json-patch';\n\n/**\n * Creates and applies GameStatePatches\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStatePatchService {\n  create(oldState: GameState, newState: GameState): GameStatePatch {\n    return {\n      timeStamp: Date.now(),\n      patch: compare(oldState, newState),\n    };\n  }\n\n  apply(gameState: GameState, gsp: GameStatePatch): GameState {\n    return applyPatch(gameState, gsp.patch, undefined, false).newDocument;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateService.html":{"url":"injectables/GameStateService.html","title":"injectable - GameStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The GameStateService provides an interface for the rest of the system to interact with state.\nIt does this by orchestrating the various other GameState related services.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyGsp\n                            \n                            \n                                commitTransaction\n                            \n                            \n                                initializeGameState\n                            \n                            \n                                requireTransaction\n                            \n                            \n                                rollbackTransaction\n                            \n                            \n                                setFaction\n                            \n                            \n                                setPile\n                            \n                            \n                                startTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    faction$\n                                \n                                \n                                    pile$\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateStore: GameStateStoreService, gspService: GameStatePatchService, gameStateClient: GameStateClientService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-state.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateStore\n                                                  \n                                                        \n                                                                        GameStateStoreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gspService\n                                                  \n                                                        \n                                                                        GameStatePatchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gameStateClient\n                                                  \n                                                        \n                                                                        GameStateClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyGsp\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyGsp(gsp: GameStatePatch)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gsp\n                                            \n                                                            GameStatePatch\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \ncommitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializeGameState\n                        \n                    \n                \n            \n            \n                \ninitializeGameState(gameState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gameState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requireTransaction\n                        \n                    \n                \n            \n            \n                \nrequireTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Will throw error if there is not a transaction in progress. Call before state updates that require a transaction.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \nrollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFaction\n                        \n                    \n                \n            \n            \n                \nsetFaction(newState: FactionState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            FactionState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPile\n                        \n                    \n                \n            \n            \n                \nsetPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTransaction\n                        \n                    \n                \n            \n            \n                \nstartTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        faction$\n                    \n                \n\n                \n                    \n                        getfaction$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state.service.ts:74\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pile$\n                    \n                \n\n                \n                    \n                        getpile$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state.service.ts:82\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateStoreService } from './game-state-store.service';\nimport { GameStatePatchService } from './game-state-patch.service';\nimport { GameStateClientService } from './game-state-client.service';\nimport { filter, Observable } from 'rxjs';\nimport { FactionState } from '../model/faction.model';\nimport { PileState } from '../model/pile.model';\nimport { GameStatePatch } from '../model/game-state-patch.model';\nimport { GameState } from '../model/game-state.model';\n\n/**\n * The GameStateService provides an interface for the rest of the system to interact with state.\n * It does this by orchestrating the various other GameState related services.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateService {\n  constructor(\n    private gameStateStore: GameStateStoreService,\n    private gspService: GameStatePatchService,\n    private gameStateClient: GameStateClientService,\n  ) {\n    this.gameStateClient.gsp$.pipe(filter((gsp) => gsp != undefined)).subscribe((gsp) => {\n      this.applyGsp(gsp);\n    });\n  }\n\n  private applyGsp(gsp: GameStatePatch): void {\n    if (this.gameStateStore.gameState) {\n      const updatedState = this.gspService.apply(this.gameStateStore.gameState, gsp);\n      this.gameStateStore.setGameState(updatedState);\n    } else {\n      throw new Error(\"Can't apply a GSP to an uninitialized GameStateStore.\");\n    }\n  }\n\n  initializeGameState(gameState: GameState): void {\n    this.gameStateStore.initializeGameState(gameState);\n  }\n\n  startTransaction(): void {\n    this.gameStateStore.startTransaction();\n  }\n\n  commitTransaction(): void {\n    if (!this.gameStateStore.gameState) {\n      throw new Error('GameStateStore uninitialized');\n    } else if (!this.gameStateStore.transactionState) {\n      throw new Error('No transaction in progress to commit');\n    } else {\n      const gsp = this.gspService.create(\n        this.gameStateStore.gameState,\n        this.gameStateStore.transactionState,\n      );\n      this.gameStateStore.commitTransaction();\n      this.gameStateClient.sendGspToBackend(gsp);\n    }\n  }\n\n  rollbackTransaction(): void {\n    this.gameStateStore.rollbackTransaction();\n  }\n\n  /**\n   * Will throw error if there is not a transaction in progress. Call before state updates that require a transaction.\n   */\n  requireTransaction(): void {\n    if (!this.gameStateStore.transactionState) {\n      throw new Error('Transaction has not been started.');\n    }\n  }\n\n  get faction$(): Observable {\n    return this.gameStateStore.faction$;\n  }\n\n  setFaction(newState: FactionState): void {\n    this.gameStateStore.setFaction(newState);\n  }\n\n  get pile$(): Observable {\n    return this.gameStateStore.pile$;\n  }\n\n  setPile(newState: PileState): void {\n    this.gameStateStore.setPile(newState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameStateStoreService.html":{"url":"injectables/GameStateStoreService.html","title":"injectable - GameStateStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GameStateStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/game-state-store.service.ts\n        \n\n\n            \n                Description\n            \n            \n                GameStateStoreService is responsible for maintain the GameState and making it accessible to others.\nA GameStateStoreService cannot be used until the initializeGameState method is called an initial GameState is passed in.\nThe GameState has several top level keys, and GameStateStoreService provides observables for each of those keys.\nSo if someone was interested in the faction key, then they could subscribe to the faction$ observable.\nA value will be emitted on each observable whenever the GameState is updated, regardless of if the particular key has been updated.\nThe GameState can be updated in one of two ways:\n1.) Via the setGameState method which will takes an entire GameState object and overwrites the previous GameState object. All observables\nwill then emit the values from the new GameState object. This method is typically used when the GameState is updated based on a received GSP.\n2.) Via a transaction, which is typically done via actions taken during a turn. In this case, the startTransaction method is called and\nthe state is updated via calling one or more set methods (such as setFaction) and then calling commitTransaction or rollbackTransaction.\nIn Either case, all observables will then emit the values from the new GameState object. This is to ensure that all local objects have the\ncurrent GameState.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _gameState\n                            \n                            \n                                    Private\n                                _transactionState\n                            \n                            \n                                    Private\n                                gameStateSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _setGameState\n                            \n                            \n                                commitTransaction\n                            \n                            \n                                    Private\n                                getObservableForKey\n                            \n                            \n                                initializeGameState\n                            \n                            \n                                rollbackTransaction\n                            \n                            \n                                setFaction\n                            \n                            \n                                setGameState\n                            \n                            \n                                setPile\n                            \n                            \n                                    Private\n                                setTransactionStateElement\n                            \n                            \n                                startTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gameState\n                                \n                                \n                                    transactionState\n                                \n                                \n                                    faction$\n                                \n                                \n                                    pile$\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/game-state-store.service.ts:33\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _setGameState\n                        \n                    \n                \n            \n            \n                \n                        \n                    _setGameState(newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commitTransaction\n                        \n                    \n                \n            \n            \n                \ncommitTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getObservableForKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getObservableForKey(selector: (state: GameState) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:39\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializeGameState\n                        \n                    \n                \n            \n            \n                \ninitializeGameState(gameState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gameState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rollbackTransaction\n                        \n                    \n                \n            \n            \n                \nrollbackTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFaction\n                        \n                    \n                \n            \n            \n                \nsetFaction(newState: FactionState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            FactionState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGameState\n                        \n                    \n                \n            \n            \n                \nsetGameState(newState: GameState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            GameState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPile\n                        \n                    \n                \n            \n            \n                \nsetPile(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setTransactionStateElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    setTransactionStateElement(key, newState: GameStateElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newState\n                                            \n                                                            GameStateElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTransaction\n                        \n                    \n                \n            \n            \n                \nstartTransaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/game-state-store.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _gameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _transactionState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        gameStateSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/game-state-store.service.ts:33\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gameState\n                    \n                \n\n                \n                    \n                        getgameState()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:62\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        transactionState\n                    \n                \n\n                \n                    \n                        gettransactionState()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:70\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        faction$\n                    \n                \n\n                \n                    \n                        getfaction$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:128\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pile$\n                    \n                \n\n                \n                    \n                        getpile$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/service/game-state-store.service.ts:136\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PileState } from '../model/pile.model';\nimport { BehaviorSubject, filter, map, Observable } from 'rxjs';\nimport { FactionState } from '../model/faction.model';\nimport { GameState, GameStateElement } from '../model/game-state.model';\nimport { Injectable } from '@angular/core';\nimport { deepClone } from 'fast-json-patch';\n\n/**\n * GameStateStoreService is responsible for maintain the GameState and making it accessible to others.\n *\n * A GameStateStoreService cannot be used until the initializeGameState method is called an initial GameState is passed in.\n *\n * The GameState has several top level keys, and GameStateStoreService provides observables for each of those keys.\n * So if someone was interested in the faction key, then they could subscribe to the faction$ observable.\n * A value will be emitted on each observable whenever the GameState is updated, regardless of if the particular key has been updated.\n *\n * The GameState can be updated in one of two ways:\n *\n * 1.) Via the setGameState method which will takes an entire GameState object and overwrites the previous GameState object. All observables\n * will then emit the values from the new GameState object. This method is typically used when the GameState is updated based on a received GSP.\n *\n * 2.) Via a transaction, which is typically done via actions taken during a turn. In this case, the startTransaction method is called and\n * the state is updated via calling one or more set methods (such as setFaction) and then calling commitTransaction or rollbackTransaction.\n * In Either case, all observables will then emit the values from the new GameState object. This is to ensure that all local objects have the\n * current GameState.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameStateStoreService {\n  private _gameState: GameState | null = null;\n  private _transactionState: GameState | null = null;\n  private gameStateSubject: BehaviorSubject;\n\n  constructor() {\n    this.gameStateSubject = new BehaviorSubject(this._gameState);\n  }\n\n  private getObservableForKey(selector: (state: GameState) => T): Observable {\n    return this.gameStateSubject.asObservable().pipe(\n      filter((gameState) => gameState != null),\n      map((gameState) => {\n        return selector(gameState);\n      }),\n    );\n  }\n\n  private setTransactionStateElement(key: keyof GameState, newState: GameStateElement): void {\n    if (!this._transactionState) {\n      throw new Error('Must start transaction before updating GameState.');\n    }\n    const subStateArray = this._transactionState[key] as (typeof newState)[];\n    const index = subStateArray.findIndex((item) => item.kind === newState.kind);\n\n    if (index > -1) {\n      subStateArray[index] = newState;\n    } else {\n      subStateArray.push(newState);\n    }\n  }\n\n  get gameState(): GameState | null {\n    if (this._gameState) {\n      return deepClone(this._gameState) as GameState;\n    } else {\n      return null;\n    }\n  }\n\n  get transactionState(): GameState | null {\n    if (this._transactionState) {\n      return deepClone(this._transactionState) as GameState;\n    } else {\n      return null;\n    }\n  }\n\n  private _setGameState(newState: GameState) {\n    this._gameState = newState;\n    this.gameStateSubject.next(this.gameState);\n  }\n\n  initializeGameState(gameState: GameState): void {\n    if (!this._gameState) {\n      this._setGameState(gameState);\n    } else {\n      throw new Error('GameState all ready initialized.');\n    }\n  }\n\n  setGameState(newState: GameState) {\n    if (!this._gameState) {\n      throw new Error('GameState must be initialized before it can be set.');\n    } else if (this._transactionState) {\n      throw new Error('GameState can not be set during a transaction.');\n    } else {\n      this._setGameState(newState);\n    }\n  }\n\n  startTransaction(): void {\n    if (!this._transactionState) {\n      this._transactionState = deepClone(this._gameState) as GameState;\n    } else {\n      throw new Error(\"Can't start transaction as one already in progress.\");\n    }\n  }\n\n  commitTransaction(): void {\n    if (this._transactionState) {\n      this._setGameState(this._transactionState);\n      this._transactionState = null;\n    } else {\n      throw new Error('No transaction in progress to commit');\n    }\n  }\n\n  rollbackTransaction(): void {\n    if (this._transactionState) {\n      this._transactionState = null;\n      // Ensures gameState is a new object so that subscribers can detect the update\n      this._setGameState(deepClone(this._gameState) as GameState);\n    } else {\n      throw new Error('No transaction in progress to rollback');\n    }\n  }\n\n  get faction$(): Observable {\n    return this.getObservableForKey((gameState) => gameState.faction);\n  }\n\n  setFaction(newState: FactionState): void {\n    this.setTransactionStateElement('faction', newState);\n  }\n\n  get pile$(): Observable {\n    return this.getObservableForKey((gameState) => gameState.pile);\n  }\n\n  setPile(newState: PileState): void {\n    this.setTransactionStateElement('pile', newState);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Piece.html":{"url":"interfaces/Piece.html","title":"interface - Piece","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Piece\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/piece.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            kind\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        kind\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        kind:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Piece {\n  kind: string;\n}\n\nexport type PieceFactory = (kind: string) => Piece;\n\nexport function defaultPieceFactory(kind: string): Piece {\n  return { kind: kind };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Pile.html":{"url":"classes/Pile.html","title":"class - Pile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Pile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/pile.model.ts\n        \n\n\n            \n                Description\n            \n            \n                A Pile is used to draw one or more random pieces for a defined pool of pieces.\nA Pile has two Type Vars needed to be set when it's instantiated:\nTpiece Kind A type var used to set the kinds of Pieces the Pipe can contain and\nTpiece A type var used to set the type of Piece the Pile creates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _state\n                            \n                            \n                                    Private\n                                    Readonly\n                                pieceFactory\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                pull\n                            \n                            \n                                put\n                            \n                            \n                                setState\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                                \n                                    state\n                                \n                                \n                                    kind\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: PileState, pieceFactory: PieceFactory)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/model/pile.model.ts:23\n                            \n                        \n\n                \n                    \n                            Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\nthe pile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        PileState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An object that acts as the definition for the pool of pieces the Pile represents.\nEach key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\nthe pile.\n\n                                                        \n                                                \n                                                \n                                                        pieceFactory\n                                                  \n                                                        \n                                                                        PieceFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A factory function use to build the random selected piece.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PileState\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        pieceFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PieceFactory\n\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/model/pile.model.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        pull\n                        \n                    \n                \n            \n            \n                \npull(count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:63\n                        \n                    \n\n\n            \n                \n                        will be returned for any piece drawn while the pile is empty.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                            \n                                                    The number of pieces to draw from the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     []\n\n                        \n                            \n                                An array where each member represents the piece that was drawn. A null\nwill be returned for any piece drawn while the pile is empty.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(pieces: Piece[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pieces\n                                            \n                                                            Piece[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An array of pieces to add to the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setState\n                        \n                    \n                \n            \n            \n                \nsetState(newState: PileState)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/model/pile.model.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newState\n                                            \n                                                            PileState\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:39\n                                \n                            \n                    \n                        \n                                Returns the total number of pieces in the pile.\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:46\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        kind\n                    \n                \n\n                \n                    \n                        getkind()\n                    \n                \n                            \n                                \n                                    Defined in src/app/engine/model/pile.model.ts:50\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { defaultPieceFactory, Piece, PieceFactory } from './piece.model';\nimport { GameStateElement } from './game-state.model';\nimport { deepClone } from 'fast-json-patch';\n\n/**\n * PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n */\nexport interface PileState extends GameStateElement {\n  inventory: Record;\n}\n\n/**\n * A Pile is used to draw one or more random pieces for a defined pool of pieces.\n * A Pile has two Type Vars needed to be set when it's instantiated:\n *\n * **Tpiece** Kind A type var used to set the kinds of Pieces the Pipe can contain and\n *\n * **Tpiece** A type var used to set the type of Piece the Pile creates\n *\n */\nexport class Pile {\n  private readonly pieceFactory: PieceFactory;\n  private _state: PileState;\n\n  /**\n   * @param state An object that acts as the definition for the pool of pieces the Pile represents.\n   * Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\n   * the pile.\n   * @param pieceFactory A factory function use to build the random selected piece.\n   */\n  constructor(state: PileState, pieceFactory: PieceFactory = defaultPieceFactory) {\n    this._state = state;\n    this.pieceFactory = pieceFactory;\n  }\n\n  /**\n   * Returns the total number of pieces in the pile.\n   */\n  get length(): number {\n    return Object.keys(this._state.inventory).reduce(\n      (sum, key) => sum + (this._state.inventory[key] ?? 0),\n      0,\n    );\n  }\n\n  get state(): PileState {\n    return deepClone(this._state) as PileState;\n  }\n\n  get kind(): string {\n    return this._state.kind;\n  }\n\n  setState(newState: PileState) {\n    this._state = newState;\n  }\n\n  /**\n   * @param count The number of pieces to draw from the pile.\n   * @returns An array where each member represents the piece that was drawn. A `null`\n   * will be returned for any piece drawn while the pile is empty.\n   */\n  pull(count = 1): (Piece | null)[] {\n    const pieces: (Piece | null)[] = [];\n    for (let i = 0; i  {\n        /** this.pieceCounts.get(key) will always return a value, but TSC complains it could be unknown. */\n        const pieceCount = this._state.inventory[key] ?? 0;\n        return pieceCount > 0;\n      });\n\n      if (piecesWithCount.length) {\n        const kind = piecesWithCount[Math.floor(Math.random() * piecesWithCount.length)];\n        const currentCount = this._state.inventory[kind] ?? 0;\n        pieces.push(this.pieceFactory(kind));\n        this._state.inventory[kind] = currentCount - 1;\n      } else {\n        pieces.push(null);\n      }\n    }\n    return pieces;\n  }\n\n  /**\n   * @param pieces An array of pieces to add to the pile.\n   */\n  put(pieces: Piece[]): void {\n    for (const piece of pieces) {\n      // Assume the current count is 0 if the piece is not yet in the inventory\n      const currentItemCount = this._state.inventory[piece.kind] || 0;\n      this._state.inventory[piece.kind] = currentItemCount + 1;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PileService.html":{"url":"injectables/PileService.html","title":"injectable - PileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/service/pile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                kindToLengthObservables\n                            \n                            \n                                    Private\n                                kindToLengthSubjects\n                            \n                            \n                                    Private\n                                kindToPile\n                            \n                            \n                                    Private\n                                registeredPileKinds\n                            \n                            \n                                registeredPiles$\n                            \n                            \n                                    Private\n                                registeredPilesSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitLength\n                            \n                            \n                                    Private\n                                getPile\n                            \n                            \n                                    Private\n                                initialize\n                            \n                            \n                                pull\n                            \n                            \n                                put\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                updateGameState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gameStateSvc: GameStateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/engine/service/pile.service.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gameStateSvc\n                                                  \n                                                        \n                                                                        GameStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emitLength\n                        \n                    \n                \n            \n            \n                \n                        \n                    emitLength(pile: Pile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pile\n                                            \n                                                            Pile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPile(kind: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Pile\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pull\n                        \n                    \n                \n            \n            \n                \npull(kind: string, count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Pulls a specified number of pieces from the pile of the given kind.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The kind of pile to pull pieces from.\n\n                                            \n                                        \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                            \n                                                    The number of pieces to pull. Defaults to 1.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     []\n\n                        \n                            \n                                An array of pieces pulled from the pile, or null values if the pile is empty.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(kind: string, pieces: Piece[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:112\n                        \n                    \n\n\n            \n                \n                        Puts the specified pieces into the pile of the given kind.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The kind of pile to put pieces into.\n\n                                            \n                                        \n                                        \n                                                pieces\n                                            \n                                                            Piece[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The pieces to put into the pile.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(piles: Pile[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                piles\n                                            \n                                                            Pile[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateGameState\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateGameState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/engine/service/pile.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        kindToLengthObservables\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map>()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:33\n                        \n                    \n\n            \n                \n                    Returns a map with a key for each registered pile and the value being an Observable emitting the length of the respective pile.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kindToLengthSubjects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map\n  >()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kindToPile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registeredPileKinds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Set\n\n                    \n                \n                \n                    \n                        Default value : new Set()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registeredPiles$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.registeredPilesSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:29\n                        \n                    \n\n            \n                \n                    Subscribers can use this Observable to determine if the pile they have been interested has been registered. Once the pile is registered,\nthen the subscriber can subscribe to other Observables, such as those made available in kindToLengthObservables\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        registeredPilesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject>(new Set())\n                    \n                \n                    \n                        \n                                Defined in src/app/engine/service/pile.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GameStateService } from './game-state.service';\nimport { Pile } from '../model/pile.model';\nimport { Piece } from '../model/piece.model';\nimport { BehaviorSubject, distinctUntilChanged, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\n/**\n * PileService is used to interact with the Piles used within the game. It manages their local state and related game state.\n * When the game is initialized, all the Piles to be used within the game would be registered with the PileService using the register method.\n * Callers that are interested in the state of a pile, such as a Component, can subscribe to the registeredPiles$ observable to validate the\n * Pile is registered. Once that is validated, they can make calls such as to pull or put pieces from/to the pile and subscribe to updates in\n * it's length.\n */\nexport class PileService {\n  private kindToPile: Map = new Map();\n  private registeredPileKinds: Set = new Set();\n  private registeredPilesSubject = new BehaviorSubject>(new Set());\n  private kindToLengthSubjects: Map> = new Map\n  >();\n  /**\n   * Subscribers can use this Observable to determine if the pile they have been interested has been registered. Once the pile is registered,\n   * then the subscriber can subscribe to other Observables, such as those made available in kindToLengthObservables\n   */\n  registeredPiles$: Observable> = this.registeredPilesSubject.asObservable();\n  /**\n   * Returns a map with a key for each registered pile and the value being an Observable emitting the length of the respective pile.\n   */\n  kindToLengthObservables: Map> = new Map>();\n\n  constructor(private gameStateSvc: GameStateService) {\n    this.initialize();\n  }\n\n  private initialize(): void {\n    this.gameStateSvc.pile$.subscribe((pileStates) => {\n      pileStates.forEach((pileState) => {\n        const pile = this.getPile(pileState.kind);\n        pile.setState(pileState);\n        this.emitLength(pile);\n      });\n    });\n  }\n\n  private emitLength(pile: Pile): void {\n    const lengthSubject = this.kindToLengthSubjects.get(pile.kind);\n    if (lengthSubject) {\n      lengthSubject.next(pile.length);\n    } else {\n      throw new Error(`Unable to find lengthSubject for pile kind ${pile.kind}`);\n    }\n  }\n\n  private updateGameState(): void {\n    for (const pile of this.kindToPile.values()) {\n      this.gameStateSvc.setPile(pile.state);\n      this.emitLength(pile);\n    }\n  }\n\n  private getPile(kind: string): Pile {\n    const pile = this.kindToPile.get(kind);\n    if (!pile) {\n      throw new Error(`Pile for kind ${kind} is not registered.`);\n    } else {\n      return pile;\n    }\n  }\n\n  register(piles: Pile[]): void {\n    piles.forEach((pile) => {\n      if (!this.registeredPileKinds.has(pile.kind)) {\n        this.kindToPile.set(pile.kind, pile);\n        this.registeredPileKinds.add(pile.kind);\n        const lengthSubject = new BehaviorSubject(pile.length);\n        this.kindToLengthSubjects.set(pile.kind, lengthSubject);\n        this.kindToLengthObservables.set(\n          pile.kind,\n          lengthSubject.asObservable().pipe(distinctUntilChanged()),\n        );\n      } else {\n        throw new Error(`Pile for kind ${pile.kind} already registered.`);\n      }\n    });\n    this.registeredPilesSubject.next(this.registeredPileKinds);\n    this.updateGameState();\n  }\n\n  /**\n   * Pulls a specified number of pieces from the pile of the given kind.\n   * @param kind The kind of pile to pull pieces from.\n   * @param count The number of pieces to pull. Defaults to 1.\n   * @returns An array of pieces pulled from the pile, or null values if the pile is empty.\n   */\n  pull(kind: string, count = 1): (Piece | null)[] {\n    this.gameStateSvc.requireTransaction();\n    const pile = this.getPile(kind);\n    const pieces = pile.pull(count);\n    this.updateGameState();\n    return pieces;\n  }\n\n  /**\n   * Puts the specified pieces into the pile of the given kind.\n   * @param kind The kind of pile to put pieces into.\n   * @param pieces The pieces to put into the pile.\n   */\n  put(kind: string, pieces: Piece[]): void {\n    this.gameStateSvc.requireTransaction();\n    const pile = this.getPile(kind);\n    pile.put(pieces);\n    this.updateGameState();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PileState.html":{"url":"interfaces/PileState.html","title":"interface - PileState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PileState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/pile.model.ts\n        \n\n\n            \n                Description\n            \n            \n                PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n\n            \n\n            \n                Extends\n            \n            \n                            GameStateElement\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            inventory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inventory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inventory:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultPieceFactory, Piece, PieceFactory } from './piece.model';\nimport { GameStateElement } from './game-state.model';\nimport { deepClone } from 'fast-json-patch';\n\n/**\n * PileState is pretty simple as it just keeps tracks of what kinds of pieces are in the pile and how many of them.\n */\nexport interface PileState extends GameStateElement {\n  inventory: Record;\n}\n\n/**\n * A Pile is used to draw one or more random pieces for a defined pool of pieces.\n * A Pile has two Type Vars needed to be set when it's instantiated:\n *\n * **Tpiece** Kind A type var used to set the kinds of Pieces the Pipe can contain and\n *\n * **Tpiece** A type var used to set the type of Piece the Pile creates\n *\n */\nexport class Pile {\n  private readonly pieceFactory: PieceFactory;\n  private _state: PileState;\n\n  /**\n   * @param state An object that acts as the definition for the pool of pieces the Pile represents.\n   * Each key is the kind of pieces included in the Pile, and the values are the count of that kind of piece in\n   * the pile.\n   * @param pieceFactory A factory function use to build the random selected piece.\n   */\n  constructor(state: PileState, pieceFactory: PieceFactory = defaultPieceFactory) {\n    this._state = state;\n    this.pieceFactory = pieceFactory;\n  }\n\n  /**\n   * Returns the total number of pieces in the pile.\n   */\n  get length(): number {\n    return Object.keys(this._state.inventory).reduce(\n      (sum, key) => sum + (this._state.inventory[key] ?? 0),\n      0,\n    );\n  }\n\n  get state(): PileState {\n    return deepClone(this._state) as PileState;\n  }\n\n  get kind(): string {\n    return this._state.kind;\n  }\n\n  setState(newState: PileState) {\n    this._state = newState;\n  }\n\n  /**\n   * @param count The number of pieces to draw from the pile.\n   * @returns An array where each member represents the piece that was drawn. A `null`\n   * will be returned for any piece drawn while the pile is empty.\n   */\n  pull(count = 1): (Piece | null)[] {\n    const pieces: (Piece | null)[] = [];\n    for (let i = 0; i  {\n        /** this.pieceCounts.get(key) will always return a value, but TSC complains it could be unknown. */\n        const pieceCount = this._state.inventory[key] ?? 0;\n        return pieceCount > 0;\n      });\n\n      if (piecesWithCount.length) {\n        const kind = piecesWithCount[Math.floor(Math.random() * piecesWithCount.length)];\n        const currentCount = this._state.inventory[kind] ?? 0;\n        pieces.push(this.pieceFactory(kind));\n        this._state.inventory[kind] = currentCount - 1;\n      } else {\n        pieces.push(null);\n      }\n    }\n    return pieces;\n  }\n\n  /**\n   * @param pieces An array of pieces to add to the pile.\n   */\n  put(pieces: Piece[]): void {\n    for (const piece of pieces) {\n      // Assume the current count is 0 if the piece is not yet in the inventory\n      const currentItemCount = this._state.inventory[piece.kind] || 0;\n      this._state.inventory[piece.kind] = currentItemCount + 1;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Player.html":{"url":"interfaces/Player.html","title":"interface - Player","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Player\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/engine/model/player.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Player {\n  id: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/engine/model/faction.model.ts\n            \n            interface\n            FactionState\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state-patch.model.ts\n            \n            interface\n            GameStatePatch\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state.model.ts\n            \n            interface\n            GameState\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/engine/model/game-state.model.ts\n            \n            interface\n            GameStateElement\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/piece.model.ts\n            \n            interface\n            Piece\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/piece.model.ts\n            \n            function\n            defaultPieceFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/engine/model/pile.model.ts\n            \n            class\n            Pile\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/engine/model/pile.model.ts\n            \n            interface\n            PileState\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/engine/model/player.model.ts\n            \n            interface\n            Player\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-management.service.ts\n            \n            injectable\n            GameManagementService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-client.service.ts\n            \n            injectable\n            GameStateClientService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-patch.service.ts\n            \n            injectable\n            GameStatePatchService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state-store.service.ts\n            \n            injectable\n            GameStateStoreService\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/engine/service/game-state.service.ts\n            \n            injectable\n            GameStateService\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                src/app/engine/service/pile.service.ts\n            \n            injectable\n            PileService\n            \n                26 %\n                (4/15)\n            \n        \n        \n            \n                \n                src/app/engine/util.ts\n            \n            function\n            deepCompare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/game/component/draw-pool-game/draw-pool-game.component.ts\n            \n            component\n            DrawPoolGameComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/game/dominant-species.constants.ts\n            \n            variable\n            baseGameState\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/game/model/animal.model.ts\n            \n            class\n            Animal\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/app/game/model/animal.model.ts\n            \n            variable\n            inherentElementKindByAnimalKind\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.2.0\n        \n            @angular/cdk : ^18.2.7\n        \n            @angular/common : ^18.2.0\n        \n            @angular/compiler : ^18.2.0\n        \n            @angular/core : ^18.2.0\n        \n            @angular/forms : ^18.2.0\n        \n            @angular/material : ^18.2.7\n        \n            @angular/platform-browser : ^18.2.0\n        \n            @angular/platform-browser-dynamic : ^18.2.0\n        \n            @angular/router : ^18.2.0\n        \n            fast-json-patch : ^3.1.1\n        \n            lodash : ^4.17.21\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.10\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dsPieceKind   (src/.../dominant-species.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/game/dominant-species.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        dsPieceKind\n                    \n                \n                        \n                            \n                                 ELEMENT\n                            \n                        \n                        \n                            \n                                Value : element\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_AMPHIBIAN\n                            \n                        \n                        \n                            \n                                Value : actionPawnAmphibian\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_ARACHNID\n                            \n                        \n                        \n                            \n                                Value : actionPawnArachnid\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_BIRD\n                            \n                        \n                        \n                            \n                                Value : actionPawnBird\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_INSECT\n                            \n                        \n                        \n                            \n                                Value : actionPawnInsect\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_MAMMAL\n                            \n                        \n                        \n                            \n                                Value : actionPawnMammal\n                            \n                        \n                        \n                            \n                                 ACTION_PAWN_REPTILE\n                            \n                        \n                        \n                            \n                                Value : actionPawnReptile\n                            \n                        \n                        \n                            \n                                 SPECIES_AMPHIBIAN\n                            \n                        \n                        \n                            \n                                Value : speciesAmphibian\n                            \n                        \n                        \n                            \n                                 SPECIES_ARACHNID\n                            \n                        \n                        \n                            \n                                Value : speciesArachnid\n                            \n                        \n                        \n                            \n                                 SPECIES_BIRD\n                            \n                        \n                        \n                            \n                                Value : speciesBird\n                            \n                        \n                        \n                            \n                                 SPECIES_INSECT\n                            \n                        \n                        \n                            \n                                Value : speciesInsect\n                            \n                        \n                        \n                            \n                                 SPECIES_MAMMAL\n                            \n                        \n                        \n                            \n                                Value : speciesMammal\n                            \n                        \n                        \n                            \n                                 SPECIES_REPTILE\n                            \n                        \n                        \n                            \n                                Value : speciesReptile\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            deepCompare   (src/.../util.ts)\n                        \n                        \n                            defaultPieceFactory   (src/.../piece.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/engine/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deepCompare\n                        \n                    \n                \n            \n            \n                \ndeepCompare(object1, object2)\n                \n            \n\n\n\n\n            \n                \n                        Used to determine if two objects are equal. Often used in distinctUntilChanged().\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                object1\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                object2\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/app/engine/model/piece.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultPieceFactory\n                        \n                    \n                \n            \n            \n                \ndefaultPieceFactory(kind: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kind\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Piece\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDominantSpecies\nThis project was generated with Angular CLI version 18.2.5.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 Joe K.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnimalKind   (src/.../animal.model.ts)\n                        \n                        \n                            AnimalState   (src/.../animal.model.ts)\n                        \n                        \n                            PieceFactory   (src/.../piece.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/game/model/animal.model.ts\n    \n    \n        \n            \n                \n                    \n                    AnimalKind\n                \n            \n            \n                \n                            \"amphibianAnimal\" | \"arachnidAnimal\" | \"birdAnimal\" | \"insectAnimal\" | \"mammalAnimal\" | \"reptileAnimal\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AnimalState\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/app/engine/model/piece.model.ts\n    \n    \n        \n            \n                \n                    \n                    PieceFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            baseGameState   (src/.../dominant-species.constants.ts)\n                        \n                        \n                            inherentElementKindByAnimalKind   (src/.../animal.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideAnimationsAsync('noop'),\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/app/game/dominant-species.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        baseGameState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameState\n\n                    \n                \n                \n                    \n                        Default value : {\n  faction: [],\n  pile: [\n    {\n      kind: dsPieceKind.ELEMENT as string,\n      inventory: {\n        // 20 Elements each, with 2 being places on Earth, leaving 18 in the bag\n        grassElement: 18,\n        grubElement: 18,\n        meatElement: 18,\n        seedElement: 18,\n        sunElement: 18,\n        waterElement: 18,\n      },\n    },\n  ],\n}\n                    \n                \n\n            \n                \n                    GameState defining the static elements of the DS game\n\n                \n            \n\n        \n    \n\n    src/app/game/model/animal.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        inherentElementKindByAnimalKind\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map([\n  ['amphibianAnimal', 'waterElement'],\n  ['arachnidAnimal', 'grubElement'],\n  ['birdAnimal', 'seedElement'],\n  ['insectAnimal', 'grassElement'],\n  ['mammalAnimal', 'meatElement'],\n  ['reptileAnimal', 'sunElement'],\n] as const)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
